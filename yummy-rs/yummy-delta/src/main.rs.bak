use actix_web::middleware::Logger;
use actix_web::{web, App, HttpServer};

pub mod common;
pub mod config;
pub mod delta;
pub mod models;
pub mod server;
use delta::DeltaManager;
use server::{
    append, create_table, details, health, list_stores, list_tables, optimize, overwrite,
    query_stream, vacuum,
};

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    let base_path = "file:///tmp/".to_string();
    let log_level = "error".to_string();
    let host = "0.0.0.0".to_string();
    let port = 8080;

    let path = "./tests/delta/config.yaml".to_string();

    env_logger::init_from_env(env_logger::Env::new().default_filter_or(log_level));
    println!("Yummy delta server running on http://{}:{}", host, port);

    HttpServer::new(move || {
        App::new()
            .app_data(web::Data::new(DeltaManager::new(path.clone()).unwrap()))
            .app_data(web::Data::new(base_path.clone()))
            .route("/health", web::get().to(health))
            .route("/api/1.0/delta", web::get().to(list_stores))
            .route("/api/1.0/delta/{store_name}", web::get().to(list_tables))
            .route(
                "/api/1.0/delta/{store_name}/{table_name}",
                web::get().to(query_stream),
            )
            .route(
                "/api/1.0/delta/{store_name}/{table_name}/details",
                web::get().to(details),
            )
            .route("/api/1.0/delta/{store_name}", web::post().to(create_table))
            .route(
                "/api/1.0/delta/{store_name}/{table_name}",
                web::post().to(append),
            )
            .route(
                "/api/1.0/delta/{store_name}/{table_name}",
                web::put().to(overwrite),
            )
            .route(
                "/api/1.0/delta/{store_name}/{table_name}/optimize",
                web::post().to(optimize),
            )
            .route(
                "/api/1.0/delta/{store_name}/{table_name}/vacuum",
                web::post().to(vacuum),
            )
            .wrap(Logger::default())
    })
    .bind((host, port))?
    .run()
    .await
}
