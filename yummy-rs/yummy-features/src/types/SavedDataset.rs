// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `feast/core/SavedDataset.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.SavedDatasetSpec)
pub struct SavedDatasetSpec {
    // message fields
    ///  Name of the dataset. Must be unique since it's possible to overwrite dataset by name
    // @@protoc_insertion_point(field:feast.core.SavedDatasetSpec.name)
    pub name: ::std::string::String,
    ///  Name of Feast project that this Dataset belongs to.
    // @@protoc_insertion_point(field:feast.core.SavedDatasetSpec.project)
    pub project: ::std::string::String,
    ///  list of feature references with format "<view name>:<feature name>"
    // @@protoc_insertion_point(field:feast.core.SavedDatasetSpec.features)
    pub features: ::std::vec::Vec<::std::string::String>,
    ///  entity columns + request columns from all feature views used during retrieval
    // @@protoc_insertion_point(field:feast.core.SavedDatasetSpec.join_keys)
    pub join_keys: ::std::vec::Vec<::std::string::String>,
    ///  Whether full feature names are used in stored data
    // @@protoc_insertion_point(field:feast.core.SavedDatasetSpec.full_feature_names)
    pub full_feature_names: bool,
    // @@protoc_insertion_point(field:feast.core.SavedDatasetSpec.storage)
    pub storage: ::protobuf::MessageField<SavedDatasetStorage>,
    ///  Optional and only populated if generated from a feature service fetch
    // @@protoc_insertion_point(field:feast.core.SavedDatasetSpec.feature_service_name)
    pub feature_service_name: ::std::string::String,
    ///  User defined metadata
    // @@protoc_insertion_point(field:feast.core.SavedDatasetSpec.tags)
    pub tags: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.SavedDatasetSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SavedDatasetSpec {
    fn default() -> &'a SavedDatasetSpec {
        <SavedDatasetSpec as ::protobuf::Message>::default_instance()
    }
}

impl SavedDatasetSpec {
    pub fn new() -> SavedDatasetSpec {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &SavedDatasetSpec| { &m.name },
            |m: &mut SavedDatasetSpec| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "project",
            |m: &SavedDatasetSpec| { &m.project },
            |m: &mut SavedDatasetSpec| { &mut m.project },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "features",
            |m: &SavedDatasetSpec| { &m.features },
            |m: &mut SavedDatasetSpec| { &mut m.features },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "join_keys",
            |m: &SavedDatasetSpec| { &m.join_keys },
            |m: &mut SavedDatasetSpec| { &mut m.join_keys },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "full_feature_names",
            |m: &SavedDatasetSpec| { &m.full_feature_names },
            |m: &mut SavedDatasetSpec| { &mut m.full_feature_names },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SavedDatasetStorage>(
            "storage",
            |m: &SavedDatasetSpec| { &m.storage },
            |m: &mut SavedDatasetSpec| { &mut m.storage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "feature_service_name",
            |m: &SavedDatasetSpec| { &m.feature_service_name },
            |m: &mut SavedDatasetSpec| { &mut m.feature_service_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "tags",
            |m: &SavedDatasetSpec| { &m.tags },
            |m: &mut SavedDatasetSpec| { &mut m.tags },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SavedDatasetSpec>(
            "SavedDatasetSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SavedDatasetSpec {
    const NAME: &'static str = "SavedDatasetSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.project = is.read_string()?;
                },
                26 => {
                    self.features.push(is.read_string()?);
                },
                34 => {
                    self.join_keys.push(is.read_string()?);
                },
                40 => {
                    self.full_feature_names = is.read_bool()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.storage)?;
                },
                66 => {
                    self.feature_service_name = is.read_string()?;
                },
                58 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.tags.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.project.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.project);
        }
        for value in &self.features {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.join_keys {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if self.full_feature_names != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.storage.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.feature_service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.feature_service_name);
        }
        for (k, v) in &self.tags {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.project.is_empty() {
            os.write_string(2, &self.project)?;
        }
        for v in &self.features {
            os.write_string(3, &v)?;
        };
        for v in &self.join_keys {
            os.write_string(4, &v)?;
        };
        if self.full_feature_names != false {
            os.write_bool(5, self.full_feature_names)?;
        }
        if let Some(v) = self.storage.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if !self.feature_service_name.is_empty() {
            os.write_string(8, &self.feature_service_name)?;
        }
        for (k, v) in &self.tags {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(58)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SavedDatasetSpec {
        SavedDatasetSpec::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.project.clear();
        self.features.clear();
        self.join_keys.clear();
        self.full_feature_names = false;
        self.storage.clear();
        self.feature_service_name.clear();
        self.tags.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SavedDatasetSpec {
        static instance: ::protobuf::rt::Lazy<SavedDatasetSpec> = ::protobuf::rt::Lazy::new();
        instance.get(SavedDatasetSpec::new)
    }
}

impl ::protobuf::MessageFull for SavedDatasetSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SavedDatasetSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SavedDatasetSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SavedDatasetSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.SavedDatasetStorage)
pub struct SavedDatasetStorage {
    // message oneof groups
    pub kind: ::std::option::Option<saved_dataset_storage::Kind>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.SavedDatasetStorage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SavedDatasetStorage {
    fn default() -> &'a SavedDatasetStorage {
        <SavedDatasetStorage as ::protobuf::Message>::default_instance()
    }
}

impl SavedDatasetStorage {
    pub fn new() -> SavedDatasetStorage {
        ::std::default::Default::default()
    }

    // .feast.core.DataSource.FileOptions file_storage = 4;

    pub fn file_storage(&self) -> &super::DataSource::data_source::FileOptions {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::FileStorage(ref v)) => v,
            _ => <super::DataSource::data_source::FileOptions as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_file_storage(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_file_storage(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::FileStorage(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_file_storage(&mut self, v: super::DataSource::data_source::FileOptions) {
        self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::FileStorage(v))
    }

    // Mutable pointer to the field.
    pub fn mut_file_storage(&mut self) -> &mut super::DataSource::data_source::FileOptions {
        if let ::std::option::Option::Some(saved_dataset_storage::Kind::FileStorage(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::FileStorage(super::DataSource::data_source::FileOptions::new()));
        }
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::FileStorage(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_file_storage(&mut self) -> super::DataSource::data_source::FileOptions {
        if self.has_file_storage() {
            match self.kind.take() {
                ::std::option::Option::Some(saved_dataset_storage::Kind::FileStorage(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DataSource::data_source::FileOptions::new()
        }
    }

    // .feast.core.DataSource.BigQueryOptions bigquery_storage = 5;

    pub fn bigquery_storage(&self) -> &super::DataSource::data_source::BigQueryOptions {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::BigqueryStorage(ref v)) => v,
            _ => <super::DataSource::data_source::BigQueryOptions as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_bigquery_storage(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_bigquery_storage(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::BigqueryStorage(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bigquery_storage(&mut self, v: super::DataSource::data_source::BigQueryOptions) {
        self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::BigqueryStorage(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bigquery_storage(&mut self) -> &mut super::DataSource::data_source::BigQueryOptions {
        if let ::std::option::Option::Some(saved_dataset_storage::Kind::BigqueryStorage(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::BigqueryStorage(super::DataSource::data_source::BigQueryOptions::new()));
        }
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::BigqueryStorage(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bigquery_storage(&mut self) -> super::DataSource::data_source::BigQueryOptions {
        if self.has_bigquery_storage() {
            match self.kind.take() {
                ::std::option::Option::Some(saved_dataset_storage::Kind::BigqueryStorage(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DataSource::data_source::BigQueryOptions::new()
        }
    }

    // .feast.core.DataSource.RedshiftOptions redshift_storage = 6;

    pub fn redshift_storage(&self) -> &super::DataSource::data_source::RedshiftOptions {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::RedshiftStorage(ref v)) => v,
            _ => <super::DataSource::data_source::RedshiftOptions as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_redshift_storage(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_redshift_storage(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::RedshiftStorage(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_redshift_storage(&mut self, v: super::DataSource::data_source::RedshiftOptions) {
        self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::RedshiftStorage(v))
    }

    // Mutable pointer to the field.
    pub fn mut_redshift_storage(&mut self) -> &mut super::DataSource::data_source::RedshiftOptions {
        if let ::std::option::Option::Some(saved_dataset_storage::Kind::RedshiftStorage(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::RedshiftStorage(super::DataSource::data_source::RedshiftOptions::new()));
        }
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::RedshiftStorage(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_redshift_storage(&mut self) -> super::DataSource::data_source::RedshiftOptions {
        if self.has_redshift_storage() {
            match self.kind.take() {
                ::std::option::Option::Some(saved_dataset_storage::Kind::RedshiftStorage(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DataSource::data_source::RedshiftOptions::new()
        }
    }

    // .feast.core.DataSource.SnowflakeOptions snowflake_storage = 7;

    pub fn snowflake_storage(&self) -> &super::DataSource::data_source::SnowflakeOptions {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::SnowflakeStorage(ref v)) => v,
            _ => <super::DataSource::data_source::SnowflakeOptions as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_snowflake_storage(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_snowflake_storage(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::SnowflakeStorage(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_snowflake_storage(&mut self, v: super::DataSource::data_source::SnowflakeOptions) {
        self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::SnowflakeStorage(v))
    }

    // Mutable pointer to the field.
    pub fn mut_snowflake_storage(&mut self) -> &mut super::DataSource::data_source::SnowflakeOptions {
        if let ::std::option::Option::Some(saved_dataset_storage::Kind::SnowflakeStorage(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::SnowflakeStorage(super::DataSource::data_source::SnowflakeOptions::new()));
        }
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::SnowflakeStorage(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_snowflake_storage(&mut self) -> super::DataSource::data_source::SnowflakeOptions {
        if self.has_snowflake_storage() {
            match self.kind.take() {
                ::std::option::Option::Some(saved_dataset_storage::Kind::SnowflakeStorage(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DataSource::data_source::SnowflakeOptions::new()
        }
    }

    // .feast.core.DataSource.TrinoOptions trino_storage = 8;

    pub fn trino_storage(&self) -> &super::DataSource::data_source::TrinoOptions {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::TrinoStorage(ref v)) => v,
            _ => <super::DataSource::data_source::TrinoOptions as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_trino_storage(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_trino_storage(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::TrinoStorage(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_trino_storage(&mut self, v: super::DataSource::data_source::TrinoOptions) {
        self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::TrinoStorage(v))
    }

    // Mutable pointer to the field.
    pub fn mut_trino_storage(&mut self) -> &mut super::DataSource::data_source::TrinoOptions {
        if let ::std::option::Option::Some(saved_dataset_storage::Kind::TrinoStorage(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::TrinoStorage(super::DataSource::data_source::TrinoOptions::new()));
        }
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::TrinoStorage(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_trino_storage(&mut self) -> super::DataSource::data_source::TrinoOptions {
        if self.has_trino_storage() {
            match self.kind.take() {
                ::std::option::Option::Some(saved_dataset_storage::Kind::TrinoStorage(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DataSource::data_source::TrinoOptions::new()
        }
    }

    // .feast.core.DataSource.SparkOptions spark_storage = 9;

    pub fn spark_storage(&self) -> &super::DataSource::data_source::SparkOptions {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::SparkStorage(ref v)) => v,
            _ => <super::DataSource::data_source::SparkOptions as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_spark_storage(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_spark_storage(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::SparkStorage(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_spark_storage(&mut self, v: super::DataSource::data_source::SparkOptions) {
        self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::SparkStorage(v))
    }

    // Mutable pointer to the field.
    pub fn mut_spark_storage(&mut self) -> &mut super::DataSource::data_source::SparkOptions {
        if let ::std::option::Option::Some(saved_dataset_storage::Kind::SparkStorage(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::SparkStorage(super::DataSource::data_source::SparkOptions::new()));
        }
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::SparkStorage(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_spark_storage(&mut self) -> super::DataSource::data_source::SparkOptions {
        if self.has_spark_storage() {
            match self.kind.take() {
                ::std::option::Option::Some(saved_dataset_storage::Kind::SparkStorage(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DataSource::data_source::SparkOptions::new()
        }
    }

    // .feast.core.DataSource.CustomSourceOptions custom_storage = 10;

    pub fn custom_storage(&self) -> &super::DataSource::data_source::CustomSourceOptions {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::CustomStorage(ref v)) => v,
            _ => <super::DataSource::data_source::CustomSourceOptions as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_custom_storage(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_custom_storage(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::CustomStorage(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_custom_storage(&mut self, v: super::DataSource::data_source::CustomSourceOptions) {
        self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::CustomStorage(v))
    }

    // Mutable pointer to the field.
    pub fn mut_custom_storage(&mut self) -> &mut super::DataSource::data_source::CustomSourceOptions {
        if let ::std::option::Option::Some(saved_dataset_storage::Kind::CustomStorage(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::CustomStorage(super::DataSource::data_source::CustomSourceOptions::new()));
        }
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::CustomStorage(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_custom_storage(&mut self) -> super::DataSource::data_source::CustomSourceOptions {
        if self.has_custom_storage() {
            match self.kind.take() {
                ::std::option::Option::Some(saved_dataset_storage::Kind::CustomStorage(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DataSource::data_source::CustomSourceOptions::new()
        }
    }

    // .feast.core.DataSource.AthenaOptions athena_storage = 11;

    pub fn athena_storage(&self) -> &super::DataSource::data_source::AthenaOptions {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::AthenaStorage(ref v)) => v,
            _ => <super::DataSource::data_source::AthenaOptions as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_athena_storage(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_athena_storage(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::AthenaStorage(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_athena_storage(&mut self, v: super::DataSource::data_source::AthenaOptions) {
        self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::AthenaStorage(v))
    }

    // Mutable pointer to the field.
    pub fn mut_athena_storage(&mut self) -> &mut super::DataSource::data_source::AthenaOptions {
        if let ::std::option::Option::Some(saved_dataset_storage::Kind::AthenaStorage(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::AthenaStorage(super::DataSource::data_source::AthenaOptions::new()));
        }
        match self.kind {
            ::std::option::Option::Some(saved_dataset_storage::Kind::AthenaStorage(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_athena_storage(&mut self) -> super::DataSource::data_source::AthenaOptions {
        if self.has_athena_storage() {
            match self.kind.take() {
                ::std::option::Option::Some(saved_dataset_storage::Kind::AthenaStorage(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DataSource::data_source::AthenaOptions::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DataSource::data_source::FileOptions>(
            "file_storage",
            SavedDatasetStorage::has_file_storage,
            SavedDatasetStorage::file_storage,
            SavedDatasetStorage::mut_file_storage,
            SavedDatasetStorage::set_file_storage,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DataSource::data_source::BigQueryOptions>(
            "bigquery_storage",
            SavedDatasetStorage::has_bigquery_storage,
            SavedDatasetStorage::bigquery_storage,
            SavedDatasetStorage::mut_bigquery_storage,
            SavedDatasetStorage::set_bigquery_storage,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DataSource::data_source::RedshiftOptions>(
            "redshift_storage",
            SavedDatasetStorage::has_redshift_storage,
            SavedDatasetStorage::redshift_storage,
            SavedDatasetStorage::mut_redshift_storage,
            SavedDatasetStorage::set_redshift_storage,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DataSource::data_source::SnowflakeOptions>(
            "snowflake_storage",
            SavedDatasetStorage::has_snowflake_storage,
            SavedDatasetStorage::snowflake_storage,
            SavedDatasetStorage::mut_snowflake_storage,
            SavedDatasetStorage::set_snowflake_storage,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DataSource::data_source::TrinoOptions>(
            "trino_storage",
            SavedDatasetStorage::has_trino_storage,
            SavedDatasetStorage::trino_storage,
            SavedDatasetStorage::mut_trino_storage,
            SavedDatasetStorage::set_trino_storage,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DataSource::data_source::SparkOptions>(
            "spark_storage",
            SavedDatasetStorage::has_spark_storage,
            SavedDatasetStorage::spark_storage,
            SavedDatasetStorage::mut_spark_storage,
            SavedDatasetStorage::set_spark_storage,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DataSource::data_source::CustomSourceOptions>(
            "custom_storage",
            SavedDatasetStorage::has_custom_storage,
            SavedDatasetStorage::custom_storage,
            SavedDatasetStorage::mut_custom_storage,
            SavedDatasetStorage::set_custom_storage,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DataSource::data_source::AthenaOptions>(
            "athena_storage",
            SavedDatasetStorage::has_athena_storage,
            SavedDatasetStorage::athena_storage,
            SavedDatasetStorage::mut_athena_storage,
            SavedDatasetStorage::set_athena_storage,
        ));
        oneofs.push(saved_dataset_storage::Kind::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SavedDatasetStorage>(
            "SavedDatasetStorage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SavedDatasetStorage {
    const NAME: &'static str = "SavedDatasetStorage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                34 => {
                    self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::FileStorage(is.read_message()?));
                },
                42 => {
                    self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::BigqueryStorage(is.read_message()?));
                },
                50 => {
                    self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::RedshiftStorage(is.read_message()?));
                },
                58 => {
                    self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::SnowflakeStorage(is.read_message()?));
                },
                66 => {
                    self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::TrinoStorage(is.read_message()?));
                },
                74 => {
                    self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::SparkStorage(is.read_message()?));
                },
                82 => {
                    self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::CustomStorage(is.read_message()?));
                },
                90 => {
                    self.kind = ::std::option::Option::Some(saved_dataset_storage::Kind::AthenaStorage(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &saved_dataset_storage::Kind::FileStorage(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &saved_dataset_storage::Kind::BigqueryStorage(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &saved_dataset_storage::Kind::RedshiftStorage(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &saved_dataset_storage::Kind::SnowflakeStorage(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &saved_dataset_storage::Kind::TrinoStorage(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &saved_dataset_storage::Kind::SparkStorage(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &saved_dataset_storage::Kind::CustomStorage(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &saved_dataset_storage::Kind::AthenaStorage(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &saved_dataset_storage::Kind::FileStorage(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &saved_dataset_storage::Kind::BigqueryStorage(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &saved_dataset_storage::Kind::RedshiftStorage(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &saved_dataset_storage::Kind::SnowflakeStorage(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &saved_dataset_storage::Kind::TrinoStorage(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &saved_dataset_storage::Kind::SparkStorage(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &saved_dataset_storage::Kind::CustomStorage(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &saved_dataset_storage::Kind::AthenaStorage(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SavedDatasetStorage {
        SavedDatasetStorage::new()
    }

    fn clear(&mut self) {
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.kind = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SavedDatasetStorage {
        static instance: SavedDatasetStorage = SavedDatasetStorage {
            kind: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SavedDatasetStorage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SavedDatasetStorage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SavedDatasetStorage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SavedDatasetStorage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SavedDatasetStorage`
pub mod saved_dataset_storage {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:feast.core.SavedDatasetStorage.kind)
    pub enum Kind {
        // @@protoc_insertion_point(oneof_field:feast.core.SavedDatasetStorage.file_storage)
        FileStorage(super::super::DataSource::data_source::FileOptions),
        // @@protoc_insertion_point(oneof_field:feast.core.SavedDatasetStorage.bigquery_storage)
        BigqueryStorage(super::super::DataSource::data_source::BigQueryOptions),
        // @@protoc_insertion_point(oneof_field:feast.core.SavedDatasetStorage.redshift_storage)
        RedshiftStorage(super::super::DataSource::data_source::RedshiftOptions),
        // @@protoc_insertion_point(oneof_field:feast.core.SavedDatasetStorage.snowflake_storage)
        SnowflakeStorage(super::super::DataSource::data_source::SnowflakeOptions),
        // @@protoc_insertion_point(oneof_field:feast.core.SavedDatasetStorage.trino_storage)
        TrinoStorage(super::super::DataSource::data_source::TrinoOptions),
        // @@protoc_insertion_point(oneof_field:feast.core.SavedDatasetStorage.spark_storage)
        SparkStorage(super::super::DataSource::data_source::SparkOptions),
        // @@protoc_insertion_point(oneof_field:feast.core.SavedDatasetStorage.custom_storage)
        CustomStorage(super::super::DataSource::data_source::CustomSourceOptions),
        // @@protoc_insertion_point(oneof_field:feast.core.SavedDatasetStorage.athena_storage)
        AthenaStorage(super::super::DataSource::data_source::AthenaOptions),
    }

    impl ::protobuf::Oneof for Kind {
    }

    impl ::protobuf::OneofFull for Kind {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::SavedDatasetStorage as ::protobuf::MessageFull>::descriptor().oneof_by_name("kind").unwrap()).clone()
        }
    }

    impl Kind {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Kind>("kind")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.SavedDatasetMeta)
pub struct SavedDatasetMeta {
    // message fields
    ///  Time when this saved dataset is created
    // @@protoc_insertion_point(field:feast.core.SavedDatasetMeta.created_timestamp)
    pub created_timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  Time when this saved dataset is last updated
    // @@protoc_insertion_point(field:feast.core.SavedDatasetMeta.last_updated_timestamp)
    pub last_updated_timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  Min timestamp in the dataset (needed for retrieval)
    // @@protoc_insertion_point(field:feast.core.SavedDatasetMeta.min_event_timestamp)
    pub min_event_timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  Max timestamp in the dataset (needed for retrieval)
    // @@protoc_insertion_point(field:feast.core.SavedDatasetMeta.max_event_timestamp)
    pub max_event_timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.SavedDatasetMeta.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SavedDatasetMeta {
    fn default() -> &'a SavedDatasetMeta {
        <SavedDatasetMeta as ::protobuf::Message>::default_instance()
    }
}

impl SavedDatasetMeta {
    pub fn new() -> SavedDatasetMeta {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "created_timestamp",
            |m: &SavedDatasetMeta| { &m.created_timestamp },
            |m: &mut SavedDatasetMeta| { &mut m.created_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "last_updated_timestamp",
            |m: &SavedDatasetMeta| { &m.last_updated_timestamp },
            |m: &mut SavedDatasetMeta| { &mut m.last_updated_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "min_event_timestamp",
            |m: &SavedDatasetMeta| { &m.min_event_timestamp },
            |m: &mut SavedDatasetMeta| { &mut m.min_event_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "max_event_timestamp",
            |m: &SavedDatasetMeta| { &m.max_event_timestamp },
            |m: &mut SavedDatasetMeta| { &mut m.max_event_timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SavedDatasetMeta>(
            "SavedDatasetMeta",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SavedDatasetMeta {
    const NAME: &'static str = "SavedDatasetMeta";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.created_timestamp)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_updated_timestamp)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.min_event_timestamp)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.max_event_timestamp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.created_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.last_updated_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.min_event_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.max_event_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.created_timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.last_updated_timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.min_event_timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.max_event_timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SavedDatasetMeta {
        SavedDatasetMeta::new()
    }

    fn clear(&mut self) {
        self.created_timestamp.clear();
        self.last_updated_timestamp.clear();
        self.min_event_timestamp.clear();
        self.max_event_timestamp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SavedDatasetMeta {
        static instance: SavedDatasetMeta = SavedDatasetMeta {
            created_timestamp: ::protobuf::MessageField::none(),
            last_updated_timestamp: ::protobuf::MessageField::none(),
            min_event_timestamp: ::protobuf::MessageField::none(),
            max_event_timestamp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SavedDatasetMeta {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SavedDatasetMeta").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SavedDatasetMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SavedDatasetMeta {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.SavedDataset)
pub struct SavedDataset {
    // message fields
    // @@protoc_insertion_point(field:feast.core.SavedDataset.spec)
    pub spec: ::protobuf::MessageField<SavedDatasetSpec>,
    // @@protoc_insertion_point(field:feast.core.SavedDataset.meta)
    pub meta: ::protobuf::MessageField<SavedDatasetMeta>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.SavedDataset.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SavedDataset {
    fn default() -> &'a SavedDataset {
        <SavedDataset as ::protobuf::Message>::default_instance()
    }
}

impl SavedDataset {
    pub fn new() -> SavedDataset {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SavedDatasetSpec>(
            "spec",
            |m: &SavedDataset| { &m.spec },
            |m: &mut SavedDataset| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SavedDatasetMeta>(
            "meta",
            |m: &SavedDataset| { &m.meta },
            |m: &mut SavedDataset| { &mut m.meta },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SavedDataset>(
            "SavedDataset",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SavedDataset {
    const NAME: &'static str = "SavedDataset";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.meta)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.meta.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SavedDataset {
        SavedDataset::new()
    }

    fn clear(&mut self) {
        self.spec.clear();
        self.meta.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SavedDataset {
        static instance: SavedDataset = SavedDataset {
            spec: ::protobuf::MessageField::none(),
            meta: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SavedDataset {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SavedDataset").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SavedDataset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SavedDataset {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dfeast/core/SavedDataset.proto\x12\nfeast.core\x1a\x1fgoogle/protob\
    uf/timestamp.proto\x1a\x1bfeast/core/DataSource.proto\"\x89\x03\n\x10Sav\
    edDatasetSpec\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x18\n\
    \x07project\x18\x02\x20\x01(\tR\x07project\x12\x1a\n\x08features\x18\x03\
    \x20\x03(\tR\x08features\x12\x1b\n\tjoin_keys\x18\x04\x20\x03(\tR\x08joi\
    nKeys\x12,\n\x12full_feature_names\x18\x05\x20\x01(\x08R\x10fullFeatureN\
    ames\x129\n\x07storage\x18\x06\x20\x01(\x0b2\x1f.feast.core.SavedDataset\
    StorageR\x07storage\x120\n\x14feature_service_name\x18\x08\x20\x01(\tR\
    \x12featureServiceName\x12:\n\x04tags\x18\x07\x20\x03(\x0b2&.feast.core.\
    SavedDatasetSpec.TagsEntryR\x04tags\x1a7\n\tTagsEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05va\
    lue:\x028\x01\"\xa4\x05\n\x13SavedDatasetStorage\x12G\n\x0cfile_storage\
    \x18\x04\x20\x01(\x0b2\".feast.core.DataSource.FileOptionsH\0R\x0bfileSt\
    orage\x12S\n\x10bigquery_storage\x18\x05\x20\x01(\x0b2&.feast.core.DataS\
    ource.BigQueryOptionsH\0R\x0fbigqueryStorage\x12S\n\x10redshift_storage\
    \x18\x06\x20\x01(\x0b2&.feast.core.DataSource.RedshiftOptionsH\0R\x0fred\
    shiftStorage\x12V\n\x11snowflake_storage\x18\x07\x20\x01(\x0b2'.feast.co\
    re.DataSource.SnowflakeOptionsH\0R\x10snowflakeStorage\x12J\n\rtrino_sto\
    rage\x18\x08\x20\x01(\x0b2#.feast.core.DataSource.TrinoOptionsH\0R\x0ctr\
    inoStorage\x12J\n\rspark_storage\x18\t\x20\x01(\x0b2#.feast.core.DataSou\
    rce.SparkOptionsH\0R\x0csparkStorage\x12S\n\x0ecustom_storage\x18\n\x20\
    \x01(\x0b2*.feast.core.DataSource.CustomSourceOptionsH\0R\rcustomStorage\
    \x12M\n\x0eathena_storage\x18\x0b\x20\x01(\x0b2$.feast.core.DataSource.A\
    thenaOptionsH\0R\rathenaStorageB\x06\n\x04kind\"\xc5\x02\n\x10SavedDatas\
    etMeta\x12G\n\x11created_timestamp\x18\x01\x20\x01(\x0b2\x1a.google.prot\
    obuf.TimestampR\x10createdTimestamp\x12P\n\x16last_updated_timestamp\x18\
    \x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x14lastUpdatedTimestam\
    p\x12J\n\x13min_event_timestamp\x18\x03\x20\x01(\x0b2\x1a.google.protobu\
    f.TimestampR\x11minEventTimestamp\x12J\n\x13max_event_timestamp\x18\x04\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x11maxEventTimestamp\"r\n\
    \x0cSavedDataset\x120\n\x04spec\x18\x01\x20\x01(\x0b2\x1c.feast.core.Sav\
    edDatasetSpecR\x04spec\x120\n\x04meta\x18\x02\x20\x01(\x0b2\x1c.feast.co\
    re.SavedDatasetMetaR\x04metaBV\n\x10feast.proto.coreB\x11SavedDatasetPro\
    toZ/github.com/feast-dev/feast/go/protos/feast/coreJ\x8a\x15\n\x06\x12\
    \x04\x11\0R\x01\n\xc6\x04\n\x01\x0c\x12\x03\x11\0\x122\xbb\x04\n\x20Copy\
    right\x202021\x20The\x20Feast\x20Authors\n\n\x20Licensed\x20under\x20the\
    \x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20y\
    ou\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\
    \x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\
    \x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20https://www.apache.org/l\
    icenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\
    \x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\
    \x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20\
    IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20A\
    NY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20Li\
    cense\x20for\x20the\x20specific\x20language\x20governing\x20permissions\
    \x20and\n\x20limitations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\
    \x12\x03\x13\0\x13\n\x08\n\x01\x08\x12\x03\x14\0)\n\t\n\x02\x08\x01\x12\
    \x03\x14\0)\n\x08\n\x01\x08\x12\x03\x15\02\n\t\n\x02\x08\x08\x12\x03\x15\
    \02\n\x08\n\x01\x08\x12\x03\x16\0F\n\t\n\x02\x08\x0b\x12\x03\x16\0F\n\t\
    \n\x02\x03\0\x12\x03\x18\0)\n\t\n\x02\x03\x01\x12\x03\x19\0%\n\n\n\x02\
    \x04\0\x12\x04\x1b\02\x01\n\n\n\x03\x04\0\x01\x12\x03\x1b\x08\x18\nc\n\
    \x04\x04\0\x02\0\x12\x03\x1d\x02\x12\x1aV\x20Name\x20of\x20the\x20datase\
    t.\x20Must\x20be\x20unique\x20since\x20it's\x20possible\x20to\x20overwri\
    te\x20dataset\x20by\x20name\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1d\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1d\t\r\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x1d\x10\x11\nB\n\x04\x04\0\x02\x01\x12\x03\x20\x02\
    \x15\x1a5\x20Name\x20of\x20Feast\x20project\x20that\x20this\x20Dataset\
    \x20belongs\x20to.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x20\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x20\t\x10\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x20\x13\x14\nR\n\x04\x04\0\x02\x02\x12\x03#\x02\x1f\x1aE\
    \x20list\x20of\x20feature\x20references\x20with\x20format\x20\"<view\x20\
    name>:<feature\x20name>\"\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03#\x02\n\
    \n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03#\x0b\x11\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03#\x12\x1a\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03#\x1d\x1e\
    \n\\\n\x04\x04\0\x02\x03\x12\x03&\x02\x20\x1aO\x20entity\x20columns\x20+\
    \x20request\x20columns\x20from\x20all\x20feature\x20views\x20used\x20dur\
    ing\x20retrieval\n\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03&\x02\n\n\x0c\n\
    \x05\x04\0\x02\x03\x05\x12\x03&\x0b\x11\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03&\x12\x1b\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03&\x1e\x1f\nA\n\
    \x04\x04\0\x02\x04\x12\x03)\x02\x1e\x1a4\x20Whether\x20full\x20feature\
    \x20names\x20are\x20used\x20in\x20stored\x20data\n\n\x0c\n\x05\x04\0\x02\
    \x04\x05\x12\x03)\x02\x06\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03)\x07\x19\
    \n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03)\x1c\x1d\n\x0b\n\x04\x04\0\x02\
    \x05\x12\x03+\x02\"\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03+\x02\x15\n\x0c\
    \n\x05\x04\0\x02\x05\x01\x12\x03+\x16\x1d\n\x0c\n\x05\x04\0\x02\x05\x03\
    \x12\x03+\x20!\nT\n\x04\x04\0\x02\x06\x12\x03.\x02\"\x1aG\x20Optional\
    \x20and\x20only\x20populated\x20if\x20generated\x20from\x20a\x20feature\
    \x20service\x20fetch\n\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03.\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x06\x01\x12\x03.\t\x1d\n\x0c\n\x05\x04\0\x02\x06\
    \x03\x12\x03.\x20!\n$\n\x04\x04\0\x02\x07\x12\x031\x02\x1f\x1a\x17\x20Us\
    er\x20defined\x20metadata\n\n\x0c\n\x05\x04\0\x02\x07\x06\x12\x031\x02\
    \x15\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x031\x16\x1a\n\x0c\n\x05\x04\0\
    \x02\x07\x03\x12\x031\x1d\x1e\n\n\n\x02\x04\x01\x12\x044\0?\x01\n\n\n\
    \x03\x04\x01\x01\x12\x034\x08\x1b\n\x0c\n\x04\x04\x01\x08\0\x12\x045\x02\
    >\x03\n\x0c\n\x05\x04\x01\x08\0\x01\x12\x035\x08\x0c\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x036\x04,\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x036\x04\x1a\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x036\x1b'\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x036*+\n\x0b\n\x04\x04\x01\x02\x01\x12\x037\x044\n\x0c\n\x05\x04\
    \x01\x02\x01\x06\x12\x037\x04\x1e\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\
    \x037\x1f/\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03723\n\x0b\n\x04\x04\
    \x01\x02\x02\x12\x038\x044\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x038\x04\
    \x1e\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x038\x1f/\n\x0c\n\x05\x04\x01\
    \x02\x02\x03\x12\x03823\n\x0b\n\x04\x04\x01\x02\x03\x12\x039\x046\n\x0c\
    \n\x05\x04\x01\x02\x03\x06\x12\x039\x04\x1f\n\x0c\n\x05\x04\x01\x02\x03\
    \x01\x12\x039\x201\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03945\n\x0b\n\
    \x04\x04\x01\x02\x04\x12\x03:\x04.\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\
    \x03:\x04\x1b\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03:\x1c)\n\x0c\n\x05\
    \x04\x01\x02\x04\x03\x12\x03:,-\n\x0b\n\x04\x04\x01\x02\x05\x12\x03;\x04\
    .\n\x0c\n\x05\x04\x01\x02\x05\x06\x12\x03;\x04\x1b\n\x0c\n\x05\x04\x01\
    \x02\x05\x01\x12\x03;\x1c)\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03;,-\n\
    \x0b\n\x04\x04\x01\x02\x06\x12\x03<\x047\n\x0c\n\x05\x04\x01\x02\x06\x06\
    \x12\x03<\x04\"\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03<#1\n\x0c\n\x05\
    \x04\x01\x02\x06\x03\x12\x03<46\n\x0b\n\x04\x04\x01\x02\x07\x12\x03=\x04\
    1\n\x0c\n\x05\x04\x01\x02\x07\x06\x12\x03=\x04\x1c\n\x0c\n\x05\x04\x01\
    \x02\x07\x01\x12\x03=\x1d+\n\x0c\n\x05\x04\x01\x02\x07\x03\x12\x03=.0\n\
    \n\n\x02\x04\x02\x12\x04A\0M\x01\n\n\n\x03\x04\x02\x01\x12\x03A\x08\x18\
    \n6\n\x04\x04\x02\x02\0\x12\x03C\x022\x1a)\x20Time\x20when\x20this\x20sa\
    ved\x20dataset\x20is\x20created\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03C\
    \x02\x1b\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03C\x1c-\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03C01\n;\n\x04\x04\x02\x02\x01\x12\x03F\x027\x1a.\x20Tim\
    e\x20when\x20this\x20saved\x20dataset\x20is\x20last\x20updated\n\n\x0c\n\
    \x05\x04\x02\x02\x01\x06\x12\x03F\x02\x1b\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03F\x1c2\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03F56\nB\n\x04\
    \x04\x02\x02\x02\x12\x03I\x024\x1a5\x20Min\x20timestamp\x20in\x20the\x20\
    dataset\x20(needed\x20for\x20retrieval)\n\n\x0c\n\x05\x04\x02\x02\x02\
    \x06\x12\x03I\x02\x1b\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03I\x1c/\n\
    \x0c\n\x05\x04\x02\x02\x02\x03\x12\x03I23\nB\n\x04\x04\x02\x02\x03\x12\
    \x03L\x024\x1a5\x20Max\x20timestamp\x20in\x20the\x20dataset\x20(needed\
    \x20for\x20retrieval)\n\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03L\x02\x1b\
    \n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03L\x1c/\n\x0c\n\x05\x04\x02\x02\
    \x03\x03\x12\x03L23\n\n\n\x02\x04\x03\x12\x04O\0R\x01\n\n\n\x03\x04\x03\
    \x01\x12\x03O\x08\x14\n\x0b\n\x04\x04\x03\x02\0\x12\x03P\x02\x1c\n\x0c\n\
    \x05\x04\x03\x02\0\x06\x12\x03P\x02\x12\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03P\x13\x17\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03P\x1a\x1b\n\x0b\n\
    \x04\x04\x03\x02\x01\x12\x03Q\x02\x1c\n\x0c\n\x05\x04\x03\x02\x01\x06\
    \x12\x03Q\x02\x12\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03Q\x13\x17\n\x0c\
    \n\x05\x04\x03\x02\x01\x03\x12\x03Q\x1a\x1bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::DataSource::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(SavedDatasetSpec::generated_message_descriptor_data());
            messages.push(SavedDatasetStorage::generated_message_descriptor_data());
            messages.push(SavedDatasetMeta::generated_message_descriptor_data());
            messages.push(SavedDataset::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
