// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `feast/core/FeatureViewProjection.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  A projection to be applied on top of a FeatureView. 
///  Contains the modifications to a FeatureView such as the features subset to use.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.FeatureViewProjection)
pub struct FeatureViewProjection {
    // message fields
    ///  The feature view name
    // @@protoc_insertion_point(field:feast.core.FeatureViewProjection.feature_view_name)
    pub feature_view_name: ::std::string::String,
    ///  Alias for feature view name
    // @@protoc_insertion_point(field:feast.core.FeatureViewProjection.feature_view_name_alias)
    pub feature_view_name_alias: ::std::string::String,
    ///  The features of the feature view that are a part of the feature reference.
    // @@protoc_insertion_point(field:feast.core.FeatureViewProjection.feature_columns)
    pub feature_columns: ::std::vec::Vec<super::Feature::FeatureSpecV2>,
    ///  Map for entity join_key overrides of feature data entity join_key to entity data join_key
    // @@protoc_insertion_point(field:feast.core.FeatureViewProjection.join_key_map)
    pub join_key_map: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.FeatureViewProjection.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FeatureViewProjection {
    fn default() -> &'a FeatureViewProjection {
        <FeatureViewProjection as ::protobuf::Message>::default_instance()
    }
}

impl FeatureViewProjection {
    pub fn new() -> FeatureViewProjection {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "feature_view_name",
            |m: &FeatureViewProjection| { &m.feature_view_name },
            |m: &mut FeatureViewProjection| { &mut m.feature_view_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "feature_view_name_alias",
            |m: &FeatureViewProjection| { &m.feature_view_name_alias },
            |m: &mut FeatureViewProjection| { &mut m.feature_view_name_alias },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "feature_columns",
            |m: &FeatureViewProjection| { &m.feature_columns },
            |m: &mut FeatureViewProjection| { &mut m.feature_columns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "join_key_map",
            |m: &FeatureViewProjection| { &m.join_key_map },
            |m: &mut FeatureViewProjection| { &mut m.join_key_map },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FeatureViewProjection>(
            "FeatureViewProjection",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FeatureViewProjection {
    const NAME: &'static str = "FeatureViewProjection";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.feature_view_name = is.read_string()?;
                },
                26 => {
                    self.feature_view_name_alias = is.read_string()?;
                },
                18 => {
                    self.feature_columns.push(is.read_message()?);
                },
                34 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.join_key_map.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.feature_view_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.feature_view_name);
        }
        if !self.feature_view_name_alias.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.feature_view_name_alias);
        }
        for value in &self.feature_columns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.join_key_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.feature_view_name.is_empty() {
            os.write_string(1, &self.feature_view_name)?;
        }
        if !self.feature_view_name_alias.is_empty() {
            os.write_string(3, &self.feature_view_name_alias)?;
        }
        for v in &self.feature_columns {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for (k, v) in &self.join_key_map {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(34)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FeatureViewProjection {
        FeatureViewProjection::new()
    }

    fn clear(&mut self) {
        self.feature_view_name.clear();
        self.feature_view_name_alias.clear();
        self.feature_columns.clear();
        self.join_key_map.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FeatureViewProjection {
        static instance: ::protobuf::rt::Lazy<FeatureViewProjection> = ::protobuf::rt::Lazy::new();
        instance.get(FeatureViewProjection::new)
    }
}

impl ::protobuf::MessageFull for FeatureViewProjection {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FeatureViewProjection").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FeatureViewProjection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeatureViewProjection {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&feast/core/FeatureViewProjection.proto\x12\nfeast.core\x1a\x18feast/c\
    ore/Feature.proto\"\xd2\x02\n\x15FeatureViewProjection\x12*\n\x11feature\
    _view_name\x18\x01\x20\x01(\tR\x0ffeatureViewName\x125\n\x17feature_view\
    _name_alias\x18\x03\x20\x01(\tR\x14featureViewNameAlias\x12B\n\x0ffeatur\
    e_columns\x18\x02\x20\x03(\x0b2\x19.feast.core.FeatureSpecV2R\x0efeature\
    Columns\x12S\n\x0cjoin_key_map\x18\x04\x20\x03(\x0b21.feast.core.Feature\
    ViewProjection.JoinKeyMapEntryR\njoinKeyMap\x1a=\n\x0fJoinKeyMapEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\
    \x20\x01(\tR\x05value:\x028\x01BZ\n\x10feast.proto.coreB\x15FeatureRefer\
    enceProtoZ/github.com/feast-dev/feast/go/protos/feast/coreJ\xd6\x05\n\
    \x06\x12\x04\0\0\x18\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x01\0\x13\n\x08\n\x01\x08\x12\x03\x03\0F\n\t\n\x02\x08\x0b\x12\
    \x03\x03\0F\n\x08\n\x01\x08\x12\x03\x04\06\n\t\n\x02\x08\x08\x12\x03\x04\
    \06\n\x08\n\x01\x08\x12\x03\x05\0)\n\t\n\x02\x08\x01\x12\x03\x05\0)\n\t\
    \n\x02\x03\0\x12\x03\x07\0\"\n\x94\x01\n\x02\x04\0\x12\x04\x0c\0\x18\x01\
    \x1a\x87\x01\x20A\x20projection\x20to\x20be\x20applied\x20on\x20top\x20o\
    f\x20a\x20FeatureView.\x20\n\x20Contains\x20the\x20modifications\x20to\
    \x20a\x20FeatureView\x20such\x20as\x20the\x20features\x20subset\x20to\
    \x20use.\n\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\x1d\n$\n\x04\x04\0\x02\0\
    \x12\x03\x0e\x02\x1f\x1a\x17\x20The\x20feature\x20view\x20name\n\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x0e\t\x1a\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0e\x1d\x1e\n*\n\x04\
    \x04\0\x02\x01\x12\x03\x11\x02%\x1a\x1d\x20Alias\x20for\x20feature\x20vi\
    ew\x20name\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x11\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x11\t\x20\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x11#$\nY\n\x04\x04\0\x02\x02\x12\x03\x14\x02-\x1aL\x20The\x20fe\
    atures\x20of\x20the\x20feature\x20view\x20that\x20are\x20a\x20part\x20of\
    \x20the\x20feature\x20reference.\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\
    \x14\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x14\x0b\x18\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\x14\x19(\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\x14+,\nh\n\x04\x04\0\x02\x03\x12\x03\x17\x02&\x1a[\x20Map\x20for\
    \x20entity\x20join_key\x20overrides\x20of\x20feature\x20data\x20entity\
    \x20join_key\x20to\x20entity\x20data\x20join_key\n\n\x0c\n\x05\x04\0\x02\
    \x03\x06\x12\x03\x17\x02\x14\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x17\
    \x15!\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x17$%b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::Feature::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FeatureViewProjection::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
