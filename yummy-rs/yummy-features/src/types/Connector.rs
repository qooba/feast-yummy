// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `feast/serving/Connector.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.connector.ConnectorFeature)
pub struct ConnectorFeature {
    // message fields
    // @@protoc_insertion_point(field:grpc.connector.ConnectorFeature.reference)
    pub reference: ::protobuf::MessageField<super::ServingService::FeatureReferenceV2>,
    // @@protoc_insertion_point(field:grpc.connector.ConnectorFeature.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:grpc.connector.ConnectorFeature.value)
    pub value: ::protobuf::MessageField<super::Value::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.connector.ConnectorFeature.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConnectorFeature {
    fn default() -> &'a ConnectorFeature {
        <ConnectorFeature as ::protobuf::Message>::default_instance()
    }
}

impl ConnectorFeature {
    pub fn new() -> ConnectorFeature {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::ServingService::FeatureReferenceV2>(
            "reference",
            |m: &ConnectorFeature| { &m.reference },
            |m: &mut ConnectorFeature| { &mut m.reference },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &ConnectorFeature| { &m.timestamp },
            |m: &mut ConnectorFeature| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Value::Value>(
            "value",
            |m: &ConnectorFeature| { &m.value },
            |m: &mut ConnectorFeature| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConnectorFeature>(
            "ConnectorFeature",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConnectorFeature {
    const NAME: &'static str = "ConnectorFeature";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.reference)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.value)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.reference.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.reference.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConnectorFeature {
        ConnectorFeature::new()
    }

    fn clear(&mut self) {
        self.reference.clear();
        self.timestamp.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConnectorFeature {
        static instance: ConnectorFeature = ConnectorFeature {
            reference: ::protobuf::MessageField::none(),
            timestamp: ::protobuf::MessageField::none(),
            value: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConnectorFeature {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConnectorFeature").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConnectorFeature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectorFeature {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.connector.ConnectorFeatureList)
pub struct ConnectorFeatureList {
    // message fields
    // @@protoc_insertion_point(field:grpc.connector.ConnectorFeatureList.featureList)
    pub featureList: ::std::vec::Vec<ConnectorFeature>,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.connector.ConnectorFeatureList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConnectorFeatureList {
    fn default() -> &'a ConnectorFeatureList {
        <ConnectorFeatureList as ::protobuf::Message>::default_instance()
    }
}

impl ConnectorFeatureList {
    pub fn new() -> ConnectorFeatureList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "featureList",
            |m: &ConnectorFeatureList| { &m.featureList },
            |m: &mut ConnectorFeatureList| { &mut m.featureList },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConnectorFeatureList>(
            "ConnectorFeatureList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConnectorFeatureList {
    const NAME: &'static str = "ConnectorFeatureList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.featureList.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.featureList {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.featureList {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConnectorFeatureList {
        ConnectorFeatureList::new()
    }

    fn clear(&mut self) {
        self.featureList.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConnectorFeatureList {
        static instance: ConnectorFeatureList = ConnectorFeatureList {
            featureList: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConnectorFeatureList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConnectorFeatureList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConnectorFeatureList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectorFeatureList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.connector.OnlineReadRequest)
pub struct OnlineReadRequest {
    // message fields
    // @@protoc_insertion_point(field:grpc.connector.OnlineReadRequest.entityKeys)
    pub entityKeys: ::std::vec::Vec<super::EntityKey::EntityKey>,
    // @@protoc_insertion_point(field:grpc.connector.OnlineReadRequest.view)
    pub view: ::std::string::String,
    // @@protoc_insertion_point(field:grpc.connector.OnlineReadRequest.features)
    pub features: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.connector.OnlineReadRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OnlineReadRequest {
    fn default() -> &'a OnlineReadRequest {
        <OnlineReadRequest as ::protobuf::Message>::default_instance()
    }
}

impl OnlineReadRequest {
    pub fn new() -> OnlineReadRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entityKeys",
            |m: &OnlineReadRequest| { &m.entityKeys },
            |m: &mut OnlineReadRequest| { &mut m.entityKeys },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "view",
            |m: &OnlineReadRequest| { &m.view },
            |m: &mut OnlineReadRequest| { &mut m.view },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "features",
            |m: &OnlineReadRequest| { &m.features },
            |m: &mut OnlineReadRequest| { &mut m.features },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OnlineReadRequest>(
            "OnlineReadRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OnlineReadRequest {
    const NAME: &'static str = "OnlineReadRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entityKeys.push(is.read_message()?);
                },
                18 => {
                    self.view = is.read_string()?;
                },
                26 => {
                    self.features.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entityKeys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.view.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.view);
        }
        for value in &self.features {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.entityKeys {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if !self.view.is_empty() {
            os.write_string(2, &self.view)?;
        }
        for v in &self.features {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OnlineReadRequest {
        OnlineReadRequest::new()
    }

    fn clear(&mut self) {
        self.entityKeys.clear();
        self.view.clear();
        self.features.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OnlineReadRequest {
        static instance: OnlineReadRequest = OnlineReadRequest {
            entityKeys: ::std::vec::Vec::new(),
            view: ::std::string::String::new(),
            features: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OnlineReadRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OnlineReadRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OnlineReadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OnlineReadRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.connector.OnlineReadResponse)
pub struct OnlineReadResponse {
    // message fields
    // @@protoc_insertion_point(field:grpc.connector.OnlineReadResponse.results)
    pub results: ::std::vec::Vec<ConnectorFeatureList>,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.connector.OnlineReadResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OnlineReadResponse {
    fn default() -> &'a OnlineReadResponse {
        <OnlineReadResponse as ::protobuf::Message>::default_instance()
    }
}

impl OnlineReadResponse {
    pub fn new() -> OnlineReadResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "results",
            |m: &OnlineReadResponse| { &m.results },
            |m: &mut OnlineReadResponse| { &mut m.results },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OnlineReadResponse>(
            "OnlineReadResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OnlineReadResponse {
    const NAME: &'static str = "OnlineReadResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.results.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.results {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OnlineReadResponse {
        OnlineReadResponse::new()
    }

    fn clear(&mut self) {
        self.results.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OnlineReadResponse {
        static instance: OnlineReadResponse = OnlineReadResponse {
            results: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OnlineReadResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OnlineReadResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OnlineReadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OnlineReadResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dfeast/serving/Connector.proto\x12\x0egrpc.connector\x1a\x1fgoogle/\
    protobuf/timestamp.proto\x1a\x17feast/types/Value.proto\x1a\x1bfeast/typ\
    es/EntityKey.proto\x1a\"feast/serving/ServingService.proto\"\xb7\x01\n\
    \x10ConnectorFeature\x12?\n\treference\x18\x01\x20\x01(\x0b2!.feast.serv\
    ing.FeatureReferenceV2R\treference\x128\n\ttimestamp\x18\x02\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\ttimestamp\x12(\n\x05value\x18\x03\
    \x20\x01(\x0b2\x12.feast.types.ValueR\x05value\"Z\n\x14ConnectorFeatureL\
    ist\x12B\n\x0bfeatureList\x18\x01\x20\x03(\x0b2\x20.grpc.connector.Conne\
    ctorFeatureR\x0bfeatureList\"{\n\x11OnlineReadRequest\x126\n\nentityKeys\
    \x18\x01\x20\x03(\x0b2\x16.feast.types.EntityKeyR\nentityKeys\x12\x12\n\
    \x04view\x18\x02\x20\x01(\tR\x04view\x12\x1a\n\x08features\x18\x03\x20\
    \x03(\tR\x08features\"T\n\x12OnlineReadResponse\x12>\n\x07results\x18\
    \x01\x20\x03(\x0b2$.grpc.connector.ConnectorFeatureListR\x07results2b\n\
    \x0bOnlineStore\x12S\n\nOnlineRead\x12!.grpc.connector.OnlineReadRequest\
    \x1a\".grpc.connector.OnlineReadResponseB4Z2github.com/feast-dev/feast/g\
    o/protos/feast/servingJ\xfc\x05\n\x06\x12\x04\0\0!\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x17\n\t\n\x02\x03\0\x12\
    \x03\x04\0)\n\t\n\x02\x03\x01\x12\x03\x05\0!\n\t\n\x02\x03\x02\x12\x03\
    \x06\0%\n\t\n\x02\x03\x03\x12\x03\x07\0,\n\x08\n\x01\x08\x12\x03\t\0I\n\
    \t\n\x02\x08\x0b\x12\x03\t\0I\n\n\n\x02\x04\0\x12\x04\x0b\0\x0f\x01\n\n\
    \n\x03\x04\0\x01\x12\x03\x0b\x08\x18\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0c\
    \x087\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0c\x08(\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03\x0c)2\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c56\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03\r\x080\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\
    \r\x08!\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\r\"+\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\r./\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0e\x08$\n\x0c\n\
    \x05\x04\0\x02\x02\x06\x12\x03\x0e\x08\x19\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x0e\x1a\x1f\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0e\"#\n\n\n\
    \x02\x04\x01\x12\x04\x11\0\x13\x01\n\n\n\x03\x04\x01\x01\x12\x03\x11\x08\
    \x1c\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x12\x083\n\x0c\n\x05\x04\x01\x02\
    \0\x04\x12\x03\x12\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x12\x11\
    !\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x12#.\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\x1212\n\n\n\x02\x06\0\x12\x04\x15\0\x17\x01\n\n\n\x03\x06\0\
    \x01\x12\x03\x15\x08\x13\n\x0b\n\x04\x06\0\x02\0\x12\x03\x16\x04C\n\x0c\
    \n\x05\x06\0\x02\0\x01\x12\x03\x16\x08\x12\n\x0c\n\x05\x06\0\x02\0\x02\
    \x12\x03\x16\x13$\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x16/A\n\n\n\x02\
    \x04\x02\x12\x04\x19\0\x1d\x01\n\n\n\x03\x04\x02\x01\x12\x03\x19\x08\x19\
    \n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1a\x042\n\x0c\n\x05\x04\x02\x02\0\
    \x04\x12\x03\x1a\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x1a\r\"\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1a#-\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x1a01\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x1b\x04\x14\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03\x1b\x04\n\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03\x1b\x0b\x0f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x1b\x12\
    \x13\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x1c\x04!\n\x0c\n\x05\x04\x02\
    \x02\x02\x04\x12\x03\x1c\x04\x0c\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\
    \x1c\r\x13\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x1c\x14\x1c\n\x0c\n\
    \x05\x04\x02\x02\x02\x03\x12\x03\x1c\x1f\x20\n\n\n\x02\x04\x03\x12\x04\
    \x1f\0!\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1f\x08\x1a\n\x0b\n\x04\x04\
    \x03\x02\0\x12\x03\x20\x04.\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03\x20\
    \x04\x0c\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x20\r!\n\x0c\n\x05\x04\
    \x03\x02\0\x01\x12\x03\x20\")\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x20,\
    -b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::Value::file_descriptor().clone());
            deps.push(super::EntityKey::file_descriptor().clone());
            deps.push(super::ServingService::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(ConnectorFeature::generated_message_descriptor_data());
            messages.push(ConnectorFeatureList::generated_message_descriptor_data());
            messages.push(OnlineReadRequest::generated_message_descriptor_data());
            messages.push(OnlineReadResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
