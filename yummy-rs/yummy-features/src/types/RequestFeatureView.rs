// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `feast/core/RequestFeatureView.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.RequestFeatureView)
pub struct RequestFeatureView {
    // message fields
    ///  User-specified specifications of this feature view.
    // @@protoc_insertion_point(field:feast.core.RequestFeatureView.spec)
    pub spec: ::protobuf::MessageField<RequestFeatureViewSpec>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.RequestFeatureView.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RequestFeatureView {
    fn default() -> &'a RequestFeatureView {
        <RequestFeatureView as ::protobuf::Message>::default_instance()
    }
}

impl RequestFeatureView {
    pub fn new() -> RequestFeatureView {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, RequestFeatureViewSpec>(
            "spec",
            |m: &RequestFeatureView| { &m.spec },
            |m: &mut RequestFeatureView| { &mut m.spec },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RequestFeatureView>(
            "RequestFeatureView",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RequestFeatureView {
    const NAME: &'static str = "RequestFeatureView";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RequestFeatureView {
        RequestFeatureView::new()
    }

    fn clear(&mut self) {
        self.spec.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RequestFeatureView {
        static instance: RequestFeatureView = RequestFeatureView {
            spec: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RequestFeatureView {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RequestFeatureView").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RequestFeatureView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestFeatureView {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Next available id: 7
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.RequestFeatureViewSpec)
pub struct RequestFeatureViewSpec {
    // message fields
    ///  Name of the feature view. Must be unique. Not updated.
    // @@protoc_insertion_point(field:feast.core.RequestFeatureViewSpec.name)
    pub name: ::std::string::String,
    ///  Name of Feast project that this feature view belongs to.
    // @@protoc_insertion_point(field:feast.core.RequestFeatureViewSpec.project)
    pub project: ::std::string::String,
    ///  Request data which contains the underlying data schema and list of associated features
    // @@protoc_insertion_point(field:feast.core.RequestFeatureViewSpec.request_data_source)
    pub request_data_source: ::protobuf::MessageField<super::DataSource::DataSource>,
    ///  Description of the request feature view.
    // @@protoc_insertion_point(field:feast.core.RequestFeatureViewSpec.description)
    pub description: ::std::string::String,
    ///  User defined metadata.
    // @@protoc_insertion_point(field:feast.core.RequestFeatureViewSpec.tags)
    pub tags: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    ///  Owner of the request feature view.
    // @@protoc_insertion_point(field:feast.core.RequestFeatureViewSpec.owner)
    pub owner: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.RequestFeatureViewSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RequestFeatureViewSpec {
    fn default() -> &'a RequestFeatureViewSpec {
        <RequestFeatureViewSpec as ::protobuf::Message>::default_instance()
    }
}

impl RequestFeatureViewSpec {
    pub fn new() -> RequestFeatureViewSpec {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &RequestFeatureViewSpec| { &m.name },
            |m: &mut RequestFeatureViewSpec| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "project",
            |m: &RequestFeatureViewSpec| { &m.project },
            |m: &mut RequestFeatureViewSpec| { &mut m.project },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DataSource::DataSource>(
            "request_data_source",
            |m: &RequestFeatureViewSpec| { &m.request_data_source },
            |m: &mut RequestFeatureViewSpec| { &mut m.request_data_source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &RequestFeatureViewSpec| { &m.description },
            |m: &mut RequestFeatureViewSpec| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "tags",
            |m: &RequestFeatureViewSpec| { &m.tags },
            |m: &mut RequestFeatureViewSpec| { &mut m.tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner",
            |m: &RequestFeatureViewSpec| { &m.owner },
            |m: &mut RequestFeatureViewSpec| { &mut m.owner },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RequestFeatureViewSpec>(
            "RequestFeatureViewSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RequestFeatureViewSpec {
    const NAME: &'static str = "RequestFeatureViewSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.project = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.request_data_source)?;
                },
                34 => {
                    self.description = is.read_string()?;
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.tags.insert(key, value);
                },
                50 => {
                    self.owner = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.project.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.project);
        }
        if let Some(v) = self.request_data_source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.description);
        }
        for (k, v) in &self.tags {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if !self.owner.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.owner);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.project.is_empty() {
            os.write_string(2, &self.project)?;
        }
        if let Some(v) = self.request_data_source.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.description.is_empty() {
            os.write_string(4, &self.description)?;
        }
        for (k, v) in &self.tags {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if !self.owner.is_empty() {
            os.write_string(6, &self.owner)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RequestFeatureViewSpec {
        RequestFeatureViewSpec::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.project.clear();
        self.request_data_source.clear();
        self.description.clear();
        self.tags.clear();
        self.owner.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RequestFeatureViewSpec {
        static instance: ::protobuf::rt::Lazy<RequestFeatureViewSpec> = ::protobuf::rt::Lazy::new();
        instance.get(RequestFeatureViewSpec::new)
    }
}

impl ::protobuf::MessageFull for RequestFeatureViewSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RequestFeatureViewSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RequestFeatureViewSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestFeatureViewSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#feast/core/RequestFeatureView.proto\x12\nfeast.core\x1a\x1bfeast/core\
    /DataSource.proto\"L\n\x12RequestFeatureView\x126\n\x04spec\x18\x01\x20\
    \x01(\x0b2\".feast.core.RequestFeatureViewSpecR\x04spec\"\xc1\x02\n\x16R\
    equestFeatureViewSpec\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\
    \x18\n\x07project\x18\x02\x20\x01(\tR\x07project\x12F\n\x13request_data_\
    source\x18\x03\x20\x01(\x0b2\x16.feast.core.DataSourceR\x11requestDataSo\
    urce\x12\x20\n\x0bdescription\x18\x04\x20\x01(\tR\x0bdescription\x12@\n\
    \x04tags\x18\x05\x20\x03(\x0b2,.feast.core.RequestFeatureViewSpec.TagsEn\
    tryR\x04tags\x12\x14\n\x05owner\x18\x06\x20\x01(\tR\x05owner\x1a7\n\tTag\
    sEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\tR\x05value:\x028\x01B\\\n\x10feast.proto.coreB\x17Req\
    uestFeatureViewProtoZ/github.com/feast-dev/feast/go/protos/feast/coreJ\
    \xe1\x0b\n\x06\x12\x04\x11\02\x01\n\xc6\x04\n\x01\x0c\x12\x03\x11\0\x122\
    \xbb\x04\n\x20Copyright\x202021\x20The\x20Feast\x20Authors\n\n\x20Licens\
    ed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"\
    License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20i\
    n\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20\
    a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20https://w\
    ww.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20ap\
    plicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\
    \x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\n\x08\n\x01\x02\x12\x03\x12\0\x13\n\x08\n\x01\x08\x12\x03\x14\0F\n\
    \t\n\x02\x08\x0b\x12\x03\x14\0F\n\x08\n\x01\x08\x12\x03\x15\08\n\t\n\x02\
    \x08\x08\x12\x03\x15\08\n\x08\n\x01\x08\x12\x03\x16\0)\n\t\n\x02\x08\x01\
    \x12\x03\x16\0)\n\t\n\x02\x03\0\x12\x03\x18\0%\n\n\n\x02\x04\0\x12\x04\
    \x1a\0\x1d\x01\n\n\n\x03\x04\0\x01\x12\x03\x1a\x08\x1a\nB\n\x04\x04\0\
    \x02\0\x12\x03\x1c\x04$\x1a5\x20User-specified\x20specifications\x20of\
    \x20this\x20feature\x20view.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x1c\
    \x04\x1a\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1c\x1b\x1f\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x1c\"#\n\"\n\x02\x04\x01\x12\x04\x20\02\x01\x1a\x16\
    \x20Next\x20available\x20id:\x207\n\n\n\n\x03\x04\x01\x01\x12\x03\x20\
    \x08\x1e\nE\n\x04\x04\x01\x02\0\x12\x03\"\x04\x14\x1a8\x20Name\x20of\x20\
    the\x20feature\x20view.\x20Must\x20be\x20unique.\x20Not\x20updated.\n\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\"\x04\n\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\"\x0b\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\"\x12\x13\n\
    G\n\x04\x04\x01\x02\x01\x12\x03%\x04\x17\x1a:\x20Name\x20of\x20Feast\x20\
    project\x20that\x20this\x20feature\x20view\x20belongs\x20to.\n\n\x0c\n\
    \x05\x04\x01\x02\x01\x05\x12\x03%\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03%\x0b\x12\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03%\x15\x16\ne\n\
    \x04\x04\x01\x02\x02\x12\x03(\x04'\x1aX\x20Request\x20data\x20which\x20c\
    ontains\x20the\x20underlying\x20data\x20schema\x20and\x20list\x20of\x20a\
    ssociated\x20features\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03(\x04\x0e\
    \n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03(\x0f\"\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03(%&\n7\n\x04\x04\x01\x02\x03\x12\x03+\x04\x1b\x1a*\x20De\
    scription\x20of\x20the\x20request\x20feature\x20view.\n\n\x0c\n\x05\x04\
    \x01\x02\x03\x05\x12\x03+\x04\n\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03+\
    \x0b\x16\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03+\x19\x1a\n%\n\x04\x04\
    \x01\x02\x04\x12\x03.\x04\x20\x1a\x18\x20User\x20defined\x20metadata.\n\
    \n\x0c\n\x05\x04\x01\x02\x04\x06\x12\x03.\x04\x16\n\x0c\n\x05\x04\x01\
    \x02\x04\x01\x12\x03.\x17\x1b\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03.\
    \x1e\x1f\n1\n\x04\x04\x01\x02\x05\x12\x031\x04\x15\x1a$\x20Owner\x20of\
    \x20the\x20request\x20feature\x20view.\n\n\x0c\n\x05\x04\x01\x02\x05\x05\
    \x12\x031\x04\n\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x031\x0b\x10\n\x0c\n\
    \x05\x04\x01\x02\x05\x03\x12\x031\x13\x14b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::DataSource::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(RequestFeatureView::generated_message_descriptor_data());
            messages.push(RequestFeatureViewSpec::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
