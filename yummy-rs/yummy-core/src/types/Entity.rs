// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `feast/core/Entity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.Entity)
pub struct Entity {
    // message fields
    ///  User-specified specifications of this entity.
    // @@protoc_insertion_point(field:feast.core.Entity.spec)
    pub spec: ::protobuf::MessageField<EntitySpecV2>,
    ///  System-populated metadata for this entity.
    // @@protoc_insertion_point(field:feast.core.Entity.meta)
    pub meta: ::protobuf::MessageField<EntityMeta>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.Entity.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Entity {
    fn default() -> &'a Entity {
        <Entity as ::protobuf::Message>::default_instance()
    }
}

impl Entity {
    pub fn new() -> Entity {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EntitySpecV2>(
            "spec",
            |m: &Entity| { &m.spec },
            |m: &mut Entity| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EntityMeta>(
            "meta",
            |m: &Entity| { &m.meta },
            |m: &mut Entity| { &mut m.meta },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Entity>(
            "Entity",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Entity {
    const NAME: &'static str = "Entity";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.meta)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.meta.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Entity {
        Entity::new()
    }

    fn clear(&mut self) {
        self.spec.clear();
        self.meta.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Entity {
        static instance: Entity = Entity {
            spec: ::protobuf::MessageField::none(),
            meta: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Entity {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Entity").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Entity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Entity {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.EntitySpecV2)
pub struct EntitySpecV2 {
    // message fields
    ///  Name of the entity.
    // @@protoc_insertion_point(field:feast.core.EntitySpecV2.name)
    pub name: ::std::string::String,
    ///  Name of Feast project that this feature table belongs to.
    // @@protoc_insertion_point(field:feast.core.EntitySpecV2.project)
    pub project: ::std::string::String,
    ///  Type of the entity.
    // @@protoc_insertion_point(field:feast.core.EntitySpecV2.value_type)
    pub value_type: ::protobuf::EnumOrUnknown<super::Value::value_type::Enum>,
    ///  Description of the entity.
    // @@protoc_insertion_point(field:feast.core.EntitySpecV2.description)
    pub description: ::std::string::String,
    ///  Join key for the entity (i.e. name of the column the entity maps to).
    // @@protoc_insertion_point(field:feast.core.EntitySpecV2.join_key)
    pub join_key: ::std::string::String,
    ///  User defined metadata
    // @@protoc_insertion_point(field:feast.core.EntitySpecV2.tags)
    pub tags: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    ///  Owner of the entity.
    // @@protoc_insertion_point(field:feast.core.EntitySpecV2.owner)
    pub owner: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.EntitySpecV2.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EntitySpecV2 {
    fn default() -> &'a EntitySpecV2 {
        <EntitySpecV2 as ::protobuf::Message>::default_instance()
    }
}

impl EntitySpecV2 {
    pub fn new() -> EntitySpecV2 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &EntitySpecV2| { &m.name },
            |m: &mut EntitySpecV2| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "project",
            |m: &EntitySpecV2| { &m.project },
            |m: &mut EntitySpecV2| { &mut m.project },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value_type",
            |m: &EntitySpecV2| { &m.value_type },
            |m: &mut EntitySpecV2| { &mut m.value_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &EntitySpecV2| { &m.description },
            |m: &mut EntitySpecV2| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "join_key",
            |m: &EntitySpecV2| { &m.join_key },
            |m: &mut EntitySpecV2| { &mut m.join_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "tags",
            |m: &EntitySpecV2| { &m.tags },
            |m: &mut EntitySpecV2| { &mut m.tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner",
            |m: &EntitySpecV2| { &m.owner },
            |m: &mut EntitySpecV2| { &mut m.owner },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EntitySpecV2>(
            "EntitySpecV2",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EntitySpecV2 {
    const NAME: &'static str = "EntitySpecV2";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                74 => {
                    self.project = is.read_string()?;
                },
                16 => {
                    self.value_type = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.description = is.read_string()?;
                },
                34 => {
                    self.join_key = is.read_string()?;
                },
                66 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.tags.insert(key, value);
                },
                82 => {
                    self.owner = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.project.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.project);
        }
        if self.value_type != ::protobuf::EnumOrUnknown::new(super::Value::value_type::Enum::INVALID) {
            my_size += ::protobuf::rt::int32_size(2, self.value_type.value());
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if !self.join_key.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.join_key);
        }
        for (k, v) in &self.tags {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if !self.owner.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.owner);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.project.is_empty() {
            os.write_string(9, &self.project)?;
        }
        if self.value_type != ::protobuf::EnumOrUnknown::new(super::Value::value_type::Enum::INVALID) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.value_type))?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if !self.join_key.is_empty() {
            os.write_string(4, &self.join_key)?;
        }
        for (k, v) in &self.tags {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(66)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if !self.owner.is_empty() {
            os.write_string(10, &self.owner)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EntitySpecV2 {
        EntitySpecV2::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.project.clear();
        self.value_type = ::protobuf::EnumOrUnknown::new(super::Value::value_type::Enum::INVALID);
        self.description.clear();
        self.join_key.clear();
        self.tags.clear();
        self.owner.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EntitySpecV2 {
        static instance: ::protobuf::rt::Lazy<EntitySpecV2> = ::protobuf::rt::Lazy::new();
        instance.get(EntitySpecV2::new)
    }
}

impl ::protobuf::MessageFull for EntitySpecV2 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EntitySpecV2").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EntitySpecV2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntitySpecV2 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.EntityMeta)
pub struct EntityMeta {
    // message fields
    // @@protoc_insertion_point(field:feast.core.EntityMeta.created_timestamp)
    pub created_timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:feast.core.EntityMeta.last_updated_timestamp)
    pub last_updated_timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.EntityMeta.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EntityMeta {
    fn default() -> &'a EntityMeta {
        <EntityMeta as ::protobuf::Message>::default_instance()
    }
}

impl EntityMeta {
    pub fn new() -> EntityMeta {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "created_timestamp",
            |m: &EntityMeta| { &m.created_timestamp },
            |m: &mut EntityMeta| { &mut m.created_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "last_updated_timestamp",
            |m: &EntityMeta| { &m.last_updated_timestamp },
            |m: &mut EntityMeta| { &mut m.last_updated_timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EntityMeta>(
            "EntityMeta",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EntityMeta {
    const NAME: &'static str = "EntityMeta";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.created_timestamp)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_updated_timestamp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.created_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.last_updated_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.created_timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.last_updated_timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EntityMeta {
        EntityMeta::new()
    }

    fn clear(&mut self) {
        self.created_timestamp.clear();
        self.last_updated_timestamp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EntityMeta {
        static instance: EntityMeta = EntityMeta {
            created_timestamp: ::protobuf::MessageField::none(),
            last_updated_timestamp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EntityMeta {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EntityMeta").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EntityMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityMeta {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17feast/core/Entity.proto\x12\nfeast.core\x1a\x17feast/types/Value.p\
    roto\x1a\x1fgoogle/protobuf/timestamp.proto\"b\n\x06Entity\x12,\n\x04spe\
    c\x18\x01\x20\x01(\x0b2\x18.feast.core.EntitySpecV2R\x04spec\x12*\n\x04m\
    eta\x18\x02\x20\x01(\x0b2\x16.feast.core.EntityMetaR\x04meta\"\xbc\x02\n\
    \x0cEntitySpecV2\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x18\n\
    \x07project\x18\t\x20\x01(\tR\x07project\x12:\n\nvalue_type\x18\x02\x20\
    \x01(\x0e2\x1b.feast.types.ValueType.EnumR\tvalueType\x12\x20\n\x0bdescr\
    iption\x18\x03\x20\x01(\tR\x0bdescription\x12\x19\n\x08join_key\x18\x04\
    \x20\x01(\tR\x07joinKey\x126\n\x04tags\x18\x08\x20\x03(\x0b2\".feast.cor\
    e.EntitySpecV2.TagsEntryR\x04tags\x12\x14\n\x05owner\x18\n\x20\x01(\tR\
    \x05owner\x1a7\n\tTagsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xa7\x01\n\n\
    EntityMeta\x12G\n\x11created_timestamp\x18\x01\x20\x01(\x0b2\x1a.google.\
    protobuf.TimestampR\x10createdTimestamp\x12P\n\x16last_updated_timestamp\
    \x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x14lastUpdatedTime\
    stampBP\n\x10feast.proto.coreB\x0bEntityProtoZ/github.com/feast-dev/feas\
    t/go/protos/feast/coreJ\xd1\r\n\x06\x12\x04\x10\0;\x01\n\xe0\x04\n\x01\
    \x0c\x12\x03\x10\0\x122\xd5\x04\n\x20*\x20Copyright\x202020\x20The\x20Fe\
    ast\x20Authors\n\x20*\n\x20*\x20Licensed\x20under\x20the\x20Apache\x20Li\
    cense,\x20Version\x202.0\x20(the\x20\"License\");\n\x20*\x20you\x20may\
    \x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20\
    the\x20License.\n\x20*\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\
    \x20License\x20at\n\x20*\n\x20*\x20\x20\x20\x20\x20https://www.apache.or\
    g/licenses/LICENSE-2.0\n\x20*\n\x20*\x20Unless\x20required\x20by\x20appl\
    icable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20*\
    \x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20*\x20WITHOUT\x20WARRANTIES\x20OR\
    \x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20impli\
    ed.\n\x20*\x20See\x20the\x20License\x20for\x20the\x20specific\x20languag\
    e\x20governing\x20permissions\x20and\n\x20*\x20limitations\x20under\x20t\
    he\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x12\0\x13\n\x08\n\x01\x08\x12\
    \x03\x13\0)\n\t\n\x02\x08\x01\x12\x03\x13\0)\n\x08\n\x01\x08\x12\x03\x14\
    \0,\n\t\n\x02\x08\x08\x12\x03\x14\0,\n\x08\n\x01\x08\x12\x03\x15\0F\n\t\
    \n\x02\x08\x0b\x12\x03\x15\0F\n\t\n\x02\x03\0\x12\x03\x17\0!\n\t\n\x02\
    \x03\x01\x12\x03\x18\0)\n\n\n\x02\x04\0\x12\x04\x1a\0\x1f\x01\n\n\n\x03\
    \x04\0\x01\x12\x03\x1a\x08\x0e\n<\n\x04\x04\0\x02\0\x12\x03\x1c\x04\x1a\
    \x1a/\x20User-specified\x20specifications\x20of\x20this\x20entity.\n\n\
    \x0c\n\x05\x04\0\x02\0\x06\x12\x03\x1c\x04\x10\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x1c\x11\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1c\x18\x19\
    \n9\n\x04\x04\0\x02\x01\x12\x03\x1e\x04\x18\x1a,\x20System-populated\x20\
    metadata\x20for\x20this\x20entity.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\
    \x03\x1e\x04\x0e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1e\x0f\x13\n\x0c\
    \n\x05\x04\0\x02\x01\x03\x12\x03\x1e\x16\x17\n\n\n\x02\x04\x01\x12\x04!\
    \06\x01\n\n\n\x03\x04\x01\x01\x12\x03!\x08\x14\n\"\n\x04\x04\x01\x02\0\
    \x12\x03#\x04\x14\x1a\x15\x20Name\x20of\x20the\x20entity.\n\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03#\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03#\
    \x0b\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03#\x12\x13\nH\n\x04\x04\x01\
    \x02\x01\x12\x03&\x04\x17\x1a;\x20Name\x20of\x20Feast\x20project\x20that\
    \x20this\x20feature\x20table\x20belongs\x20to.\n\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03&\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03&\x0b\x12\
    \n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03&\x15\x16\n\"\n\x04\x04\x01\x02\
    \x02\x12\x03)\x04.\x1a\x15\x20Type\x20of\x20the\x20entity.\n\n\x0c\n\x05\
    \x04\x01\x02\x02\x06\x12\x03)\x04\x1e\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03)\x1f)\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03),-\n)\n\x04\x04\
    \x01\x02\x03\x12\x03,\x04\x1b\x1a\x1c\x20Description\x20of\x20the\x20ent\
    ity.\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03,\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x03\x01\x12\x03,\x0b\x16\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\
    \x03,\x19\x1a\nT\n\x04\x04\x01\x02\x04\x12\x03/\x04\x18\x1aG\x20Join\x20\
    key\x20for\x20the\x20entity\x20(i.e.\x20name\x20of\x20the\x20column\x20t\
    he\x20entity\x20maps\x20to).\n\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03/\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03/\x0b\x13\n\x0c\n\x05\x04\
    \x01\x02\x04\x03\x12\x03/\x16\x17\n$\n\x04\x04\x01\x02\x05\x12\x032\x04\
    \x20\x1a\x17\x20User\x20defined\x20metadata\n\n\x0c\n\x05\x04\x01\x02\
    \x05\x06\x12\x032\x04\x16\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x032\x17\
    \x1b\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x032\x1e\x1f\n#\n\x04\x04\x01\
    \x02\x06\x12\x035\x04\x16\x1a\x16\x20Owner\x20of\x20the\x20entity.\n\n\
    \x0c\n\x05\x04\x01\x02\x06\x05\x12\x035\x04\n\n\x0c\n\x05\x04\x01\x02\
    \x06\x01\x12\x035\x0b\x10\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x035\x13\
    \x15\n\n\n\x02\x04\x02\x12\x048\0;\x01\n\n\n\x03\x04\x02\x01\x12\x038\
    \x08\x12\n\x0b\n\x04\x04\x02\x02\0\x12\x039\x044\n\x0c\n\x05\x04\x02\x02\
    \0\x06\x12\x039\x04\x1d\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x039\x1e/\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03923\n\x0b\n\x04\x04\x02\x02\x01\x12\
    \x03:\x049\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03:\x04\x1d\n\x0c\n\x05\
    \x04\x02\x02\x01\x01\x12\x03:\x1e4\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\
    \x03:78b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::Value::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Entity::generated_message_descriptor_data());
            messages.push(EntitySpecV2::generated_message_descriptor_data());
            messages.push(EntityMeta::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
