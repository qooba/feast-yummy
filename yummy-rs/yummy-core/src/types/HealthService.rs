// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `feast/third_party/grpc/health/v1/HealthService.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.health.v1.HealthCheckRequest)
pub struct HealthCheckRequest {
    // message fields
    // @@protoc_insertion_point(field:grpc.health.v1.HealthCheckRequest.service)
    pub service: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.health.v1.HealthCheckRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HealthCheckRequest {
    fn default() -> &'a HealthCheckRequest {
        <HealthCheckRequest as ::protobuf::Message>::default_instance()
    }
}

impl HealthCheckRequest {
    pub fn new() -> HealthCheckRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service",
            |m: &HealthCheckRequest| { &m.service },
            |m: &mut HealthCheckRequest| { &mut m.service },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HealthCheckRequest>(
            "HealthCheckRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HealthCheckRequest {
    const NAME: &'static str = "HealthCheckRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.service = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.service.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.service.is_empty() {
            os.write_string(1, &self.service)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HealthCheckRequest {
        HealthCheckRequest::new()
    }

    fn clear(&mut self) {
        self.service.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HealthCheckRequest {
        static instance: HealthCheckRequest = HealthCheckRequest {
            service: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HealthCheckRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HealthCheckRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HealthCheckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:grpc.health.v1.HealthCheckResponse)
pub struct HealthCheckResponse {
    // message fields
    // @@protoc_insertion_point(field:grpc.health.v1.HealthCheckResponse.status)
    pub status: ::protobuf::EnumOrUnknown<ServingStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:grpc.health.v1.HealthCheckResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HealthCheckResponse {
    fn default() -> &'a HealthCheckResponse {
        <HealthCheckResponse as ::protobuf::Message>::default_instance()
    }
}

impl HealthCheckResponse {
    pub fn new() -> HealthCheckResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &HealthCheckResponse| { &m.status },
            |m: &mut HealthCheckResponse| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HealthCheckResponse>(
            "HealthCheckResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HealthCheckResponse {
    const NAME: &'static str = "HealthCheckResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != ::protobuf::EnumOrUnknown::new(ServingStatus::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(1, self.status.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != ::protobuf::EnumOrUnknown::new(ServingStatus::UNKNOWN) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HealthCheckResponse {
        HealthCheckResponse::new()
    }

    fn clear(&mut self) {
        self.status = ::protobuf::EnumOrUnknown::new(ServingStatus::UNKNOWN);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HealthCheckResponse {
        static instance: HealthCheckResponse = HealthCheckResponse {
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HealthCheckResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HealthCheckResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HealthCheckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:grpc.health.v1.ServingStatus)
pub enum ServingStatus {
    // @@protoc_insertion_point(enum_value:grpc.health.v1.ServingStatus.UNKNOWN)
    UNKNOWN = 0,
    // @@protoc_insertion_point(enum_value:grpc.health.v1.ServingStatus.SERVING)
    SERVING = 1,
    // @@protoc_insertion_point(enum_value:grpc.health.v1.ServingStatus.NOT_SERVING)
    NOT_SERVING = 2,
}

impl ::protobuf::Enum for ServingStatus {
    const NAME: &'static str = "ServingStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ServingStatus> {
        match value {
            0 => ::std::option::Option::Some(ServingStatus::UNKNOWN),
            1 => ::std::option::Option::Some(ServingStatus::SERVING),
            2 => ::std::option::Option::Some(ServingStatus::NOT_SERVING),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ServingStatus] = &[
        ServingStatus::UNKNOWN,
        ServingStatus::SERVING,
        ServingStatus::NOT_SERVING,
    ];
}

impl ::protobuf::EnumFull for ServingStatus {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ServingStatus").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ServingStatus {
    fn default() -> Self {
        ServingStatus::UNKNOWN
    }
}

impl ServingStatus {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ServingStatus>("ServingStatus")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n4feast/third_party/grpc/health/v1/HealthService.proto\x12\x0egrpc.heal\
    th.v1\".\n\x12HealthCheckRequest\x12\x18\n\x07service\x18\x01\x20\x01(\t\
    R\x07service\"L\n\x13HealthCheckResponse\x125\n\x06status\x18\x01\x20\
    \x01(\x0e2\x1d.grpc.health.v1.ServingStatusR\x06status*:\n\rServingStatu\
    s\x12\x0b\n\x07UNKNOWN\x10\0\x12\x0b\n\x07SERVING\x10\x01\x12\x0f\n\x0bN\
    OT_SERVING\x10\x022Z\n\x06Health\x12P\n\x05Check\x12\".grpc.health.v1.He\
    althCheckRequest\x1a#.grpc.health.v1.HealthCheckResponseB\x20\n\x11io.gr\
    pc.health.v1B\x0bHealthProtoJ\xc6\x03\n\x06\x12\x04\0\0\x17\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x17\n\x08\n\x01\
    \x08\x12\x03\x04\0*\n\t\n\x02\x08\x01\x12\x03\x04\0*\n\x08\n\x01\x08\x12\
    \x03\x05\0,\n\t\n\x02\x08\x08\x12\x03\x05\0,\n\n\n\x02\x04\0\x12\x04\x07\
    \0\t\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\x1a\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x08\x02\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\x02\x08\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\t\x10\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x08\x13\x14\n\n\n\x02\x05\0\x12\x04\x0b\0\x0f\x01\n\n\n\x03\x05\
    \0\x01\x12\x03\x0b\x05\x12\n\x0b\n\x04\x05\0\x02\0\x12\x03\x0c\x02\x0e\n\
    \x0c\n\x05\x05\0\x02\0\x01\x12\x03\x0c\x02\t\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03\x0c\x0c\r\n\x0b\n\x04\x05\0\x02\x01\x12\x03\r\x02\x0e\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\r\x02\t\n\x0c\n\x05\x05\0\x02\x01\x02\x12\
    \x03\r\x0c\r\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x0e\x02\x12\n\x0c\n\x05\
    \x05\0\x02\x02\x01\x12\x03\x0e\x02\r\n\x0c\n\x05\x05\0\x02\x02\x02\x12\
    \x03\x0e\x10\x11\n\n\n\x02\x04\x01\x12\x04\x11\0\x13\x01\n\n\n\x03\x04\
    \x01\x01\x12\x03\x11\x08\x1b\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x12\x02\
    \x1b\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x12\x02\x0f\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x12\x10\x16\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x12\x19\x1a\n\n\n\x02\x06\0\x12\x04\x15\0\x17\x01\n\n\n\x03\x06\0\x01\
    \x12\x03\x15\x08\x0e\n\x0b\n\x04\x06\0\x02\0\x12\x03\x16\x02>\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03\x16\x06\x0b\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03\x16\x0c\x1e\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x16)<b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(HealthCheckRequest::generated_message_descriptor_data());
            messages.push(HealthCheckResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ServingStatus::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
