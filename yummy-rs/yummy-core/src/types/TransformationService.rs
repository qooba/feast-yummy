// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `feast/serving/TransformationService.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.serving.ValueType)
pub struct ValueType {
    // message oneof groups
    pub value: ::std::option::Option<value_type::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.serving.ValueType.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ValueType {
    fn default() -> &'a ValueType {
        <ValueType as ::protobuf::Message>::default_instance()
    }
}

impl ValueType {
    pub fn new() -> ValueType {
        ::std::default::Default::default()
    }

    // bytes arrow_value = 1;

    pub fn arrow_value(&self) -> &[u8] {
        match self.value {
            ::std::option::Option::Some(value_type::Value::ArrowValue(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_arrow_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_arrow_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(value_type::Value::ArrowValue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_arrow_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::std::option::Option::Some(value_type::Value::ArrowValue(v))
    }

    // Mutable pointer to the field.
    pub fn mut_arrow_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(value_type::Value::ArrowValue(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(value_type::Value::ArrowValue(::std::vec::Vec::new()));
        }
        match self.value {
            ::std::option::Option::Some(value_type::Value::ArrowValue(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_arrow_value(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_arrow_value() {
            match self.value.take() {
                ::std::option::Option::Some(value_type::Value::ArrowValue(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "arrow_value",
            ValueType::has_arrow_value,
            ValueType::arrow_value,
            ValueType::set_arrow_value,
        ));
        oneofs.push(value_type::Value::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValueType>(
            "ValueType",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ValueType {
    const NAME: &'static str = "ValueType";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.value = ::std::option::Option::Some(value_type::Value::ArrowValue(is.read_bytes()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &value_type::Value::ArrowValue(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &value_type::Value::ArrowValue(ref v) => {
                    os.write_bytes(1, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ValueType {
        ValueType::new()
    }

    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ValueType {
        static instance: ValueType = ValueType {
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ValueType {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ValueType").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ValueType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValueType {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ValueType`
pub mod value_type {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:feast.serving.ValueType.value)
    pub enum Value {
        // @@protoc_insertion_point(oneof_field:feast.serving.ValueType.arrow_value)
        ArrowValue(::std::vec::Vec<u8>),
    }

    impl ::protobuf::Oneof for Value {
    }

    impl ::protobuf::OneofFull for Value {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ValueType as ::protobuf::MessageFull>::descriptor().oneof_by_name("value").unwrap()).clone()
        }
    }

    impl Value {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Value>("value")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.serving.GetTransformationServiceInfoRequest)
pub struct GetTransformationServiceInfoRequest {
    // special fields
    // @@protoc_insertion_point(special_field:feast.serving.GetTransformationServiceInfoRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTransformationServiceInfoRequest {
    fn default() -> &'a GetTransformationServiceInfoRequest {
        <GetTransformationServiceInfoRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTransformationServiceInfoRequest {
    pub fn new() -> GetTransformationServiceInfoRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTransformationServiceInfoRequest>(
            "GetTransformationServiceInfoRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTransformationServiceInfoRequest {
    const NAME: &'static str = "GetTransformationServiceInfoRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTransformationServiceInfoRequest {
        GetTransformationServiceInfoRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTransformationServiceInfoRequest {
        static instance: GetTransformationServiceInfoRequest = GetTransformationServiceInfoRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTransformationServiceInfoRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTransformationServiceInfoRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTransformationServiceInfoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTransformationServiceInfoRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.serving.GetTransformationServiceInfoResponse)
pub struct GetTransformationServiceInfoResponse {
    // message fields
    ///  Feast version of this transformation service deployment.
    // @@protoc_insertion_point(field:feast.serving.GetTransformationServiceInfoResponse.version)
    pub version: ::std::string::String,
    ///  Type of transformation service deployment. This is either Python, or custom
    // @@protoc_insertion_point(field:feast.serving.GetTransformationServiceInfoResponse.type)
    pub type_: ::protobuf::EnumOrUnknown<TransformationServiceType>,
    // @@protoc_insertion_point(field:feast.serving.GetTransformationServiceInfoResponse.transformation_service_type_details)
    pub transformation_service_type_details: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:feast.serving.GetTransformationServiceInfoResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetTransformationServiceInfoResponse {
    fn default() -> &'a GetTransformationServiceInfoResponse {
        <GetTransformationServiceInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTransformationServiceInfoResponse {
    pub fn new() -> GetTransformationServiceInfoResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &GetTransformationServiceInfoResponse| { &m.version },
            |m: &mut GetTransformationServiceInfoResponse| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &GetTransformationServiceInfoResponse| { &m.type_ },
            |m: &mut GetTransformationServiceInfoResponse| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "transformation_service_type_details",
            |m: &GetTransformationServiceInfoResponse| { &m.transformation_service_type_details },
            |m: &mut GetTransformationServiceInfoResponse| { &mut m.transformation_service_type_details },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetTransformationServiceInfoResponse>(
            "GetTransformationServiceInfoResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetTransformationServiceInfoResponse {
    const NAME: &'static str = "GetTransformationServiceInfoResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = is.read_string()?;
                },
                16 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.transformation_service_type_details = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(TransformationServiceType::TRANSFORMATION_SERVICE_TYPE_INVALID) {
            my_size += ::protobuf::rt::int32_size(2, self.type_.value());
        }
        if !self.transformation_service_type_details.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.transformation_service_type_details);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(TransformationServiceType::TRANSFORMATION_SERVICE_TYPE_INVALID) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if !self.transformation_service_type_details.is_empty() {
            os.write_string(3, &self.transformation_service_type_details)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetTransformationServiceInfoResponse {
        GetTransformationServiceInfoResponse::new()
    }

    fn clear(&mut self) {
        self.version.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(TransformationServiceType::TRANSFORMATION_SERVICE_TYPE_INVALID);
        self.transformation_service_type_details.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetTransformationServiceInfoResponse {
        static instance: GetTransformationServiceInfoResponse = GetTransformationServiceInfoResponse {
            version: ::std::string::String::new(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            transformation_service_type_details: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetTransformationServiceInfoResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetTransformationServiceInfoResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetTransformationServiceInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTransformationServiceInfoResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.serving.TransformFeaturesRequest)
pub struct TransformFeaturesRequest {
    // message fields
    // @@protoc_insertion_point(field:feast.serving.TransformFeaturesRequest.on_demand_feature_view_name)
    pub on_demand_feature_view_name: ::std::string::String,
    // @@protoc_insertion_point(field:feast.serving.TransformFeaturesRequest.project)
    pub project: ::std::string::String,
    // @@protoc_insertion_point(field:feast.serving.TransformFeaturesRequest.transformation_input)
    pub transformation_input: ::protobuf::MessageField<ValueType>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.serving.TransformFeaturesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TransformFeaturesRequest {
    fn default() -> &'a TransformFeaturesRequest {
        <TransformFeaturesRequest as ::protobuf::Message>::default_instance()
    }
}

impl TransformFeaturesRequest {
    pub fn new() -> TransformFeaturesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "on_demand_feature_view_name",
            |m: &TransformFeaturesRequest| { &m.on_demand_feature_view_name },
            |m: &mut TransformFeaturesRequest| { &mut m.on_demand_feature_view_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "project",
            |m: &TransformFeaturesRequest| { &m.project },
            |m: &mut TransformFeaturesRequest| { &mut m.project },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ValueType>(
            "transformation_input",
            |m: &TransformFeaturesRequest| { &m.transformation_input },
            |m: &mut TransformFeaturesRequest| { &mut m.transformation_input },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TransformFeaturesRequest>(
            "TransformFeaturesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TransformFeaturesRequest {
    const NAME: &'static str = "TransformFeaturesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.on_demand_feature_view_name = is.read_string()?;
                },
                18 => {
                    self.project = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transformation_input)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.on_demand_feature_view_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.on_demand_feature_view_name);
        }
        if !self.project.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.project);
        }
        if let Some(v) = self.transformation_input.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.on_demand_feature_view_name.is_empty() {
            os.write_string(1, &self.on_demand_feature_view_name)?;
        }
        if !self.project.is_empty() {
            os.write_string(2, &self.project)?;
        }
        if let Some(v) = self.transformation_input.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TransformFeaturesRequest {
        TransformFeaturesRequest::new()
    }

    fn clear(&mut self) {
        self.on_demand_feature_view_name.clear();
        self.project.clear();
        self.transformation_input.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TransformFeaturesRequest {
        static instance: TransformFeaturesRequest = TransformFeaturesRequest {
            on_demand_feature_view_name: ::std::string::String::new(),
            project: ::std::string::String::new(),
            transformation_input: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TransformFeaturesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TransformFeaturesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TransformFeaturesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransformFeaturesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.serving.TransformFeaturesResponse)
pub struct TransformFeaturesResponse {
    // message fields
    // @@protoc_insertion_point(field:feast.serving.TransformFeaturesResponse.transformation_output)
    pub transformation_output: ::protobuf::MessageField<ValueType>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.serving.TransformFeaturesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TransformFeaturesResponse {
    fn default() -> &'a TransformFeaturesResponse {
        <TransformFeaturesResponse as ::protobuf::Message>::default_instance()
    }
}

impl TransformFeaturesResponse {
    pub fn new() -> TransformFeaturesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ValueType>(
            "transformation_output",
            |m: &TransformFeaturesResponse| { &m.transformation_output },
            |m: &mut TransformFeaturesResponse| { &mut m.transformation_output },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TransformFeaturesResponse>(
            "TransformFeaturesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TransformFeaturesResponse {
    const NAME: &'static str = "TransformFeaturesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transformation_output)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.transformation_output.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.transformation_output.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TransformFeaturesResponse {
        TransformFeaturesResponse::new()
    }

    fn clear(&mut self) {
        self.transformation_output.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TransformFeaturesResponse {
        static instance: TransformFeaturesResponse = TransformFeaturesResponse {
            transformation_output: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TransformFeaturesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TransformFeaturesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TransformFeaturesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransformFeaturesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:feast.serving.TransformationServiceType)
pub enum TransformationServiceType {
    // @@protoc_insertion_point(enum_value:feast.serving.TransformationServiceType.TRANSFORMATION_SERVICE_TYPE_INVALID)
    TRANSFORMATION_SERVICE_TYPE_INVALID = 0,
    // @@protoc_insertion_point(enum_value:feast.serving.TransformationServiceType.TRANSFORMATION_SERVICE_TYPE_PYTHON)
    TRANSFORMATION_SERVICE_TYPE_PYTHON = 1,
    // @@protoc_insertion_point(enum_value:feast.serving.TransformationServiceType.TRANSFORMATION_SERVICE_TYPE_CUSTOM)
    TRANSFORMATION_SERVICE_TYPE_CUSTOM = 100,
}

impl ::protobuf::Enum for TransformationServiceType {
    const NAME: &'static str = "TransformationServiceType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TransformationServiceType> {
        match value {
            0 => ::std::option::Option::Some(TransformationServiceType::TRANSFORMATION_SERVICE_TYPE_INVALID),
            1 => ::std::option::Option::Some(TransformationServiceType::TRANSFORMATION_SERVICE_TYPE_PYTHON),
            100 => ::std::option::Option::Some(TransformationServiceType::TRANSFORMATION_SERVICE_TYPE_CUSTOM),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [TransformationServiceType] = &[
        TransformationServiceType::TRANSFORMATION_SERVICE_TYPE_INVALID,
        TransformationServiceType::TRANSFORMATION_SERVICE_TYPE_PYTHON,
        TransformationServiceType::TRANSFORMATION_SERVICE_TYPE_CUSTOM,
    ];
}

impl ::protobuf::EnumFull for TransformationServiceType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("TransformationServiceType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            TransformationServiceType::TRANSFORMATION_SERVICE_TYPE_INVALID => 0,
            TransformationServiceType::TRANSFORMATION_SERVICE_TYPE_PYTHON => 1,
            TransformationServiceType::TRANSFORMATION_SERVICE_TYPE_CUSTOM => 2,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for TransformationServiceType {
    fn default() -> Self {
        TransformationServiceType::TRANSFORMATION_SERVICE_TYPE_INVALID
    }
}

impl TransformationServiceType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<TransformationServiceType>("TransformationServiceType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)feast/serving/TransformationService.proto\x12\rfeast.serving\"7\n\tVa\
    lueType\x12!\n\x0barrow_value\x18\x01\x20\x01(\x0cH\0R\narrowValueB\x07\
    \n\x05value\"%\n#GetTransformationServiceInfoRequest\"\xcd\x01\n$GetTran\
    sformationServiceInfoResponse\x12\x18\n\x07version\x18\x01\x20\x01(\tR\
    \x07version\x12<\n\x04type\x18\x02\x20\x01(\x0e2(.feast.serving.Transfor\
    mationServiceTypeR\x04type\x12M\n#transformation_service_type_details\
    \x18\x03\x20\x01(\tR\x20transformationServiceTypeDetails\"\xbf\x01\n\x18\
    TransformFeaturesRequest\x12<\n\x1bon_demand_feature_view_name\x18\x01\
    \x20\x01(\tR\x17onDemandFeatureViewName\x12\x18\n\x07project\x18\x02\x20\
    \x01(\tR\x07project\x12K\n\x14transformation_input\x18\x03\x20\x01(\x0b2\
    \x18.feast.serving.ValueTypeR\x13transformationInput\"j\n\x19TransformFe\
    aturesResponse\x12M\n\x15transformation_output\x18\x03\x20\x01(\x0b2\x18\
    .feast.serving.ValueTypeR\x14transformationOutput*\x94\x01\n\x19Transfor\
    mationServiceType\x12'\n#TRANSFORMATION_SERVICE_TYPE_INVALID\x10\0\x12&\
    \n\"TRANSFORMATION_SERVICE_TYPE_PYTHON\x10\x01\x12&\n\"TRANSFORMATION_SE\
    RVICE_TYPE_CUSTOM\x10d2\x89\x02\n\x15TransformationService\x12\x87\x01\n\
    \x1cGetTransformationServiceInfo\x122.feast.serving.GetTransformationSer\
    viceInfoRequest\x1a3.feast.serving.GetTransformationServiceInfoResponse\
    \x12f\n\x11TransformFeatures\x12'.feast.serving.TransformFeaturesRequest\
    \x1a(.feast.serving.TransformFeaturesResponseBh\n\x13feast.proto.serving\
    B\x1dTransformationServiceAPIProtoZ2github.com/feast-dev/feast/go/protos\
    /feast/servingJ\x8a\x0e\n\x06\x12\x04\x10\0B\x01\n\xc5\x04\n\x01\x0c\x12\
    \x03\x10\0\x122\xba\x04\n\x20Copyright\x202021\x20The\x20Feast\x20Author\
    s\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.\
    0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\
    \x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20ma\
    y\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20https://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20req\
    uired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\x08\n\x01\x02\x12\x03\x12\0\x16\n\x08\n\x01\x08\x12\
    \x03\x14\0,\n\t\n\x02\x08\x01\x12\x03\x14\0,\n\x08\n\x01\x08\x12\x03\x15\
    \0>\n\t\n\x02\x08\x08\x12\x03\x15\0>\n\x08\n\x01\x08\x12\x03\x16\0I\n\t\
    \n\x02\x08\x0b\x12\x03\x16\0I\n\n\n\x02\x06\0\x12\x04\x18\0\x1c\x01\n\n\
    \n\x03\x06\0\x01\x12\x03\x18\x08\x1d\n\x0b\n\x04\x06\0\x02\0\x12\x03\x19\
    \x04z\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x19\x08$\n\x0c\n\x05\x06\0\x02\
    \0\x02\x12\x03\x19&I\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x19Tx\n\x0b\n\
    \x04\x06\0\x02\x01\x12\x03\x1b\x04Y\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x1b\x08\x19\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x1b\x1b3\n\x0c\n\
    \x05\x06\0\x02\x01\x03\x12\x03\x1b>W\n\n\n\x02\x04\0\x12\x04\x1e\0$\x01\
    \n\n\n\x03\x04\0\x01\x12\x03\x1e\x08\x11\n\x0c\n\x04\x04\0\x08\0\x12\x04\
    \x1f\x04#\x05\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x1f\n\x0f\n\x8c\x01\n\
    \x04\x04\0\x02\0\x12\x03\"\x08\x1e\x1a\x7f\x20Having\x20a\x20oneOf\x20pr\
    ovides\x20forward\x20compatibility\x20if\x20we\x20need\x20to\x20support\
    \x20compound\x20types\n\x20that\x20are\x20not\x20supported\x20by\x20arro\
    w\x20natively.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\"\x08\r\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\"\x0e\x19\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\"\
    \x1c\x1d\n\t\n\x02\x04\x01\x12\x03&\0.\n\n\n\x03\x04\x01\x01\x12\x03&\
    \x08+\n\n\n\x02\x04\x02\x12\x04(\00\x01\n\n\n\x03\x04\x02\x01\x12\x03(\
    \x08,\nG\n\x04\x04\x02\x02\0\x12\x03*\x04\x17\x1a:\x20Feast\x20version\
    \x20of\x20this\x20transformation\x20service\x20deployment.\n\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x03*\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03*\
    \x0b\x12\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03*\x15\x16\nZ\n\x04\x04\x02\
    \x02\x01\x12\x03-\x04'\x1aM\x20Type\x20of\x20transformation\x20service\
    \x20deployment.\x20This\x20is\x20either\x20Python,\x20or\x20custom\n\n\
    \x0c\n\x05\x04\x02\x02\x01\x06\x12\x03-\x04\x1d\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03-\x1e\"\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03-%&\n\x0b\
    \n\x04\x04\x02\x02\x02\x12\x03/\x043\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\
    \x03/\x04\n\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03/\x0b.\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03/12\n\n\n\x02\x04\x03\x12\x042\07\x01\n\n\n\
    \x03\x04\x03\x01\x12\x032\x08\x20\n\x0b\n\x04\x04\x03\x02\0\x12\x033\x04\
    +\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x033\x04\n\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x033\x0b&\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x033)*\n\x0b\n\x04\
    \x04\x03\x02\x01\x12\x034\x04\x17\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\
    \x034\x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x034\x0b\x12\n\x0c\n\x05\
    \x04\x03\x02\x01\x03\x12\x034\x15\x16\n\x0b\n\x04\x04\x03\x02\x02\x12\
    \x036\x04'\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x036\x04\r\n\x0c\n\x05\
    \x04\x03\x02\x02\x01\x12\x036\x0e\"\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\
    \x036%&\n\n\n\x02\x04\x04\x12\x049\0;\x01\n\n\n\x03\x04\x04\x01\x12\x039\
    \x08!\n\x0b\n\x04\x04\x04\x02\0\x12\x03:\x04(\n\x0c\n\x05\x04\x04\x02\0\
    \x06\x12\x03:\x04\r\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03:\x0e#\n\x0c\n\
    \x05\x04\x04\x02\0\x03\x12\x03:&'\n\n\n\x02\x05\0\x12\x04=\0B\x01\n\n\n\
    \x03\x05\0\x01\x12\x03=\x05\x1e\n\x0b\n\x04\x05\0\x02\0\x12\x03>\x04,\n\
    \x0c\n\x05\x05\0\x02\0\x01\x12\x03>\x04'\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03>*+\n\x0b\n\x04\x05\0\x02\x01\x12\x03?\x04+\n\x0c\n\x05\x05\0\x02\
    \x01\x01\x12\x03?\x04&\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03?)*\n\x0b\n\
    \x04\x05\0\x02\x02\x12\x03A\x04-\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03A\
    \x04&\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03A),b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(ValueType::generated_message_descriptor_data());
            messages.push(GetTransformationServiceInfoRequest::generated_message_descriptor_data());
            messages.push(GetTransformationServiceInfoResponse::generated_message_descriptor_data());
            messages.push(TransformFeaturesRequest::generated_message_descriptor_data());
            messages.push(TransformFeaturesResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(TransformationServiceType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
