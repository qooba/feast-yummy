// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `feast/core/DataFormat.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  Defines the file format encoding the features/entity data in files
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.FileFormat)
pub struct FileFormat {
    // message oneof groups
    pub format: ::std::option::Option<file_format::Format>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.FileFormat.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FileFormat {
    fn default() -> &'a FileFormat {
        <FileFormat as ::protobuf::Message>::default_instance()
    }
}

impl FileFormat {
    pub fn new() -> FileFormat {
        ::std::default::Default::default()
    }

    // .feast.core.FileFormat.ParquetFormat parquet_format = 1;

    pub fn parquet_format(&self) -> &file_format::ParquetFormat {
        match self.format {
            ::std::option::Option::Some(file_format::Format::ParquetFormat(ref v)) => v,
            _ => <file_format::ParquetFormat as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_parquet_format(&mut self) {
        self.format = ::std::option::Option::None;
    }

    pub fn has_parquet_format(&self) -> bool {
        match self.format {
            ::std::option::Option::Some(file_format::Format::ParquetFormat(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_parquet_format(&mut self, v: file_format::ParquetFormat) {
        self.format = ::std::option::Option::Some(file_format::Format::ParquetFormat(v))
    }

    // Mutable pointer to the field.
    pub fn mut_parquet_format(&mut self) -> &mut file_format::ParquetFormat {
        if let ::std::option::Option::Some(file_format::Format::ParquetFormat(_)) = self.format {
        } else {
            self.format = ::std::option::Option::Some(file_format::Format::ParquetFormat(file_format::ParquetFormat::new()));
        }
        match self.format {
            ::std::option::Option::Some(file_format::Format::ParquetFormat(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_parquet_format(&mut self) -> file_format::ParquetFormat {
        if self.has_parquet_format() {
            match self.format.take() {
                ::std::option::Option::Some(file_format::Format::ParquetFormat(v)) => v,
                _ => panic!(),
            }
        } else {
            file_format::ParquetFormat::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, file_format::ParquetFormat>(
            "parquet_format",
            FileFormat::has_parquet_format,
            FileFormat::parquet_format,
            FileFormat::mut_parquet_format,
            FileFormat::set_parquet_format,
        ));
        oneofs.push(file_format::Format::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FileFormat>(
            "FileFormat",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FileFormat {
    const NAME: &'static str = "FileFormat";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.format = ::std::option::Option::Some(file_format::Format::ParquetFormat(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.format {
            match v {
                &file_format::Format::ParquetFormat(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.format {
            match v {
                &file_format::Format::ParquetFormat(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FileFormat {
        FileFormat::new()
    }

    fn clear(&mut self) {
        self.format = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FileFormat {
        static instance: FileFormat = FileFormat {
            format: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FileFormat {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FileFormat").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FileFormat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FileFormat {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FileFormat`
pub mod file_format {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:feast.core.FileFormat.format)
    pub enum Format {
        // @@protoc_insertion_point(oneof_field:feast.core.FileFormat.parquet_format)
        ParquetFormat(ParquetFormat),
    }

    impl ::protobuf::Oneof for Format {
    }

    impl ::protobuf::OneofFull for Format {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::FileFormat as ::protobuf::MessageFull>::descriptor().oneof_by_name("format").unwrap()).clone()
        }
    }

    impl Format {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Format>("format")
        }
    }
    ///  Defines options for the Parquet data format
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:feast.core.FileFormat.ParquetFormat)
    pub struct ParquetFormat {
        // special fields
        // @@protoc_insertion_point(special_field:feast.core.FileFormat.ParquetFormat.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ParquetFormat {
        fn default() -> &'a ParquetFormat {
            <ParquetFormat as ::protobuf::Message>::default_instance()
        }
    }

    impl ParquetFormat {
        pub fn new() -> ParquetFormat {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(0);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ParquetFormat>(
                "FileFormat.ParquetFormat",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ParquetFormat {
        const NAME: &'static str = "ParquetFormat";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ParquetFormat {
            ParquetFormat::new()
        }

        fn clear(&mut self) {
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ParquetFormat {
            static instance: ParquetFormat = ParquetFormat {
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ParquetFormat {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("FileFormat.ParquetFormat").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ParquetFormat {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ParquetFormat {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

///  Defines the data format encoding features/entity data in data streams
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.StreamFormat)
pub struct StreamFormat {
    // message oneof groups
    pub format: ::std::option::Option<stream_format::Format>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.StreamFormat.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StreamFormat {
    fn default() -> &'a StreamFormat {
        <StreamFormat as ::protobuf::Message>::default_instance()
    }
}

impl StreamFormat {
    pub fn new() -> StreamFormat {
        ::std::default::Default::default()
    }

    // .feast.core.StreamFormat.AvroFormat avro_format = 1;

    pub fn avro_format(&self) -> &stream_format::AvroFormat {
        match self.format {
            ::std::option::Option::Some(stream_format::Format::AvroFormat(ref v)) => v,
            _ => <stream_format::AvroFormat as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_avro_format(&mut self) {
        self.format = ::std::option::Option::None;
    }

    pub fn has_avro_format(&self) -> bool {
        match self.format {
            ::std::option::Option::Some(stream_format::Format::AvroFormat(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_avro_format(&mut self, v: stream_format::AvroFormat) {
        self.format = ::std::option::Option::Some(stream_format::Format::AvroFormat(v))
    }

    // Mutable pointer to the field.
    pub fn mut_avro_format(&mut self) -> &mut stream_format::AvroFormat {
        if let ::std::option::Option::Some(stream_format::Format::AvroFormat(_)) = self.format {
        } else {
            self.format = ::std::option::Option::Some(stream_format::Format::AvroFormat(stream_format::AvroFormat::new()));
        }
        match self.format {
            ::std::option::Option::Some(stream_format::Format::AvroFormat(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_avro_format(&mut self) -> stream_format::AvroFormat {
        if self.has_avro_format() {
            match self.format.take() {
                ::std::option::Option::Some(stream_format::Format::AvroFormat(v)) => v,
                _ => panic!(),
            }
        } else {
            stream_format::AvroFormat::new()
        }
    }

    // .feast.core.StreamFormat.ProtoFormat proto_format = 2;

    pub fn proto_format(&self) -> &stream_format::ProtoFormat {
        match self.format {
            ::std::option::Option::Some(stream_format::Format::ProtoFormat(ref v)) => v,
            _ => <stream_format::ProtoFormat as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_proto_format(&mut self) {
        self.format = ::std::option::Option::None;
    }

    pub fn has_proto_format(&self) -> bool {
        match self.format {
            ::std::option::Option::Some(stream_format::Format::ProtoFormat(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_proto_format(&mut self, v: stream_format::ProtoFormat) {
        self.format = ::std::option::Option::Some(stream_format::Format::ProtoFormat(v))
    }

    // Mutable pointer to the field.
    pub fn mut_proto_format(&mut self) -> &mut stream_format::ProtoFormat {
        if let ::std::option::Option::Some(stream_format::Format::ProtoFormat(_)) = self.format {
        } else {
            self.format = ::std::option::Option::Some(stream_format::Format::ProtoFormat(stream_format::ProtoFormat::new()));
        }
        match self.format {
            ::std::option::Option::Some(stream_format::Format::ProtoFormat(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_proto_format(&mut self) -> stream_format::ProtoFormat {
        if self.has_proto_format() {
            match self.format.take() {
                ::std::option::Option::Some(stream_format::Format::ProtoFormat(v)) => v,
                _ => panic!(),
            }
        } else {
            stream_format::ProtoFormat::new()
        }
    }

    // .feast.core.StreamFormat.JsonFormat json_format = 3;

    pub fn json_format(&self) -> &stream_format::JsonFormat {
        match self.format {
            ::std::option::Option::Some(stream_format::Format::JsonFormat(ref v)) => v,
            _ => <stream_format::JsonFormat as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_json_format(&mut self) {
        self.format = ::std::option::Option::None;
    }

    pub fn has_json_format(&self) -> bool {
        match self.format {
            ::std::option::Option::Some(stream_format::Format::JsonFormat(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_json_format(&mut self, v: stream_format::JsonFormat) {
        self.format = ::std::option::Option::Some(stream_format::Format::JsonFormat(v))
    }

    // Mutable pointer to the field.
    pub fn mut_json_format(&mut self) -> &mut stream_format::JsonFormat {
        if let ::std::option::Option::Some(stream_format::Format::JsonFormat(_)) = self.format {
        } else {
            self.format = ::std::option::Option::Some(stream_format::Format::JsonFormat(stream_format::JsonFormat::new()));
        }
        match self.format {
            ::std::option::Option::Some(stream_format::Format::JsonFormat(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_json_format(&mut self) -> stream_format::JsonFormat {
        if self.has_json_format() {
            match self.format.take() {
                ::std::option::Option::Some(stream_format::Format::JsonFormat(v)) => v,
                _ => panic!(),
            }
        } else {
            stream_format::JsonFormat::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, stream_format::AvroFormat>(
            "avro_format",
            StreamFormat::has_avro_format,
            StreamFormat::avro_format,
            StreamFormat::mut_avro_format,
            StreamFormat::set_avro_format,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, stream_format::ProtoFormat>(
            "proto_format",
            StreamFormat::has_proto_format,
            StreamFormat::proto_format,
            StreamFormat::mut_proto_format,
            StreamFormat::set_proto_format,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, stream_format::JsonFormat>(
            "json_format",
            StreamFormat::has_json_format,
            StreamFormat::json_format,
            StreamFormat::mut_json_format,
            StreamFormat::set_json_format,
        ));
        oneofs.push(stream_format::Format::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StreamFormat>(
            "StreamFormat",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StreamFormat {
    const NAME: &'static str = "StreamFormat";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.format = ::std::option::Option::Some(stream_format::Format::AvroFormat(is.read_message()?));
                },
                18 => {
                    self.format = ::std::option::Option::Some(stream_format::Format::ProtoFormat(is.read_message()?));
                },
                26 => {
                    self.format = ::std::option::Option::Some(stream_format::Format::JsonFormat(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.format {
            match v {
                &stream_format::Format::AvroFormat(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &stream_format::Format::ProtoFormat(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &stream_format::Format::JsonFormat(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.format {
            match v {
                &stream_format::Format::AvroFormat(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &stream_format::Format::ProtoFormat(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &stream_format::Format::JsonFormat(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StreamFormat {
        StreamFormat::new()
    }

    fn clear(&mut self) {
        self.format = ::std::option::Option::None;
        self.format = ::std::option::Option::None;
        self.format = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StreamFormat {
        static instance: StreamFormat = StreamFormat {
            format: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StreamFormat {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StreamFormat").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StreamFormat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamFormat {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `StreamFormat`
pub mod stream_format {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:feast.core.StreamFormat.format)
    pub enum Format {
        // @@protoc_insertion_point(oneof_field:feast.core.StreamFormat.avro_format)
        AvroFormat(AvroFormat),
        // @@protoc_insertion_point(oneof_field:feast.core.StreamFormat.proto_format)
        ProtoFormat(ProtoFormat),
        // @@protoc_insertion_point(oneof_field:feast.core.StreamFormat.json_format)
        JsonFormat(JsonFormat),
    }

    impl ::protobuf::Oneof for Format {
    }

    impl ::protobuf::OneofFull for Format {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::StreamFormat as ::protobuf::MessageFull>::descriptor().oneof_by_name("format").unwrap()).clone()
        }
    }

    impl Format {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Format>("format")
        }
    }
    ///  Defines options for the protobuf data format
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:feast.core.StreamFormat.ProtoFormat)
    pub struct ProtoFormat {
        // message fields
        ///  Classpath to the generated Java Protobuf class that can be used to decode
        ///  Feature data from the obtained stream message
        // @@protoc_insertion_point(field:feast.core.StreamFormat.ProtoFormat.class_path)
        pub class_path: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:feast.core.StreamFormat.ProtoFormat.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ProtoFormat {
        fn default() -> &'a ProtoFormat {
            <ProtoFormat as ::protobuf::Message>::default_instance()
        }
    }

    impl ProtoFormat {
        pub fn new() -> ProtoFormat {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "class_path",
                |m: &ProtoFormat| { &m.class_path },
                |m: &mut ProtoFormat| { &mut m.class_path },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProtoFormat>(
                "StreamFormat.ProtoFormat",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ProtoFormat {
        const NAME: &'static str = "ProtoFormat";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.class_path = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.class_path.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.class_path);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.class_path.is_empty() {
                os.write_string(1, &self.class_path)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ProtoFormat {
            ProtoFormat::new()
        }

        fn clear(&mut self) {
            self.class_path.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ProtoFormat {
            static instance: ProtoFormat = ProtoFormat {
                class_path: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ProtoFormat {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("StreamFormat.ProtoFormat").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ProtoFormat {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ProtoFormat {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    ///  Defines options for the avro data format
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:feast.core.StreamFormat.AvroFormat)
    pub struct AvroFormat {
        // message fields
        ///  Optional if used in a File DataSource as schema is embedded in avro file.
        ///  Specifies the schema of the Avro message as JSON string.
        // @@protoc_insertion_point(field:feast.core.StreamFormat.AvroFormat.schema_json)
        pub schema_json: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:feast.core.StreamFormat.AvroFormat.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a AvroFormat {
        fn default() -> &'a AvroFormat {
            <AvroFormat as ::protobuf::Message>::default_instance()
        }
    }

    impl AvroFormat {
        pub fn new() -> AvroFormat {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "schema_json",
                |m: &AvroFormat| { &m.schema_json },
                |m: &mut AvroFormat| { &mut m.schema_json },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AvroFormat>(
                "StreamFormat.AvroFormat",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for AvroFormat {
        const NAME: &'static str = "AvroFormat";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.schema_json = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.schema_json.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.schema_json);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.schema_json.is_empty() {
                os.write_string(1, &self.schema_json)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> AvroFormat {
            AvroFormat::new()
        }

        fn clear(&mut self) {
            self.schema_json.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static AvroFormat {
            static instance: AvroFormat = AvroFormat {
                schema_json: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for AvroFormat {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("StreamFormat.AvroFormat").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for AvroFormat {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for AvroFormat {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:feast.core.StreamFormat.JsonFormat)
    pub struct JsonFormat {
        // message fields
        // @@protoc_insertion_point(field:feast.core.StreamFormat.JsonFormat.schema_json)
        pub schema_json: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:feast.core.StreamFormat.JsonFormat.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a JsonFormat {
        fn default() -> &'a JsonFormat {
            <JsonFormat as ::protobuf::Message>::default_instance()
        }
    }

    impl JsonFormat {
        pub fn new() -> JsonFormat {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "schema_json",
                |m: &JsonFormat| { &m.schema_json },
                |m: &mut JsonFormat| { &mut m.schema_json },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JsonFormat>(
                "StreamFormat.JsonFormat",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for JsonFormat {
        const NAME: &'static str = "JsonFormat";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.schema_json = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.schema_json.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.schema_json);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.schema_json.is_empty() {
                os.write_string(1, &self.schema_json)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> JsonFormat {
            JsonFormat::new()
        }

        fn clear(&mut self) {
            self.schema_json.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static JsonFormat {
            static instance: JsonFormat = JsonFormat {
                schema_json: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for JsonFormat {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("StreamFormat.JsonFormat").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for JsonFormat {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for JsonFormat {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bfeast/core/DataFormat.proto\x12\nfeast.core\"v\n\nFileFormat\x12M\
    \n\x0eparquet_format\x18\x01\x20\x01(\x0b2$.feast.core.FileFormat.Parque\
    tFormatH\0R\rparquetFormat\x1a\x0f\n\rParquetFormatB\x08\n\x06format\"\
    \xff\x02\n\x0cStreamFormat\x12F\n\x0bavro_format\x18\x01\x20\x01(\x0b2#.\
    feast.core.StreamFormat.AvroFormatH\0R\navroFormat\x12I\n\x0cproto_forma\
    t\x18\x02\x20\x01(\x0b2$.feast.core.StreamFormat.ProtoFormatH\0R\x0bprot\
    oFormat\x12F\n\x0bjson_format\x18\x03\x20\x01(\x0b2#.feast.core.StreamFo\
    rmat.JsonFormatH\0R\njsonFormat\x1a,\n\x0bProtoFormat\x12\x1d\n\nclass_p\
    ath\x18\x01\x20\x01(\tR\tclassPath\x1a-\n\nAvroFormat\x12\x1f\n\x0bschem\
    a_json\x18\x01\x20\x01(\tR\nschemaJson\x1a-\n\nJsonFormat\x12\x1f\n\x0bs\
    chema_json\x18\x01\x20\x01(\tR\nschemaJsonB\x08\n\x06formatBT\n\x10feast\
    .proto.coreB\x0fDataFormatProtoZ/github.com/feast-dev/feast/go/protos/fe\
    ast/coreJ\xe3\x0e\n\x06\x12\x04\x11\0<\x01\n\xc6\x04\n\x01\x0c\x12\x03\
    \x11\0\x122\xbb\x04\n\x20Copyright\x202020\x20The\x20Feast\x20Authors\n\
    \n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\
    \x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\
    \x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20ma\
    y\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20https://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20req\
    uired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x12\0\x13\n\x08\n\x01\x08\x12\
    \x03\x14\0F\n\t\n\x02\x08\x0b\x12\x03\x14\0F\n\x08\n\x01\x08\x12\x03\x15\
    \00\n\t\n\x02\x08\x08\x12\x03\x15\00\n\x08\n\x01\x08\x12\x03\x16\0)\n\t\
    \n\x02\x08\x01\x12\x03\x16\0)\nP\n\x02\x04\0\x12\x04\x19\0\x20\x01\x1aD\
    \x20Defines\x20the\x20file\x20format\x20encoding\x20the\x20features/enti\
    ty\x20data\x20in\x20files\n\n\n\n\x03\x04\0\x01\x12\x03\x19\x08\x12\n:\n\
    \x04\x04\0\x03\0\x12\x03\x1b\x02\x1a\x1a-\x20Defines\x20options\x20for\
    \x20the\x20Parquet\x20data\x20format\n\n\x0c\n\x05\x04\0\x03\0\x01\x12\
    \x03\x1b\n\x17\n\x0c\n\x04\x04\0\x08\0\x12\x04\x1d\x02\x1f\x03\n\x0c\n\
    \x05\x04\0\x08\0\x01\x12\x03\x1d\x08\x0e\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x1e\x04%\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x1e\x04\x11\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x1e\x12\x20\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x1e#$\nS\n\x02\x04\x01\x12\x04#\0<\x01\x1aG\x20Defines\x20the\x20data\
    \x20format\x20encoding\x20features/entity\x20data\x20in\x20data\x20strea\
    ms\n\n\n\n\x03\x04\x01\x01\x12\x03#\x08\x14\n<\n\x04\x04\x01\x03\0\x12\
    \x04%\x02)\x03\x1a.\x20Defines\x20options\x20for\x20the\x20protobuf\x20d\
    ata\x20format\n\n\x0c\n\x05\x04\x01\x03\0\x01\x12\x03%\n\x15\n\x89\x01\n\
    \x06\x04\x01\x03\0\x02\0\x12\x03(\x04\x1a\x1az\x20Classpath\x20to\x20the\
    \x20generated\x20Java\x20Protobuf\x20class\x20that\x20can\x20be\x20used\
    \x20to\x20decode\n\x20Feature\x20data\x20from\x20the\x20obtained\x20stre\
    am\x20message\n\n\x0e\n\x07\x04\x01\x03\0\x02\0\x05\x12\x03(\x04\n\n\x0e\
    \n\x07\x04\x01\x03\0\x02\0\x01\x12\x03(\x0b\x15\n\x0e\n\x07\x04\x01\x03\
    \0\x02\0\x03\x12\x03(\x18\x19\n8\n\x04\x04\x01\x03\x01\x12\x04,\x020\x03\
    \x1a*\x20Defines\x20options\x20for\x20the\x20avro\x20data\x20format\n\n\
    \x0c\n\x05\x04\x01\x03\x01\x01\x12\x03,\n\x14\n\x95\x01\n\x06\x04\x01\
    \x03\x01\x02\0\x12\x03/\x04\x1b\x1a\x85\x01\x20Optional\x20if\x20used\
    \x20in\x20a\x20File\x20DataSource\x20as\x20schema\x20is\x20embedded\x20i\
    n\x20avro\x20file.\n\x20Specifies\x20the\x20schema\x20of\x20the\x20Avro\
    \x20message\x20as\x20JSON\x20string.\n\n\x0e\n\x07\x04\x01\x03\x01\x02\0\
    \x05\x12\x03/\x04\n\n\x0e\n\x07\x04\x01\x03\x01\x02\0\x01\x12\x03/\x0b\
    \x16\n\x0e\n\x07\x04\x01\x03\x01\x02\0\x03\x12\x03/\x19\x1a\n\x0c\n\x04\
    \x04\x01\x03\x02\x12\x042\x024\x03\n\x0c\n\x05\x04\x01\x03\x02\x01\x12\
    \x032\n\x14\n\r\n\x06\x04\x01\x03\x02\x02\0\x12\x033\x04\x1b\n\x0e\n\x07\
    \x04\x01\x03\x02\x02\0\x05\x12\x033\x04\n\n\x0e\n\x07\x04\x01\x03\x02\
    \x02\0\x01\x12\x033\x0b\x16\n\x0e\n\x07\x04\x01\x03\x02\x02\0\x03\x12\
    \x033\x19\x1a\nE\n\x04\x04\x01\x08\0\x12\x047\x02;\x03\x1a7\x20Specifies\
    \x20the\x20data\x20format\x20and\x20format\x20specific\x20options\n\n\
    \x0c\n\x05\x04\x01\x08\0\x01\x12\x037\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x038\x04\x1f\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x038\x04\x0e\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x038\x0f\x1a\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x038\x1d\x1e\n\x0b\n\x04\x04\x01\x02\x01\x12\x039\x04!\n\x0c\n\x05\
    \x04\x01\x02\x01\x06\x12\x039\x04\x0f\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x039\x10\x1c\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x039\x1f\x20\n\x0b\
    \n\x04\x04\x01\x02\x02\x12\x03:\x04\x1f\n\x0c\n\x05\x04\x01\x02\x02\x06\
    \x12\x03:\x04\x0e\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03:\x0f\x1a\n\x0c\
    \n\x05\x04\x01\x02\x02\x03\x12\x03:\x1d\x1eb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(FileFormat::generated_message_descriptor_data());
            messages.push(StreamFormat::generated_message_descriptor_data());
            messages.push(file_format::ParquetFormat::generated_message_descriptor_data());
            messages.push(stream_format::ProtoFormat::generated_message_descriptor_data());
            messages.push(stream_format::AvroFormat::generated_message_descriptor_data());
            messages.push(stream_format::JsonFormat::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
