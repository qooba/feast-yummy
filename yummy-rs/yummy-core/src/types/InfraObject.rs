// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `feast/core/InfraObject.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  Represents a set of infrastructure objects managed by Feast
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.Infra)
pub struct Infra {
    // message fields
    ///  List of infrastructure objects managed by Feast
    // @@protoc_insertion_point(field:feast.core.Infra.infra_objects)
    pub infra_objects: ::std::vec::Vec<InfraObject>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.Infra.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Infra {
    fn default() -> &'a Infra {
        <Infra as ::protobuf::Message>::default_instance()
    }
}

impl Infra {
    pub fn new() -> Infra {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "infra_objects",
            |m: &Infra| { &m.infra_objects },
            |m: &mut Infra| { &mut m.infra_objects },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Infra>(
            "Infra",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Infra {
    const NAME: &'static str = "Infra";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.infra_objects.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.infra_objects {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.infra_objects {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Infra {
        Infra::new()
    }

    fn clear(&mut self) {
        self.infra_objects.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Infra {
        static instance: Infra = Infra {
            infra_objects: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Infra {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Infra").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Infra {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Infra {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Represents a single infrastructure object managed by Feast
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.InfraObject)
pub struct InfraObject {
    // message fields
    ///  Represents the Python class for the infrastructure object
    // @@protoc_insertion_point(field:feast.core.InfraObject.infra_object_class_type)
    pub infra_object_class_type: ::std::string::String,
    // message oneof groups
    pub infra_object: ::std::option::Option<infra_object::Infra_object>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.InfraObject.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InfraObject {
    fn default() -> &'a InfraObject {
        <InfraObject as ::protobuf::Message>::default_instance()
    }
}

impl InfraObject {
    pub fn new() -> InfraObject {
        ::std::default::Default::default()
    }

    // .feast.core.DynamoDBTable dynamodb_table = 2;

    pub fn dynamodb_table(&self) -> &super::DynamoDBTable::DynamoDBTable {
        match self.infra_object {
            ::std::option::Option::Some(infra_object::Infra_object::DynamodbTable(ref v)) => v,
            _ => <super::DynamoDBTable::DynamoDBTable as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_dynamodb_table(&mut self) {
        self.infra_object = ::std::option::Option::None;
    }

    pub fn has_dynamodb_table(&self) -> bool {
        match self.infra_object {
            ::std::option::Option::Some(infra_object::Infra_object::DynamodbTable(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_dynamodb_table(&mut self, v: super::DynamoDBTable::DynamoDBTable) {
        self.infra_object = ::std::option::Option::Some(infra_object::Infra_object::DynamodbTable(v))
    }

    // Mutable pointer to the field.
    pub fn mut_dynamodb_table(&mut self) -> &mut super::DynamoDBTable::DynamoDBTable {
        if let ::std::option::Option::Some(infra_object::Infra_object::DynamodbTable(_)) = self.infra_object {
        } else {
            self.infra_object = ::std::option::Option::Some(infra_object::Infra_object::DynamodbTable(super::DynamoDBTable::DynamoDBTable::new()));
        }
        match self.infra_object {
            ::std::option::Option::Some(infra_object::Infra_object::DynamodbTable(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_dynamodb_table(&mut self) -> super::DynamoDBTable::DynamoDBTable {
        if self.has_dynamodb_table() {
            match self.infra_object.take() {
                ::std::option::Option::Some(infra_object::Infra_object::DynamodbTable(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DynamoDBTable::DynamoDBTable::new()
        }
    }

    // .feast.core.DatastoreTable datastore_table = 3;

    pub fn datastore_table(&self) -> &super::DatastoreTable::DatastoreTable {
        match self.infra_object {
            ::std::option::Option::Some(infra_object::Infra_object::DatastoreTable(ref v)) => v,
            _ => <super::DatastoreTable::DatastoreTable as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_datastore_table(&mut self) {
        self.infra_object = ::std::option::Option::None;
    }

    pub fn has_datastore_table(&self) -> bool {
        match self.infra_object {
            ::std::option::Option::Some(infra_object::Infra_object::DatastoreTable(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_datastore_table(&mut self, v: super::DatastoreTable::DatastoreTable) {
        self.infra_object = ::std::option::Option::Some(infra_object::Infra_object::DatastoreTable(v))
    }

    // Mutable pointer to the field.
    pub fn mut_datastore_table(&mut self) -> &mut super::DatastoreTable::DatastoreTable {
        if let ::std::option::Option::Some(infra_object::Infra_object::DatastoreTable(_)) = self.infra_object {
        } else {
            self.infra_object = ::std::option::Option::Some(infra_object::Infra_object::DatastoreTable(super::DatastoreTable::DatastoreTable::new()));
        }
        match self.infra_object {
            ::std::option::Option::Some(infra_object::Infra_object::DatastoreTable(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_datastore_table(&mut self) -> super::DatastoreTable::DatastoreTable {
        if self.has_datastore_table() {
            match self.infra_object.take() {
                ::std::option::Option::Some(infra_object::Infra_object::DatastoreTable(v)) => v,
                _ => panic!(),
            }
        } else {
            super::DatastoreTable::DatastoreTable::new()
        }
    }

    // .feast.core.SqliteTable sqlite_table = 4;

    pub fn sqlite_table(&self) -> &super::SqliteTable::SqliteTable {
        match self.infra_object {
            ::std::option::Option::Some(infra_object::Infra_object::SqliteTable(ref v)) => v,
            _ => <super::SqliteTable::SqliteTable as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sqlite_table(&mut self) {
        self.infra_object = ::std::option::Option::None;
    }

    pub fn has_sqlite_table(&self) -> bool {
        match self.infra_object {
            ::std::option::Option::Some(infra_object::Infra_object::SqliteTable(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sqlite_table(&mut self, v: super::SqliteTable::SqliteTable) {
        self.infra_object = ::std::option::Option::Some(infra_object::Infra_object::SqliteTable(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sqlite_table(&mut self) -> &mut super::SqliteTable::SqliteTable {
        if let ::std::option::Option::Some(infra_object::Infra_object::SqliteTable(_)) = self.infra_object {
        } else {
            self.infra_object = ::std::option::Option::Some(infra_object::Infra_object::SqliteTable(super::SqliteTable::SqliteTable::new()));
        }
        match self.infra_object {
            ::std::option::Option::Some(infra_object::Infra_object::SqliteTable(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sqlite_table(&mut self) -> super::SqliteTable::SqliteTable {
        if self.has_sqlite_table() {
            match self.infra_object.take() {
                ::std::option::Option::Some(infra_object::Infra_object::SqliteTable(v)) => v,
                _ => panic!(),
            }
        } else {
            super::SqliteTable::SqliteTable::new()
        }
    }

    // .feast.core.InfraObject.CustomInfra custom_infra = 100;

    pub fn custom_infra(&self) -> &infra_object::CustomInfra {
        match self.infra_object {
            ::std::option::Option::Some(infra_object::Infra_object::CustomInfra(ref v)) => v,
            _ => <infra_object::CustomInfra as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_custom_infra(&mut self) {
        self.infra_object = ::std::option::Option::None;
    }

    pub fn has_custom_infra(&self) -> bool {
        match self.infra_object {
            ::std::option::Option::Some(infra_object::Infra_object::CustomInfra(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_custom_infra(&mut self, v: infra_object::CustomInfra) {
        self.infra_object = ::std::option::Option::Some(infra_object::Infra_object::CustomInfra(v))
    }

    // Mutable pointer to the field.
    pub fn mut_custom_infra(&mut self) -> &mut infra_object::CustomInfra {
        if let ::std::option::Option::Some(infra_object::Infra_object::CustomInfra(_)) = self.infra_object {
        } else {
            self.infra_object = ::std::option::Option::Some(infra_object::Infra_object::CustomInfra(infra_object::CustomInfra::new()));
        }
        match self.infra_object {
            ::std::option::Option::Some(infra_object::Infra_object::CustomInfra(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_custom_infra(&mut self) -> infra_object::CustomInfra {
        if self.has_custom_infra() {
            match self.infra_object.take() {
                ::std::option::Option::Some(infra_object::Infra_object::CustomInfra(v)) => v,
                _ => panic!(),
            }
        } else {
            infra_object::CustomInfra::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "infra_object_class_type",
            |m: &InfraObject| { &m.infra_object_class_type },
            |m: &mut InfraObject| { &mut m.infra_object_class_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DynamoDBTable::DynamoDBTable>(
            "dynamodb_table",
            InfraObject::has_dynamodb_table,
            InfraObject::dynamodb_table,
            InfraObject::mut_dynamodb_table,
            InfraObject::set_dynamodb_table,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::DatastoreTable::DatastoreTable>(
            "datastore_table",
            InfraObject::has_datastore_table,
            InfraObject::datastore_table,
            InfraObject::mut_datastore_table,
            InfraObject::set_datastore_table,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::SqliteTable::SqliteTable>(
            "sqlite_table",
            InfraObject::has_sqlite_table,
            InfraObject::sqlite_table,
            InfraObject::mut_sqlite_table,
            InfraObject::set_sqlite_table,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, infra_object::CustomInfra>(
            "custom_infra",
            InfraObject::has_custom_infra,
            InfraObject::custom_infra,
            InfraObject::mut_custom_infra,
            InfraObject::set_custom_infra,
        ));
        oneofs.push(infra_object::Infra_object::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InfraObject>(
            "InfraObject",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InfraObject {
    const NAME: &'static str = "InfraObject";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.infra_object_class_type = is.read_string()?;
                },
                18 => {
                    self.infra_object = ::std::option::Option::Some(infra_object::Infra_object::DynamodbTable(is.read_message()?));
                },
                26 => {
                    self.infra_object = ::std::option::Option::Some(infra_object::Infra_object::DatastoreTable(is.read_message()?));
                },
                34 => {
                    self.infra_object = ::std::option::Option::Some(infra_object::Infra_object::SqliteTable(is.read_message()?));
                },
                802 => {
                    self.infra_object = ::std::option::Option::Some(infra_object::Infra_object::CustomInfra(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.infra_object_class_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.infra_object_class_type);
        }
        if let ::std::option::Option::Some(ref v) = self.infra_object {
            match v {
                &infra_object::Infra_object::DynamodbTable(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &infra_object::Infra_object::DatastoreTable(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &infra_object::Infra_object::SqliteTable(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &infra_object::Infra_object::CustomInfra(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.infra_object_class_type.is_empty() {
            os.write_string(1, &self.infra_object_class_type)?;
        }
        if let ::std::option::Option::Some(ref v) = self.infra_object {
            match v {
                &infra_object::Infra_object::DynamodbTable(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &infra_object::Infra_object::DatastoreTable(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &infra_object::Infra_object::SqliteTable(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &infra_object::Infra_object::CustomInfra(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(100, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InfraObject {
        InfraObject::new()
    }

    fn clear(&mut self) {
        self.infra_object_class_type.clear();
        self.infra_object = ::std::option::Option::None;
        self.infra_object = ::std::option::Option::None;
        self.infra_object = ::std::option::Option::None;
        self.infra_object = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InfraObject {
        static instance: InfraObject = InfraObject {
            infra_object_class_type: ::std::string::String::new(),
            infra_object: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InfraObject {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InfraObject").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InfraObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InfraObject {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `InfraObject`
pub mod infra_object {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:feast.core.InfraObject.infra_object)
    pub enum Infra_object {
        // @@protoc_insertion_point(oneof_field:feast.core.InfraObject.dynamodb_table)
        DynamodbTable(super::super::DynamoDBTable::DynamoDBTable),
        // @@protoc_insertion_point(oneof_field:feast.core.InfraObject.datastore_table)
        DatastoreTable(super::super::DatastoreTable::DatastoreTable),
        // @@protoc_insertion_point(oneof_field:feast.core.InfraObject.sqlite_table)
        SqliteTable(super::super::SqliteTable::SqliteTable),
        // @@protoc_insertion_point(oneof_field:feast.core.InfraObject.custom_infra)
        CustomInfra(CustomInfra),
    }

    impl ::protobuf::Oneof for Infra_object {
    }

    impl ::protobuf::OneofFull for Infra_object {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::InfraObject as ::protobuf::MessageFull>::descriptor().oneof_by_name("infra_object").unwrap()).clone()
        }
    }

    impl Infra_object {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Infra_object>("infra_object")
        }
    }
    ///  Allows for custom infra objects to be added
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:feast.core.InfraObject.CustomInfra)
    pub struct CustomInfra {
        // message fields
        // @@protoc_insertion_point(field:feast.core.InfraObject.CustomInfra.field)
        pub field: ::std::vec::Vec<u8>,
        // special fields
        // @@protoc_insertion_point(special_field:feast.core.InfraObject.CustomInfra.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CustomInfra {
        fn default() -> &'a CustomInfra {
            <CustomInfra as ::protobuf::Message>::default_instance()
        }
    }

    impl CustomInfra {
        pub fn new() -> CustomInfra {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "field",
                |m: &CustomInfra| { &m.field },
                |m: &mut CustomInfra| { &mut m.field },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CustomInfra>(
                "InfraObject.CustomInfra",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for CustomInfra {
        const NAME: &'static str = "CustomInfra";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.field = is.read_bytes()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.field.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.field);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.field.is_empty() {
                os.write_bytes(1, &self.field)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CustomInfra {
            CustomInfra::new()
        }

        fn clear(&mut self) {
            self.field.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CustomInfra {
            static instance: CustomInfra = CustomInfra {
                field: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for CustomInfra {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("InfraObject.CustomInfra").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for CustomInfra {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CustomInfra {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cfeast/core/InfraObject.proto\x12\nfeast.core\x1a\x1ffeast/core/Dat\
    astoreTable.proto\x1a\x1efeast/core/DynamoDBTable.proto\x1a\x1cfeast/cor\
    e/SqliteTable.proto\"E\n\x05Infra\x12<\n\rinfra_objects\x18\x01\x20\x03(\
    \x0b2\x17.feast.core.InfraObjectR\x0cinfraObjects\"\x8c\x03\n\x0bInfraOb\
    ject\x125\n\x17infra_object_class_type\x18\x01\x20\x01(\tR\x14infraObjec\
    tClassType\x12B\n\x0edynamodb_table\x18\x02\x20\x01(\x0b2\x19.feast.core\
    .DynamoDBTableH\0R\rdynamodbTable\x12E\n\x0fdatastore_table\x18\x03\x20\
    \x01(\x0b2\x1a.feast.core.DatastoreTableH\0R\x0edatastoreTable\x12<\n\
    \x0csqlite_table\x18\x04\x20\x01(\x0b2\x17.feast.core.SqliteTableH\0R\
    \x0bsqliteTable\x12H\n\x0ccustom_infra\x18d\x20\x01(\x0b2#.feast.core.In\
    fraObject.CustomInfraH\0R\x0bcustomInfra\x1a#\n\x0bCustomInfra\x12\x14\n\
    \x05field\x18\x01\x20\x01(\x0cR\x05fieldB\x0e\n\x0cinfra_objectBU\n\x10f\
    east.proto.coreB\x10InfraObjectProtoZ/github.com/feast-dev/feast/go/prot\
    os/feast/coreJ\x8d\x0c\n\x06\x12\x04\x10\02\x01\n\xe0\x04\n\x01\x0c\x12\
    \x03\x10\0\x122\xd5\x04\n\x20*\x20Copyright\x202021\x20The\x20Feast\x20A\
    uthors\n\x20*\n\x20*\x20Licensed\x20under\x20the\x20Apache\x20License,\
    \x20Version\x202.0\x20(the\x20\"License\");\n\x20*\x20you\x20may\x20not\
    \x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20\
    License.\n\x20*\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20Lic\
    ense\x20at\n\x20*\n\x20*\x20\x20\x20\x20\x20https://www.apache.org/licen\
    ses/LICENSE-2.0\n\x20*\n\x20*\x20Unless\x20required\x20by\x20applicable\
    \x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20*\x20di\
    stributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\
    \x20\"AS\x20IS\"\x20BASIS,\n\x20*\x20WITHOUT\x20WARRANTIES\x20OR\x20COND\
    ITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20*\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20\
    governing\x20permissions\x20and\n\x20*\x20limitations\x20under\x20the\
    \x20License.\n\n\n\x08\n\x01\x02\x12\x03\x12\0\x13\n\x08\n\x01\x08\x12\
    \x03\x13\0)\n\t\n\x02\x08\x01\x12\x03\x13\0)\n\x08\n\x01\x08\x12\x03\x14\
    \01\n\t\n\x02\x08\x08\x12\x03\x14\01\n\x08\n\x01\x08\x12\x03\x15\0F\n\t\
    \n\x02\x08\x0b\x12\x03\x15\0F\n\t\n\x02\x03\0\x12\x03\x17\0)\n\t\n\x02\
    \x03\x01\x12\x03\x18\0(\n\t\n\x02\x03\x02\x12\x03\x19\0&\nI\n\x02\x04\0\
    \x12\x04\x1c\0\x1f\x01\x1a=\x20Represents\x20a\x20set\x20of\x20infrastru\
    cture\x20objects\x20managed\x20by\x20Feast\n\n\n\n\x03\x04\0\x01\x12\x03\
    \x1c\x08\r\n>\n\x04\x04\0\x02\0\x12\x03\x1e\x04+\x1a1\x20List\x20of\x20i\
    nfrastructure\x20objects\x20managed\x20by\x20Feast\n\n\x0c\n\x05\x04\0\
    \x02\0\x04\x12\x03\x1e\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x1e\r\
    \x18\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1e\x19&\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x1e)*\nH\n\x02\x04\x01\x12\x04\"\02\x01\x1a<\x20Represent\
    s\x20a\x20single\x20infrastructure\x20object\x20managed\x20by\x20Feast\n\
    \n\n\n\x03\x04\x01\x01\x12\x03\"\x08\x13\nH\n\x04\x04\x01\x02\0\x12\x03$\
    \x04'\x1a;\x20Represents\x20the\x20Python\x20class\x20for\x20the\x20infr\
    astructure\x20object\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03$\x04\n\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03$\x0b\"\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03$%&\n)\n\x04\x04\x01\x08\0\x12\x04'\x04,\x05\x1a\x1b\x20The\
    \x20infrastructure\x20object\n\n\x0c\n\x05\x04\x01\x08\0\x01\x12\x03'\n\
    \x16\n\x0b\n\x04\x04\x01\x02\x01\x12\x03(\x08)\n\x0c\n\x05\x04\x01\x02\
    \x01\x06\x12\x03(\x08\x15\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03(\x16$\
    \n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03('(\n\x0b\n\x04\x04\x01\x02\x02\
    \x12\x03)\x08+\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03)\x08\x16\n\x0c\n\
    \x05\x04\x01\x02\x02\x01\x12\x03)\x17&\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03))*\n\x0b\n\x04\x04\x01\x02\x03\x12\x03*\x08%\n\x0c\n\x05\x04\
    \x01\x02\x03\x06\x12\x03*\x08\x13\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\
    \x03*\x14\x20\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03*#$\n\x0b\n\x04\x04\
    \x01\x02\x04\x12\x03+\x08'\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\x03+\x08\
    \x13\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03+\x14\x20\n\x0c\n\x05\x04\
    \x01\x02\x04\x03\x12\x03+#&\n;\n\x04\x04\x01\x03\0\x12\x04/\x041\x05\x1a\
    -\x20Allows\x20for\x20custom\x20infra\x20objects\x20to\x20be\x20added\n\
    \n\x0c\n\x05\x04\x01\x03\0\x01\x12\x03/\x0c\x17\n\r\n\x06\x04\x01\x03\0\
    \x02\0\x12\x030\x08\x18\n\x0e\n\x07\x04\x01\x03\0\x02\0\x05\x12\x030\x08\
    \r\n\x0e\n\x07\x04\x01\x03\0\x02\0\x01\x12\x030\x0e\x13\n\x0e\n\x07\x04\
    \x01\x03\0\x02\0\x03\x12\x030\x16\x17b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::DatastoreTable::file_descriptor().clone());
            deps.push(super::DynamoDBTable::file_descriptor().clone());
            deps.push(super::SqliteTable::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Infra::generated_message_descriptor_data());
            messages.push(InfraObject::generated_message_descriptor_data());
            messages.push(infra_object::CustomInfra::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
