// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `feast/core/FeatureView.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.FeatureView)
pub struct FeatureView {
    // message fields
    ///  User-specified specifications of this feature view.
    // @@protoc_insertion_point(field:feast.core.FeatureView.spec)
    pub spec: ::protobuf::MessageField<FeatureViewSpec>,
    ///  System-populated metadata for this feature view.
    // @@protoc_insertion_point(field:feast.core.FeatureView.meta)
    pub meta: ::protobuf::MessageField<FeatureViewMeta>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.FeatureView.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FeatureView {
    fn default() -> &'a FeatureView {
        <FeatureView as ::protobuf::Message>::default_instance()
    }
}

impl FeatureView {
    pub fn new() -> FeatureView {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, FeatureViewSpec>(
            "spec",
            |m: &FeatureView| { &m.spec },
            |m: &mut FeatureView| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, FeatureViewMeta>(
            "meta",
            |m: &FeatureView| { &m.meta },
            |m: &mut FeatureView| { &mut m.meta },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FeatureView>(
            "FeatureView",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FeatureView {
    const NAME: &'static str = "FeatureView";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.meta)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.meta.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FeatureView {
        FeatureView::new()
    }

    fn clear(&mut self) {
        self.spec.clear();
        self.meta.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FeatureView {
        static instance: FeatureView = FeatureView {
            spec: ::protobuf::MessageField::none(),
            meta: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FeatureView {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FeatureView").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FeatureView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeatureView {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Next available id: 13
///  TODO(adchia): refactor common fields from this and ODFV into separate metadata proto
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.FeatureViewSpec)
pub struct FeatureViewSpec {
    // message fields
    ///  Name of the feature view. Must be unique. Not updated.
    // @@protoc_insertion_point(field:feast.core.FeatureViewSpec.name)
    pub name: ::std::string::String,
    ///  Name of Feast project that this feature view belongs to.
    // @@protoc_insertion_point(field:feast.core.FeatureViewSpec.project)
    pub project: ::std::string::String,
    ///  List of names of entities associated with this feature view.
    // @@protoc_insertion_point(field:feast.core.FeatureViewSpec.entities)
    pub entities: ::std::vec::Vec<::std::string::String>,
    ///  List of specifications for each feature defined as part of this feature view.
    // @@protoc_insertion_point(field:feast.core.FeatureViewSpec.features)
    pub features: ::std::vec::Vec<super::Feature::FeatureSpecV2>,
    ///  List of specifications for each entity defined as part of this feature view.
    // @@protoc_insertion_point(field:feast.core.FeatureViewSpec.entity_columns)
    pub entity_columns: ::std::vec::Vec<super::Feature::FeatureSpecV2>,
    ///  Description of the feature view.
    // @@protoc_insertion_point(field:feast.core.FeatureViewSpec.description)
    pub description: ::std::string::String,
    ///  User defined metadata
    // @@protoc_insertion_point(field:feast.core.FeatureViewSpec.tags)
    pub tags: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    ///  Owner of the feature view.
    // @@protoc_insertion_point(field:feast.core.FeatureViewSpec.owner)
    pub owner: ::std::string::String,
    ///  Features in this feature view can only be retrieved from online serving
    ///  younger than ttl. Ttl is measured as the duration of time between
    ///  the feature's event timestamp and when the feature is retrieved
    ///  Feature values outside ttl will be returned as unset values and indicated to end user
    // @@protoc_insertion_point(field:feast.core.FeatureViewSpec.ttl)
    pub ttl: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    ///  Batch/Offline DataSource where this view can retrieve offline feature data.
    // @@protoc_insertion_point(field:feast.core.FeatureViewSpec.batch_source)
    pub batch_source: ::protobuf::MessageField<super::DataSource::DataSource>,
    ///  Streaming DataSource from where this view can consume "online" feature data.
    // @@protoc_insertion_point(field:feast.core.FeatureViewSpec.stream_source)
    pub stream_source: ::protobuf::MessageField<super::DataSource::DataSource>,
    ///  Whether these features should be served online or not
    // @@protoc_insertion_point(field:feast.core.FeatureViewSpec.online)
    pub online: bool,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.FeatureViewSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FeatureViewSpec {
    fn default() -> &'a FeatureViewSpec {
        <FeatureViewSpec as ::protobuf::Message>::default_instance()
    }
}

impl FeatureViewSpec {
    pub fn new() -> FeatureViewSpec {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &FeatureViewSpec| { &m.name },
            |m: &mut FeatureViewSpec| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "project",
            |m: &FeatureViewSpec| { &m.project },
            |m: &mut FeatureViewSpec| { &mut m.project },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entities",
            |m: &FeatureViewSpec| { &m.entities },
            |m: &mut FeatureViewSpec| { &mut m.entities },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "features",
            |m: &FeatureViewSpec| { &m.features },
            |m: &mut FeatureViewSpec| { &mut m.features },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entity_columns",
            |m: &FeatureViewSpec| { &m.entity_columns },
            |m: &mut FeatureViewSpec| { &mut m.entity_columns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &FeatureViewSpec| { &m.description },
            |m: &mut FeatureViewSpec| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "tags",
            |m: &FeatureViewSpec| { &m.tags },
            |m: &mut FeatureViewSpec| { &mut m.tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "owner",
            |m: &FeatureViewSpec| { &m.owner },
            |m: &mut FeatureViewSpec| { &mut m.owner },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "ttl",
            |m: &FeatureViewSpec| { &m.ttl },
            |m: &mut FeatureViewSpec| { &mut m.ttl },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DataSource::DataSource>(
            "batch_source",
            |m: &FeatureViewSpec| { &m.batch_source },
            |m: &mut FeatureViewSpec| { &mut m.batch_source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DataSource::DataSource>(
            "stream_source",
            |m: &FeatureViewSpec| { &m.stream_source },
            |m: &mut FeatureViewSpec| { &mut m.stream_source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "online",
            |m: &FeatureViewSpec| { &m.online },
            |m: &mut FeatureViewSpec| { &mut m.online },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FeatureViewSpec>(
            "FeatureViewSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FeatureViewSpec {
    const NAME: &'static str = "FeatureViewSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.project = is.read_string()?;
                },
                26 => {
                    self.entities.push(is.read_string()?);
                },
                34 => {
                    self.features.push(is.read_message()?);
                },
                98 => {
                    self.entity_columns.push(is.read_message()?);
                },
                82 => {
                    self.description = is.read_string()?;
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.tags.insert(key, value);
                },
                90 => {
                    self.owner = is.read_string()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ttl)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.batch_source)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.stream_source)?;
                },
                64 => {
                    self.online = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.project.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.project);
        }
        for value in &self.entities {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.features {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.entity_columns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.description);
        }
        for (k, v) in &self.tags {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if !self.owner.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.owner);
        }
        if let Some(v) = self.ttl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.batch_source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.stream_source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.online != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.project.is_empty() {
            os.write_string(2, &self.project)?;
        }
        for v in &self.entities {
            os.write_string(3, &v)?;
        };
        for v in &self.features {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.entity_columns {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        if !self.description.is_empty() {
            os.write_string(10, &self.description)?;
        }
        for (k, v) in &self.tags {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if !self.owner.is_empty() {
            os.write_string(11, &self.owner)?;
        }
        if let Some(v) = self.ttl.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.batch_source.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.stream_source.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if self.online != false {
            os.write_bool(8, self.online)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FeatureViewSpec {
        FeatureViewSpec::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.project.clear();
        self.entities.clear();
        self.features.clear();
        self.entity_columns.clear();
        self.description.clear();
        self.tags.clear();
        self.owner.clear();
        self.ttl.clear();
        self.batch_source.clear();
        self.stream_source.clear();
        self.online = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FeatureViewSpec {
        static instance: ::protobuf::rt::Lazy<FeatureViewSpec> = ::protobuf::rt::Lazy::new();
        instance.get(FeatureViewSpec::new)
    }
}

impl ::protobuf::MessageFull for FeatureViewSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FeatureViewSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FeatureViewSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeatureViewSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.FeatureViewMeta)
pub struct FeatureViewMeta {
    // message fields
    ///  Time where this Feature View is created
    // @@protoc_insertion_point(field:feast.core.FeatureViewMeta.created_timestamp)
    pub created_timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  Time where this Feature View is last updated
    // @@protoc_insertion_point(field:feast.core.FeatureViewMeta.last_updated_timestamp)
    pub last_updated_timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  List of pairs (start_time, end_time) for which this feature view has been materialized.
    // @@protoc_insertion_point(field:feast.core.FeatureViewMeta.materialization_intervals)
    pub materialization_intervals: ::std::vec::Vec<MaterializationInterval>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.FeatureViewMeta.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FeatureViewMeta {
    fn default() -> &'a FeatureViewMeta {
        <FeatureViewMeta as ::protobuf::Message>::default_instance()
    }
}

impl FeatureViewMeta {
    pub fn new() -> FeatureViewMeta {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "created_timestamp",
            |m: &FeatureViewMeta| { &m.created_timestamp },
            |m: &mut FeatureViewMeta| { &mut m.created_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "last_updated_timestamp",
            |m: &FeatureViewMeta| { &m.last_updated_timestamp },
            |m: &mut FeatureViewMeta| { &mut m.last_updated_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "materialization_intervals",
            |m: &FeatureViewMeta| { &m.materialization_intervals },
            |m: &mut FeatureViewMeta| { &mut m.materialization_intervals },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FeatureViewMeta>(
            "FeatureViewMeta",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FeatureViewMeta {
    const NAME: &'static str = "FeatureViewMeta";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.created_timestamp)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_updated_timestamp)?;
                },
                26 => {
                    self.materialization_intervals.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.created_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.last_updated_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.materialization_intervals {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.created_timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.last_updated_timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.materialization_intervals {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FeatureViewMeta {
        FeatureViewMeta::new()
    }

    fn clear(&mut self) {
        self.created_timestamp.clear();
        self.last_updated_timestamp.clear();
        self.materialization_intervals.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FeatureViewMeta {
        static instance: FeatureViewMeta = FeatureViewMeta {
            created_timestamp: ::protobuf::MessageField::none(),
            last_updated_timestamp: ::protobuf::MessageField::none(),
            materialization_intervals: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FeatureViewMeta {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FeatureViewMeta").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FeatureViewMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeatureViewMeta {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.MaterializationInterval)
pub struct MaterializationInterval {
    // message fields
    // @@protoc_insertion_point(field:feast.core.MaterializationInterval.start_time)
    pub start_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:feast.core.MaterializationInterval.end_time)
    pub end_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.MaterializationInterval.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MaterializationInterval {
    fn default() -> &'a MaterializationInterval {
        <MaterializationInterval as ::protobuf::Message>::default_instance()
    }
}

impl MaterializationInterval {
    pub fn new() -> MaterializationInterval {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "start_time",
            |m: &MaterializationInterval| { &m.start_time },
            |m: &mut MaterializationInterval| { &mut m.start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "end_time",
            |m: &MaterializationInterval| { &m.end_time },
            |m: &mut MaterializationInterval| { &mut m.end_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MaterializationInterval>(
            "MaterializationInterval",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MaterializationInterval {
    const NAME: &'static str = "MaterializationInterval";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.start_time)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.end_time)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.start_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.start_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.end_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MaterializationInterval {
        MaterializationInterval::new()
    }

    fn clear(&mut self) {
        self.start_time.clear();
        self.end_time.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MaterializationInterval {
        static instance: MaterializationInterval = MaterializationInterval {
            start_time: ::protobuf::MessageField::none(),
            end_time: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MaterializationInterval {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MaterializationInterval").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MaterializationInterval {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MaterializationInterval {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cfeast/core/FeatureView.proto\x12\nfeast.core\x1a\x1egoogle/protobu\
    f/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bfeast/cor\
    e/DataSource.proto\x1a\x18feast/core/Feature.proto\"o\n\x0bFeatureView\
    \x12/\n\x04spec\x18\x01\x20\x01(\x0b2\x1b.feast.core.FeatureViewSpecR\
    \x04spec\x12/\n\x04meta\x18\x02\x20\x01(\x0b2\x1b.feast.core.FeatureView\
    MetaR\x04meta\"\xbd\x04\n\x0fFeatureViewSpec\x12\x12\n\x04name\x18\x01\
    \x20\x01(\tR\x04name\x12\x18\n\x07project\x18\x02\x20\x01(\tR\x07project\
    \x12\x1a\n\x08entities\x18\x03\x20\x03(\tR\x08entities\x125\n\x08feature\
    s\x18\x04\x20\x03(\x0b2\x19.feast.core.FeatureSpecV2R\x08features\x12@\n\
    \x0eentity_columns\x18\x0c\x20\x03(\x0b2\x19.feast.core.FeatureSpecV2R\r\
    entityColumns\x12\x20\n\x0bdescription\x18\n\x20\x01(\tR\x0bdescription\
    \x129\n\x04tags\x18\x05\x20\x03(\x0b2%.feast.core.FeatureViewSpec.TagsEn\
    tryR\x04tags\x12\x14\n\x05owner\x18\x0b\x20\x01(\tR\x05owner\x12+\n\x03t\
    tl\x18\x06\x20\x01(\x0b2\x19.google.protobuf.DurationR\x03ttl\x129\n\x0c\
    batch_source\x18\x07\x20\x01(\x0b2\x16.feast.core.DataSourceR\x0bbatchSo\
    urce\x12;\n\rstream_source\x18\t\x20\x01(\x0b2\x16.feast.core.DataSource\
    R\x0cstreamSource\x12\x16\n\x06online\x18\x08\x20\x01(\x08R\x06online\
    \x1a7\n\tTagsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\x8e\x02\n\x0fFeatureV\
    iewMeta\x12G\n\x11created_timestamp\x18\x01\x20\x01(\x0b2\x1a.google.pro\
    tobuf.TimestampR\x10createdTimestamp\x12P\n\x16last_updated_timestamp\
    \x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x14lastUpdatedTime\
    stamp\x12`\n\x19materialization_intervals\x18\x03\x20\x03(\x0b2#.feast.c\
    ore.MaterializationIntervalR\x18materializationIntervals\"\x8b\x01\n\x17\
    MaterializationInterval\x129\n\nstart_time\x18\x01\x20\x01(\x0b2\x1a.goo\
    gle.protobuf.TimestampR\tstartTime\x125\n\x08end_time\x18\x02\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\x07endTimeBU\n\x10feast.proto.coreB\
    \x10FeatureViewProtoZ/github.com/feast-dev/feast/go/protos/feast/coreJ\
    \xb5\x19\n\x06\x12\x04\x11\0]\x01\n\xc6\x04\n\x01\x0c\x12\x03\x11\0\x122\
    \xbb\x04\n\x20Copyright\x202020\x20The\x20Feast\x20Authors\n\n\x20Licens\
    ed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"\
    License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20i\
    n\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20\
    a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20https://w\
    ww.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20ap\
    plicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\
    \x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\n\x08\n\x01\x02\x12\x03\x12\0\x13\n\x08\n\x01\x08\x12\x03\x14\0F\n\
    \t\n\x02\x08\x0b\x12\x03\x14\0F\n\x08\n\x01\x08\x12\x03\x15\01\n\t\n\x02\
    \x08\x08\x12\x03\x15\01\n\x08\n\x01\x08\x12\x03\x16\0)\n\t\n\x02\x08\x01\
    \x12\x03\x16\0)\n\t\n\x02\x03\0\x12\x03\x18\0(\n\t\n\x02\x03\x01\x12\x03\
    \x19\0)\n\t\n\x02\x03\x02\x12\x03\x1a\0%\n\t\n\x02\x03\x03\x12\x03\x1b\0\
    \"\n\n\n\x02\x04\0\x12\x04\x1d\0#\x01\n\n\n\x03\x04\0\x01\x12\x03\x1d\
    \x08\x13\nB\n\x04\x04\0\x02\0\x12\x03\x1f\x04\x1d\x1a5\x20User-specified\
    \x20specifications\x20of\x20this\x20feature\x20view.\n\n\x0c\n\x05\x04\0\
    \x02\0\x06\x12\x03\x1f\x04\x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1f\
    \x14\x18\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1f\x1b\x1c\n?\n\x04\x04\0\
    \x02\x01\x12\x03\"\x04\x1d\x1a2\x20System-populated\x20metadata\x20for\
    \x20this\x20feature\x20view.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\"\
    \x04\x13\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\"\x14\x18\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03\"\x1b\x1c\ny\n\x02\x04\x01\x12\x04'\0M\x01\x1am\
    \x20Next\x20available\x20id:\x2013\n\x20TODO(adchia):\x20refactor\x20com\
    mon\x20fields\x20from\x20this\x20and\x20ODFV\x20into\x20separate\x20meta\
    data\x20proto\n\n\n\n\x03\x04\x01\x01\x12\x03'\x08\x17\nE\n\x04\x04\x01\
    \x02\0\x12\x03)\x04\x14\x1a8\x20Name\x20of\x20the\x20feature\x20view.\
    \x20Must\x20be\x20unique.\x20Not\x20updated.\n\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03)\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03)\x0b\x0f\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03)\x12\x13\nG\n\x04\x04\x01\x02\x01\x12\
    \x03,\x04\x17\x1a:\x20Name\x20of\x20Feast\x20project\x20that\x20this\x20\
    feature\x20view\x20belongs\x20to.\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\
    \x03,\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03,\x0b\x12\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03,\x15\x16\nK\n\x04\x04\x01\x02\x02\x12\x03/\
    \x04!\x1a>\x20List\x20of\x20names\x20of\x20entities\x20associated\x20wit\
    h\x20this\x20feature\x20view.\n\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03/\
    \x04\x0c\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03/\r\x13\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03/\x14\x1c\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\
    \x03/\x1f\x20\n\\\n\x04\x04\x01\x02\x03\x12\x032\x04(\x1aO\x20List\x20of\
    \x20specifications\x20for\x20each\x20feature\x20defined\x20as\x20part\
    \x20of\x20this\x20feature\x20view.\n\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\
    \x032\x04\x0c\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x032\r\x1a\n\x0c\n\x05\
    \x04\x01\x02\x03\x01\x12\x032\x1b#\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\
    \x032&'\n[\n\x04\x04\x01\x02\x04\x12\x035\x04/\x1aN\x20List\x20of\x20spe\
    cifications\x20for\x20each\x20entity\x20defined\x20as\x20part\x20of\x20t\
    his\x20feature\x20view.\n\n\x0c\n\x05\x04\x01\x02\x04\x04\x12\x035\x04\
    \x0c\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\x035\r\x1a\n\x0c\n\x05\x04\x01\
    \x02\x04\x01\x12\x035\x1b)\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x035,.\n/\
    \n\x04\x04\x01\x02\x05\x12\x038\x04\x1c\x1a\"\x20Description\x20of\x20th\
    e\x20feature\x20view.\n\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x038\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x05\x01\x12\x038\x0b\x16\n\x0c\n\x05\x04\x01\x02\
    \x05\x03\x12\x038\x19\x1b\n$\n\x04\x04\x01\x02\x06\x12\x03;\x04\x20\x1a\
    \x17\x20User\x20defined\x20metadata\n\n\x0c\n\x05\x04\x01\x02\x06\x06\
    \x12\x03;\x04\x16\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03;\x17\x1b\n\x0c\
    \n\x05\x04\x01\x02\x06\x03\x12\x03;\x1e\x1f\n)\n\x04\x04\x01\x02\x07\x12\
    \x03>\x04\x16\x1a\x1c\x20Owner\x20of\x20the\x20feature\x20view.\n\n\x0c\
    \n\x05\x04\x01\x02\x07\x05\x12\x03>\x04\n\n\x0c\n\x05\x04\x01\x02\x07\
    \x01\x12\x03>\x0b\x10\n\x0c\n\x05\x04\x01\x02\x07\x03\x12\x03>\x13\x15\n\
    \xb2\x02\n\x04\x04\x01\x02\x08\x12\x03D\x04%\x1a\xa4\x02\x20Features\x20\
    in\x20this\x20feature\x20view\x20can\x20only\x20be\x20retrieved\x20from\
    \x20online\x20serving\n\x20younger\x20than\x20ttl.\x20Ttl\x20is\x20measu\
    red\x20as\x20the\x20duration\x20of\x20time\x20between\n\x20the\x20featur\
    e's\x20event\x20timestamp\x20and\x20when\x20the\x20feature\x20is\x20retr\
    ieved\n\x20Feature\x20values\x20outside\x20ttl\x20will\x20be\x20returned\
    \x20as\x20unset\x20values\x20and\x20indicated\x20to\x20end\x20user\n\n\
    \x0c\n\x05\x04\x01\x02\x08\x06\x12\x03D\x04\x1c\n\x0c\n\x05\x04\x01\x02\
    \x08\x01\x12\x03D\x1d\x20\n\x0c\n\x05\x04\x01\x02\x08\x03\x12\x03D#$\nZ\
    \n\x04\x04\x01\x02\t\x12\x03G\x04\x20\x1aM\x20Batch/Offline\x20DataSourc\
    e\x20where\x20this\x20view\x20can\x20retrieve\x20offline\x20feature\x20d\
    ata.\n\n\x0c\n\x05\x04\x01\x02\t\x06\x12\x03G\x04\x0e\n\x0c\n\x05\x04\
    \x01\x02\t\x01\x12\x03G\x0f\x1b\n\x0c\n\x05\x04\x01\x02\t\x03\x12\x03G\
    \x1e\x1f\n[\n\x04\x04\x01\x02\n\x12\x03I\x04!\x1aN\x20Streaming\x20DataS\
    ource\x20from\x20where\x20this\x20view\x20can\x20consume\x20\"online\"\
    \x20feature\x20data.\n\n\x0c\n\x05\x04\x01\x02\n\x06\x12\x03I\x04\x0e\n\
    \x0c\n\x05\x04\x01\x02\n\x01\x12\x03I\x0f\x1c\n\x0c\n\x05\x04\x01\x02\n\
    \x03\x12\x03I\x1f\x20\nD\n\x04\x04\x01\x02\x0b\x12\x03L\x04\x14\x1a7\x20\
    Whether\x20these\x20features\x20should\x20be\x20served\x20online\x20or\
    \x20not\n\n\x0c\n\x05\x04\x01\x02\x0b\x05\x12\x03L\x04\x08\n\x0c\n\x05\
    \x04\x01\x02\x0b\x01\x12\x03L\t\x0f\n\x0c\n\x05\x04\x01\x02\x0b\x03\x12\
    \x03L\x12\x13\n\n\n\x02\x04\x02\x12\x04O\0X\x01\n\n\n\x03\x04\x02\x01\
    \x12\x03O\x08\x17\n6\n\x04\x04\x02\x02\0\x12\x03Q\x044\x1a)\x20Time\x20w\
    here\x20this\x20Feature\x20View\x20is\x20created\n\n\x0c\n\x05\x04\x02\
    \x02\0\x06\x12\x03Q\x04\x1d\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03Q\x1e/\
    \n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03Q23\n;\n\x04\x04\x02\x02\x01\x12\
    \x03T\x049\x1a.\x20Time\x20where\x20this\x20Feature\x20View\x20is\x20las\
    t\x20updated\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03T\x04\x1d\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03T\x1e4\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x03T78\nf\n\x04\x04\x02\x02\x02\x12\x03W\x04C\x1aY\x20List\x20of\
    \x20pairs\x20(start_time,\x20end_time)\x20for\x20which\x20this\x20featur\
    e\x20view\x20has\x20been\x20materialized.\n\n\x0c\n\x05\x04\x02\x02\x02\
    \x04\x12\x03W\x04\x0c\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03W\r$\n\x0c\
    \n\x05\x04\x02\x02\x02\x01\x12\x03W%>\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03WAB\n\n\n\x02\x04\x03\x12\x04Z\0]\x01\n\n\n\x03\x04\x03\x01\x12\
    \x03Z\x08\x1f\n\x0b\n\x04\x04\x03\x02\0\x12\x03[\x04-\n\x0c\n\x05\x04\
    \x03\x02\0\x06\x12\x03[\x04\x1d\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03[\
    \x1e(\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03[+,\n\x0b\n\x04\x04\x03\x02\
    \x01\x12\x03\\\x04+\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03\\\x04\x1d\n\
    \x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\\\x1e&\n\x0c\n\x05\x04\x03\x02\
    \x01\x03\x12\x03\\)*b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::DataSource::file_descriptor().clone());
            deps.push(super::Feature::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(FeatureView::generated_message_descriptor_data());
            messages.push(FeatureViewSpec::generated_message_descriptor_data());
            messages.push(FeatureViewMeta::generated_message_descriptor_data());
            messages.push(MaterializationInterval::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
