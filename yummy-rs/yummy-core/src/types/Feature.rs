// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `feast/core/Feature.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.FeatureSpecV2)
pub struct FeatureSpecV2 {
    // message fields
    ///  Name of the feature. Not updatable.
    // @@protoc_insertion_point(field:feast.core.FeatureSpecV2.name)
    pub name: ::std::string::String,
    ///  Value type of the feature. Not updatable.
    // @@protoc_insertion_point(field:feast.core.FeatureSpecV2.value_type)
    pub value_type: ::protobuf::EnumOrUnknown<super::Value::value_type::Enum>,
    ///  Tags for user defined metadata on a feature
    // @@protoc_insertion_point(field:feast.core.FeatureSpecV2.tags)
    pub tags: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.FeatureSpecV2.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FeatureSpecV2 {
    fn default() -> &'a FeatureSpecV2 {
        <FeatureSpecV2 as ::protobuf::Message>::default_instance()
    }
}

impl FeatureSpecV2 {
    pub fn new() -> FeatureSpecV2 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &FeatureSpecV2| { &m.name },
            |m: &mut FeatureSpecV2| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value_type",
            |m: &FeatureSpecV2| { &m.value_type },
            |m: &mut FeatureSpecV2| { &mut m.value_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "tags",
            |m: &FeatureSpecV2| { &m.tags },
            |m: &mut FeatureSpecV2| { &mut m.tags },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FeatureSpecV2>(
            "FeatureSpecV2",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FeatureSpecV2 {
    const NAME: &'static str = "FeatureSpecV2";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.value_type = is.read_enum_or_unknown()?;
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.tags.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.value_type != ::protobuf::EnumOrUnknown::new(super::Value::value_type::Enum::INVALID) {
            my_size += ::protobuf::rt::int32_size(2, self.value_type.value());
        }
        for (k, v) in &self.tags {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.value_type != ::protobuf::EnumOrUnknown::new(super::Value::value_type::Enum::INVALID) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.value_type))?;
        }
        for (k, v) in &self.tags {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FeatureSpecV2 {
        FeatureSpecV2::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.value_type = ::protobuf::EnumOrUnknown::new(super::Value::value_type::Enum::INVALID);
        self.tags.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FeatureSpecV2 {
        static instance: ::protobuf::rt::Lazy<FeatureSpecV2> = ::protobuf::rt::Lazy::new();
        instance.get(FeatureSpecV2::new)
    }
}

impl ::protobuf::MessageFull for FeatureSpecV2 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FeatureSpecV2").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FeatureSpecV2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeatureSpecV2 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18feast/core/Feature.proto\x12\nfeast.core\x1a\x17feast/types/Value.\
    proto\"\xd1\x01\n\rFeatureSpecV2\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x12:\n\nvalue_type\x18\x02\x20\x01(\x0e2\x1b.feast.types.ValueT\
    ype.EnumR\tvalueType\x127\n\x04tags\x18\x03\x20\x03(\x0b2#.feast.core.Fe\
    atureSpecV2.TagsEntryR\x04tags\x1a7\n\tTagsEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\
    \x028\x01BQ\n\x10feast.proto.coreB\x0cFeatureProtoZ/github.com/feast-dev\
    /feast/go/protos/feast/coreJ\xe5\x07\n\x06\x12\x04\x10\0#\x01\n\xc6\x04\
    \n\x01\x0c\x12\x03\x10\0\x122\xbb\x04\n\x20Copyright\x202020\x20The\x20F\
    east\x20Authors\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\
    \x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20us\
    e\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20Licens\
    e.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\
    \n\n\x20\x20\x20\x20\x20https://www.apache.org/licenses/LICENSE-2.0\n\n\
    \x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\
    \x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\x20Licen\
    se\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHO\
    UT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20\
    express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20sp\
    ecific\x20language\x20governing\x20permissions\x20and\n\x20limitations\
    \x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x13\n\x08\
    \n\x01\x08\x12\x03\x14\0F\n\t\n\x02\x08\x0b\x12\x03\x14\0F\n\x08\n\x01\
    \x08\x12\x03\x15\0-\n\t\n\x02\x08\x08\x12\x03\x15\0-\n\x08\n\x01\x08\x12\
    \x03\x16\0)\n\t\n\x02\x08\x01\x12\x03\x16\0)\n\t\n\x02\x03\0\x12\x03\x18\
    \0!\n\n\n\x02\x04\0\x12\x04\x1a\0#\x01\n\n\n\x03\x04\0\x01\x12\x03\x1a\
    \x08\x15\n2\n\x04\x04\0\x02\0\x12\x03\x1c\x04\x14\x1a%\x20Name\x20of\x20\
    the\x20feature.\x20Not\x20updatable.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03\x1c\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1c\x0b\x0f\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x1c\x12\x13\n8\n\x04\x04\0\x02\x01\x12\x03\
    \x1f\x04.\x1a+\x20Value\x20type\x20of\x20the\x20feature.\x20Not\x20updat\
    able.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x1f\x04\x1e\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\x1f\x1f)\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\x1f,-\n:\n\x04\x04\0\x02\x02\x12\x03\"\x04\x20\x1a-\x20Tags\x20for\
    \x20user\x20defined\x20metadata\x20on\x20a\x20feature\n\n\x0c\n\x05\x04\
    \0\x02\x02\x06\x12\x03\"\x04\x16\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\"\
    \x17\x1b\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\"\x1e\x1fb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::Value::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FeatureSpecV2::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
