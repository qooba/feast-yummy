// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `feast/core/ValidationProfile.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.GEValidationProfiler)
pub struct GEValidationProfiler {
    // message fields
    // @@protoc_insertion_point(field:feast.core.GEValidationProfiler.profiler)
    pub profiler: ::protobuf::MessageField<gevalidation_profiler::UserDefinedProfiler>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.GEValidationProfiler.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GEValidationProfiler {
    fn default() -> &'a GEValidationProfiler {
        <GEValidationProfiler as ::protobuf::Message>::default_instance()
    }
}

impl GEValidationProfiler {
    pub fn new() -> GEValidationProfiler {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, gevalidation_profiler::UserDefinedProfiler>(
            "profiler",
            |m: &GEValidationProfiler| { &m.profiler },
            |m: &mut GEValidationProfiler| { &mut m.profiler },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GEValidationProfiler>(
            "GEValidationProfiler",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GEValidationProfiler {
    const NAME: &'static str = "GEValidationProfiler";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.profiler)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.profiler.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.profiler.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GEValidationProfiler {
        GEValidationProfiler::new()
    }

    fn clear(&mut self) {
        self.profiler.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GEValidationProfiler {
        static instance: GEValidationProfiler = GEValidationProfiler {
            profiler: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GEValidationProfiler {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GEValidationProfiler").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GEValidationProfiler {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GEValidationProfiler {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GEValidationProfiler`
pub mod gevalidation_profiler {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:feast.core.GEValidationProfiler.UserDefinedProfiler)
    pub struct UserDefinedProfiler {
        // message fields
        ///  The python-syntax function body (serialized by dill)
        // @@protoc_insertion_point(field:feast.core.GEValidationProfiler.UserDefinedProfiler.body)
        pub body: ::std::vec::Vec<u8>,
        // special fields
        // @@protoc_insertion_point(special_field:feast.core.GEValidationProfiler.UserDefinedProfiler.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a UserDefinedProfiler {
        fn default() -> &'a UserDefinedProfiler {
            <UserDefinedProfiler as ::protobuf::Message>::default_instance()
        }
    }

    impl UserDefinedProfiler {
        pub fn new() -> UserDefinedProfiler {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "body",
                |m: &UserDefinedProfiler| { &m.body },
                |m: &mut UserDefinedProfiler| { &mut m.body },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UserDefinedProfiler>(
                "GEValidationProfiler.UserDefinedProfiler",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for UserDefinedProfiler {
        const NAME: &'static str = "UserDefinedProfiler";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.body = is.read_bytes()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.body.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.body);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.body.is_empty() {
                os.write_bytes(1, &self.body)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> UserDefinedProfiler {
            UserDefinedProfiler::new()
        }

        fn clear(&mut self) {
            self.body.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static UserDefinedProfiler {
            static instance: UserDefinedProfiler = UserDefinedProfiler {
                body: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for UserDefinedProfiler {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("GEValidationProfiler.UserDefinedProfiler").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for UserDefinedProfiler {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for UserDefinedProfiler {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.GEValidationProfile)
pub struct GEValidationProfile {
    // message fields
    ///  JSON-serialized ExpectationSuite object
    // @@protoc_insertion_point(field:feast.core.GEValidationProfile.expectation_suite)
    pub expectation_suite: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.GEValidationProfile.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GEValidationProfile {
    fn default() -> &'a GEValidationProfile {
        <GEValidationProfile as ::protobuf::Message>::default_instance()
    }
}

impl GEValidationProfile {
    pub fn new() -> GEValidationProfile {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expectation_suite",
            |m: &GEValidationProfile| { &m.expectation_suite },
            |m: &mut GEValidationProfile| { &mut m.expectation_suite },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GEValidationProfile>(
            "GEValidationProfile",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GEValidationProfile {
    const NAME: &'static str = "GEValidationProfile";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.expectation_suite = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.expectation_suite.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.expectation_suite);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.expectation_suite.is_empty() {
            os.write_bytes(1, &self.expectation_suite)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GEValidationProfile {
        GEValidationProfile::new()
    }

    fn clear(&mut self) {
        self.expectation_suite.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GEValidationProfile {
        static instance: GEValidationProfile = GEValidationProfile {
            expectation_suite: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GEValidationProfile {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GEValidationProfile").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GEValidationProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GEValidationProfile {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.ValidationReference)
pub struct ValidationReference {
    // message fields
    ///  Unique name of validation reference within the project
    // @@protoc_insertion_point(field:feast.core.ValidationReference.name)
    pub name: ::std::string::String,
    ///  Name of saved dataset used as reference dataset
    // @@protoc_insertion_point(field:feast.core.ValidationReference.reference_dataset_name)
    pub reference_dataset_name: ::std::string::String,
    ///  Name of Feast project that this object source belongs to
    // @@protoc_insertion_point(field:feast.core.ValidationReference.project)
    pub project: ::std::string::String,
    ///  Description of the validation reference
    // @@protoc_insertion_point(field:feast.core.ValidationReference.description)
    pub description: ::std::string::String,
    ///  User defined metadata
    // @@protoc_insertion_point(field:feast.core.ValidationReference.tags)
    pub tags: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // message oneof groups
    pub profiler: ::std::option::Option<validation_reference::Profiler>,
    pub cached_profile: ::std::option::Option<validation_reference::Cached_profile>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.ValidationReference.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ValidationReference {
    fn default() -> &'a ValidationReference {
        <ValidationReference as ::protobuf::Message>::default_instance()
    }
}

impl ValidationReference {
    pub fn new() -> ValidationReference {
        ::std::default::Default::default()
    }

    // .feast.core.GEValidationProfiler ge_profiler = 6;

    pub fn ge_profiler(&self) -> &GEValidationProfiler {
        match self.profiler {
            ::std::option::Option::Some(validation_reference::Profiler::GeProfiler(ref v)) => v,
            _ => <GEValidationProfiler as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ge_profiler(&mut self) {
        self.profiler = ::std::option::Option::None;
    }

    pub fn has_ge_profiler(&self) -> bool {
        match self.profiler {
            ::std::option::Option::Some(validation_reference::Profiler::GeProfiler(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ge_profiler(&mut self, v: GEValidationProfiler) {
        self.profiler = ::std::option::Option::Some(validation_reference::Profiler::GeProfiler(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ge_profiler(&mut self) -> &mut GEValidationProfiler {
        if let ::std::option::Option::Some(validation_reference::Profiler::GeProfiler(_)) = self.profiler {
        } else {
            self.profiler = ::std::option::Option::Some(validation_reference::Profiler::GeProfiler(GEValidationProfiler::new()));
        }
        match self.profiler {
            ::std::option::Option::Some(validation_reference::Profiler::GeProfiler(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ge_profiler(&mut self) -> GEValidationProfiler {
        if self.has_ge_profiler() {
            match self.profiler.take() {
                ::std::option::Option::Some(validation_reference::Profiler::GeProfiler(v)) => v,
                _ => panic!(),
            }
        } else {
            GEValidationProfiler::new()
        }
    }

    // .feast.core.GEValidationProfile ge_profile = 7;

    pub fn ge_profile(&self) -> &GEValidationProfile {
        match self.cached_profile {
            ::std::option::Option::Some(validation_reference::Cached_profile::GeProfile(ref v)) => v,
            _ => <GEValidationProfile as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ge_profile(&mut self) {
        self.cached_profile = ::std::option::Option::None;
    }

    pub fn has_ge_profile(&self) -> bool {
        match self.cached_profile {
            ::std::option::Option::Some(validation_reference::Cached_profile::GeProfile(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ge_profile(&mut self, v: GEValidationProfile) {
        self.cached_profile = ::std::option::Option::Some(validation_reference::Cached_profile::GeProfile(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ge_profile(&mut self) -> &mut GEValidationProfile {
        if let ::std::option::Option::Some(validation_reference::Cached_profile::GeProfile(_)) = self.cached_profile {
        } else {
            self.cached_profile = ::std::option::Option::Some(validation_reference::Cached_profile::GeProfile(GEValidationProfile::new()));
        }
        match self.cached_profile {
            ::std::option::Option::Some(validation_reference::Cached_profile::GeProfile(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ge_profile(&mut self) -> GEValidationProfile {
        if self.has_ge_profile() {
            match self.cached_profile.take() {
                ::std::option::Option::Some(validation_reference::Cached_profile::GeProfile(v)) => v,
                _ => panic!(),
            }
        } else {
            GEValidationProfile::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &ValidationReference| { &m.name },
            |m: &mut ValidationReference| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reference_dataset_name",
            |m: &ValidationReference| { &m.reference_dataset_name },
            |m: &mut ValidationReference| { &mut m.reference_dataset_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "project",
            |m: &ValidationReference| { &m.project },
            |m: &mut ValidationReference| { &mut m.project },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &ValidationReference| { &m.description },
            |m: &mut ValidationReference| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "tags",
            |m: &ValidationReference| { &m.tags },
            |m: &mut ValidationReference| { &mut m.tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, GEValidationProfiler>(
            "ge_profiler",
            ValidationReference::has_ge_profiler,
            ValidationReference::ge_profiler,
            ValidationReference::mut_ge_profiler,
            ValidationReference::set_ge_profiler,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, GEValidationProfile>(
            "ge_profile",
            ValidationReference::has_ge_profile,
            ValidationReference::ge_profile,
            ValidationReference::mut_ge_profile,
            ValidationReference::set_ge_profile,
        ));
        oneofs.push(validation_reference::Profiler::generated_oneof_descriptor_data());
        oneofs.push(validation_reference::Cached_profile::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValidationReference>(
            "ValidationReference",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ValidationReference {
    const NAME: &'static str = "ValidationReference";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.reference_dataset_name = is.read_string()?;
                },
                26 => {
                    self.project = is.read_string()?;
                },
                34 => {
                    self.description = is.read_string()?;
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.tags.insert(key, value);
                },
                50 => {
                    self.profiler = ::std::option::Option::Some(validation_reference::Profiler::GeProfiler(is.read_message()?));
                },
                58 => {
                    self.cached_profile = ::std::option::Option::Some(validation_reference::Cached_profile::GeProfile(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.reference_dataset_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.reference_dataset_name);
        }
        if !self.project.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.project);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.description);
        }
        for (k, v) in &self.tags {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let ::std::option::Option::Some(ref v) = self.profiler {
            match v {
                &validation_reference::Profiler::GeProfiler(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.cached_profile {
            match v {
                &validation_reference::Cached_profile::GeProfile(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.reference_dataset_name.is_empty() {
            os.write_string(2, &self.reference_dataset_name)?;
        }
        if !self.project.is_empty() {
            os.write_string(3, &self.project)?;
        }
        if !self.description.is_empty() {
            os.write_string(4, &self.description)?;
        }
        for (k, v) in &self.tags {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.profiler {
            match v {
                &validation_reference::Profiler::GeProfiler(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.cached_profile {
            match v {
                &validation_reference::Cached_profile::GeProfile(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ValidationReference {
        ValidationReference::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.reference_dataset_name.clear();
        self.project.clear();
        self.description.clear();
        self.tags.clear();
        self.profiler = ::std::option::Option::None;
        self.cached_profile = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ValidationReference {
        static instance: ::protobuf::rt::Lazy<ValidationReference> = ::protobuf::rt::Lazy::new();
        instance.get(ValidationReference::new)
    }
}

impl ::protobuf::MessageFull for ValidationReference {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ValidationReference").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ValidationReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidationReference {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ValidationReference`
pub mod validation_reference {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:feast.core.ValidationReference.profiler)
    pub enum Profiler {
        // @@protoc_insertion_point(oneof_field:feast.core.ValidationReference.ge_profiler)
        GeProfiler(super::GEValidationProfiler),
    }

    impl ::protobuf::Oneof for Profiler {
    }

    impl ::protobuf::OneofFull for Profiler {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ValidationReference as ::protobuf::MessageFull>::descriptor().oneof_by_name("profiler").unwrap()).clone()
        }
    }

    impl Profiler {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Profiler>("profiler")
        }
    }

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:feast.core.ValidationReference.cached_profile)
    pub enum Cached_profile {
        // @@protoc_insertion_point(oneof_field:feast.core.ValidationReference.ge_profile)
        GeProfile(super::GEValidationProfile),
    }

    impl ::protobuf::Oneof for Cached_profile {
    }

    impl ::protobuf::OneofFull for Cached_profile {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ValidationReference as ::protobuf::MessageFull>::descriptor().oneof_by_name("cached_profile").unwrap()).clone()
        }
    }

    impl Cached_profile {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Cached_profile>("cached_profile")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"feast/core/ValidationProfile.proto\x12\nfeast.core\"\x93\x01\n\x14GE\
    ValidationProfiler\x12P\n\x08profiler\x18\x01\x20\x01(\x0b24.feast.core.\
    GEValidationProfiler.UserDefinedProfilerR\x08profiler\x1a)\n\x13UserDefi\
    nedProfiler\x12\x12\n\x04body\x18\x01\x20\x01(\x0cR\x04body\"B\n\x13GEVa\
    lidationProfile\x12+\n\x11expectation_suite\x18\x01\x20\x01(\x0cR\x10exp\
    ectationSuite\"\xb8\x03\n\x13ValidationReference\x12\x12\n\x04name\x18\
    \x01\x20\x01(\tR\x04name\x124\n\x16reference_dataset_name\x18\x02\x20\
    \x01(\tR\x14referenceDatasetName\x12\x18\n\x07project\x18\x03\x20\x01(\t\
    R\x07project\x12\x20\n\x0bdescription\x18\x04\x20\x01(\tR\x0bdescription\
    \x12=\n\x04tags\x18\x05\x20\x03(\x0b2).feast.core.ValidationReference.Ta\
    gsEntryR\x04tags\x12C\n\x0bge_profiler\x18\x06\x20\x01(\x0b2\x20.feast.c\
    ore.GEValidationProfilerH\0R\ngeProfiler\x12@\n\nge_profile\x18\x07\x20\
    \x01(\x0b2\x1f.feast.core.GEValidationProfileH\x01R\tgeProfile\x1a7\n\tT\
    agsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\tR\x05value:\x028\x01B\n\n\x08profilerB\x10\n\x0ecache\
    d_profileBV\n\x10feast.proto.coreB\x11ValidationProfileZ/github.com/feas\
    t-dev/feast/go/protos/feast/coreJ\x95\x0e\n\x06\x12\x04\x11\0;\x01\n\xc6\
    \x04\n\x01\x0c\x12\x03\x11\0\x122\xbb\x04\n\x20Copyright\x202021\x20The\
    \x20Feast\x20Authors\n\n\x20Licensed\x20under\x20the\x20Apache\x20Licens\
    e,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20\
    use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20Lice\
    nse.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20a\
    t\n\n\x20\x20\x20\x20\x20https://www.apache.org/licenses/LICENSE-2.0\n\n\
    \x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\
    \x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\x20Licen\
    se\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHO\
    UT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20\
    express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20sp\
    ecific\x20language\x20governing\x20permissions\x20and\n\x20limitations\
    \x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x13\0\x13\n\x08\
    \n\x01\x08\x12\x03\x14\0)\n\t\n\x02\x08\x01\x12\x03\x14\0)\n\x08\n\x01\
    \x08\x12\x03\x15\02\n\t\n\x02\x08\x08\x12\x03\x15\02\n\x08\n\x01\x08\x12\
    \x03\x16\0F\n\t\n\x02\x08\x0b\x12\x03\x16\0F\n\n\n\x02\x04\0\x12\x04\x18\
    \0\x1f\x01\n\n\n\x03\x04\0\x01\x12\x03\x18\x08\x1c\n\x0c\n\x04\x04\0\x03\
    \0\x12\x04\x19\x02\x1c\x03\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\x19\n\x1d\
    \nE\n\x06\x04\0\x03\0\x02\0\x12\x03\x1b\x06\x15\x1a6\x20The\x20python-sy\
    ntax\x20function\x20body\x20(serialized\x20by\x20dill)\n\n\x0e\n\x07\x04\
    \0\x03\0\x02\0\x05\x12\x03\x1b\x06\x0b\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\
    \x12\x03\x1b\x0c\x10\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x1b\x13\
    \x14\n\x0b\n\x04\x04\0\x02\0\x12\x03\x1e\x02#\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x03\x1e\x02\x15\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1e\x16\x1e\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1e!\"\n\n\n\x02\x04\x01\x12\x04!\0\
    $\x01\n\n\n\x03\x04\x01\x01\x12\x03!\x08\x1b\n6\n\x04\x04\x01\x02\0\x12\
    \x03#\x02\x1e\x1a)\x20JSON-serialized\x20ExpectationSuite\x20object\n\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03#\x02\x07\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03#\x08\x19\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03#\x1c\x1d\n\n\
    \n\x02\x04\x02\x12\x04&\0;\x01\n\n\n\x03\x04\x02\x01\x12\x03&\x08\x1b\nE\
    \n\x04\x04\x02\x02\0\x12\x03(\x02\x12\x1a8\x20Unique\x20name\x20of\x20va\
    lidation\x20reference\x20within\x20the\x20project\n\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03(\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03(\t\r\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03(\x10\x11\n>\n\x04\x04\x02\x02\x01\
    \x12\x03*\x02$\x1a1\x20Name\x20of\x20saved\x20dataset\x20used\x20as\x20r\
    eference\x20dataset\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03*\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03*\t\x1f\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03*\"#\nG\n\x04\x04\x02\x02\x02\x12\x03,\x02\x15\x1a:\x20N\
    ame\x20of\x20Feast\x20project\x20that\x20this\x20object\x20source\x20bel\
    ongs\x20to\n\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03,\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03,\t\x10\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03,\x13\x14\n6\n\x04\x04\x02\x02\x03\x12\x03.\x02\x19\x1a)\x20Desc\
    ription\x20of\x20the\x20validation\x20reference\n\n\x0c\n\x05\x04\x02\
    \x02\x03\x05\x12\x03.\x02\x08\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03.\t\
    \x14\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03.\x17\x18\n$\n\x04\x04\x02\
    \x02\x04\x12\x030\x02\x1e\x1a\x17\x20User\x20defined\x20metadata\n\n\x0c\
    \n\x05\x04\x02\x02\x04\x06\x12\x030\x02\x14\n\x0c\n\x05\x04\x02\x02\x04\
    \x01\x12\x030\x15\x19\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x030\x1c\x1d\n\
    #\n\x04\x04\x02\x08\0\x12\x043\x025\x03\x1a\x15\x20validation\x20profile\
    r\n\n\x0c\n\x05\x04\x02\x08\0\x01\x12\x033\x08\x10\n\x0b\n\x04\x04\x02\
    \x02\x05\x12\x034\x04)\n\x0c\n\x05\x04\x02\x02\x05\x06\x12\x034\x04\x18\
    \n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x034\x19$\n\x0c\n\x05\x04\x02\x02\
    \x05\x03\x12\x034'(\nV\n\x04\x04\x02\x08\x01\x12\x048\x02:\x03\x1aH\x20(\
    optional)\x20cached\x20validation\x20profile\x20(to\x20avoid\x20constant\
    \x20recalculation)\n\n\x0c\n\x05\x04\x02\x08\x01\x01\x12\x038\x08\x16\n\
    \x0b\n\x04\x04\x02\x02\x06\x12\x039\x04'\n\x0c\n\x05\x04\x02\x02\x06\x06\
    \x12\x039\x04\x17\n\x0c\n\x05\x04\x02\x02\x06\x01\x12\x039\x18\"\n\x0c\n\
    \x05\x04\x02\x02\x06\x03\x12\x039%&b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(GEValidationProfiler::generated_message_descriptor_data());
            messages.push(GEValidationProfile::generated_message_descriptor_data());
            messages.push(ValidationReference::generated_message_descriptor_data());
            messages.push(gevalidation_profiler::UserDefinedProfiler::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
