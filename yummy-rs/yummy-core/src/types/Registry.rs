// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `feast/core/Registry.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

///  Next id: 16
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.Registry)
pub struct Registry {
    // message fields
    // @@protoc_insertion_point(field:feast.core.Registry.entities)
    pub entities: ::std::vec::Vec<super::Entity::Entity>,
    // @@protoc_insertion_point(field:feast.core.Registry.feature_tables)
    pub feature_tables: ::std::vec::Vec<super::FeatureTable::FeatureTable>,
    // @@protoc_insertion_point(field:feast.core.Registry.feature_views)
    pub feature_views: ::std::vec::Vec<super::FeatureView::FeatureView>,
    // @@protoc_insertion_point(field:feast.core.Registry.data_sources)
    pub data_sources: ::std::vec::Vec<super::DataSource::DataSource>,
    // @@protoc_insertion_point(field:feast.core.Registry.on_demand_feature_views)
    pub on_demand_feature_views: ::std::vec::Vec<super::OnDemandFeatureView::OnDemandFeatureView>,
    // @@protoc_insertion_point(field:feast.core.Registry.request_feature_views)
    pub request_feature_views: ::std::vec::Vec<super::RequestFeatureView::RequestFeatureView>,
    // @@protoc_insertion_point(field:feast.core.Registry.stream_feature_views)
    pub stream_feature_views: ::std::vec::Vec<super::StreamFeatureView::StreamFeatureView>,
    // @@protoc_insertion_point(field:feast.core.Registry.feature_services)
    pub feature_services: ::std::vec::Vec<super::FeatureService::FeatureService>,
    // @@protoc_insertion_point(field:feast.core.Registry.saved_datasets)
    pub saved_datasets: ::std::vec::Vec<super::SavedDataset::SavedDataset>,
    // @@protoc_insertion_point(field:feast.core.Registry.validation_references)
    pub validation_references: ::std::vec::Vec<super::ValidationProfile::ValidationReference>,
    // @@protoc_insertion_point(field:feast.core.Registry.infra)
    pub infra: ::protobuf::MessageField<super::InfraObject::Infra>,
    ///  Tracking metadata of Feast by project
    // @@protoc_insertion_point(field:feast.core.Registry.project_metadata)
    pub project_metadata: ::std::vec::Vec<ProjectMetadata>,
    // @@protoc_insertion_point(field:feast.core.Registry.registry_schema_version)
    pub registry_schema_version: ::std::string::String,
    // @@protoc_insertion_point(field:feast.core.Registry.version_id)
    pub version_id: ::std::string::String,
    // @@protoc_insertion_point(field:feast.core.Registry.last_updated)
    pub last_updated: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.Registry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Registry {
    fn default() -> &'a Registry {
        <Registry as ::protobuf::Message>::default_instance()
    }
}

impl Registry {
    pub fn new() -> Registry {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entities",
            |m: &Registry| { &m.entities },
            |m: &mut Registry| { &mut m.entities },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "feature_tables",
            |m: &Registry| { &m.feature_tables },
            |m: &mut Registry| { &mut m.feature_tables },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "feature_views",
            |m: &Registry| { &m.feature_views },
            |m: &mut Registry| { &mut m.feature_views },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data_sources",
            |m: &Registry| { &m.data_sources },
            |m: &mut Registry| { &mut m.data_sources },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "on_demand_feature_views",
            |m: &Registry| { &m.on_demand_feature_views },
            |m: &mut Registry| { &mut m.on_demand_feature_views },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "request_feature_views",
            |m: &Registry| { &m.request_feature_views },
            |m: &mut Registry| { &mut m.request_feature_views },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "stream_feature_views",
            |m: &Registry| { &m.stream_feature_views },
            |m: &mut Registry| { &mut m.stream_feature_views },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "feature_services",
            |m: &Registry| { &m.feature_services },
            |m: &mut Registry| { &mut m.feature_services },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "saved_datasets",
            |m: &Registry| { &m.saved_datasets },
            |m: &mut Registry| { &mut m.saved_datasets },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "validation_references",
            |m: &Registry| { &m.validation_references },
            |m: &mut Registry| { &mut m.validation_references },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::InfraObject::Infra>(
            "infra",
            |m: &Registry| { &m.infra },
            |m: &mut Registry| { &mut m.infra },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "project_metadata",
            |m: &Registry| { &m.project_metadata },
            |m: &mut Registry| { &mut m.project_metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "registry_schema_version",
            |m: &Registry| { &m.registry_schema_version },
            |m: &mut Registry| { &mut m.registry_schema_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version_id",
            |m: &Registry| { &m.version_id },
            |m: &mut Registry| { &mut m.version_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "last_updated",
            |m: &Registry| { &m.last_updated },
            |m: &mut Registry| { &mut m.last_updated },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Registry>(
            "Registry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Registry {
    const NAME: &'static str = "Registry";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entities.push(is.read_message()?);
                },
                18 => {
                    self.feature_tables.push(is.read_message()?);
                },
                50 => {
                    self.feature_views.push(is.read_message()?);
                },
                98 => {
                    self.data_sources.push(is.read_message()?);
                },
                66 => {
                    self.on_demand_feature_views.push(is.read_message()?);
                },
                74 => {
                    self.request_feature_views.push(is.read_message()?);
                },
                114 => {
                    self.stream_feature_views.push(is.read_message()?);
                },
                58 => {
                    self.feature_services.push(is.read_message()?);
                },
                90 => {
                    self.saved_datasets.push(is.read_message()?);
                },
                106 => {
                    self.validation_references.push(is.read_message()?);
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.infra)?;
                },
                122 => {
                    self.project_metadata.push(is.read_message()?);
                },
                26 => {
                    self.registry_schema_version = is.read_string()?;
                },
                34 => {
                    self.version_id = is.read_string()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_updated)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entities {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.feature_tables {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.feature_views {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.data_sources {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.on_demand_feature_views {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.request_feature_views {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.stream_feature_views {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.feature_services {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.saved_datasets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.validation_references {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.infra.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.project_metadata {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.registry_schema_version.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.registry_schema_version);
        }
        if !self.version_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.version_id);
        }
        if let Some(v) = self.last_updated.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.entities {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.feature_tables {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.feature_views {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.data_sources {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        for v in &self.on_demand_feature_views {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        for v in &self.request_feature_views {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        for v in &self.stream_feature_views {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        for v in &self.feature_services {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        for v in &self.saved_datasets {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        for v in &self.validation_references {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        if let Some(v) = self.infra.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        for v in &self.project_metadata {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        if !self.registry_schema_version.is_empty() {
            os.write_string(3, &self.registry_schema_version)?;
        }
        if !self.version_id.is_empty() {
            os.write_string(4, &self.version_id)?;
        }
        if let Some(v) = self.last_updated.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Registry {
        Registry::new()
    }

    fn clear(&mut self) {
        self.entities.clear();
        self.feature_tables.clear();
        self.feature_views.clear();
        self.data_sources.clear();
        self.on_demand_feature_views.clear();
        self.request_feature_views.clear();
        self.stream_feature_views.clear();
        self.feature_services.clear();
        self.saved_datasets.clear();
        self.validation_references.clear();
        self.infra.clear();
        self.project_metadata.clear();
        self.registry_schema_version.clear();
        self.version_id.clear();
        self.last_updated.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Registry {
        static instance: Registry = Registry {
            entities: ::std::vec::Vec::new(),
            feature_tables: ::std::vec::Vec::new(),
            feature_views: ::std::vec::Vec::new(),
            data_sources: ::std::vec::Vec::new(),
            on_demand_feature_views: ::std::vec::Vec::new(),
            request_feature_views: ::std::vec::Vec::new(),
            stream_feature_views: ::std::vec::Vec::new(),
            feature_services: ::std::vec::Vec::new(),
            saved_datasets: ::std::vec::Vec::new(),
            validation_references: ::std::vec::Vec::new(),
            infra: ::protobuf::MessageField::none(),
            project_metadata: ::std::vec::Vec::new(),
            registry_schema_version: ::std::string::String::new(),
            version_id: ::std::string::String::new(),
            last_updated: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Registry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Registry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Registry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Registry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.ProjectMetadata)
pub struct ProjectMetadata {
    // message fields
    // @@protoc_insertion_point(field:feast.core.ProjectMetadata.project)
    pub project: ::std::string::String,
    // @@protoc_insertion_point(field:feast.core.ProjectMetadata.project_uuid)
    pub project_uuid: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.ProjectMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProjectMetadata {
    fn default() -> &'a ProjectMetadata {
        <ProjectMetadata as ::protobuf::Message>::default_instance()
    }
}

impl ProjectMetadata {
    pub fn new() -> ProjectMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "project",
            |m: &ProjectMetadata| { &m.project },
            |m: &mut ProjectMetadata| { &mut m.project },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "project_uuid",
            |m: &ProjectMetadata| { &m.project_uuid },
            |m: &mut ProjectMetadata| { &mut m.project_uuid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProjectMetadata>(
            "ProjectMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProjectMetadata {
    const NAME: &'static str = "ProjectMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.project = is.read_string()?;
                },
                18 => {
                    self.project_uuid = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.project.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.project);
        }
        if !self.project_uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.project_uuid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.project.is_empty() {
            os.write_string(1, &self.project)?;
        }
        if !self.project_uuid.is_empty() {
            os.write_string(2, &self.project_uuid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProjectMetadata {
        ProjectMetadata::new()
    }

    fn clear(&mut self) {
        self.project.clear();
        self.project_uuid.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProjectMetadata {
        static instance: ProjectMetadata = ProjectMetadata {
            project: ::std::string::String::new(),
            project_uuid: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProjectMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProjectMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProjectMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProjectMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19feast/core/Registry.proto\x12\nfeast.core\x1a\x17feast/core/Entity\
    .proto\x1a\x1ffeast/core/FeatureService.proto\x1a\x1dfeast/core/FeatureT\
    able.proto\x1a\x1cfeast/core/FeatureView.proto\x1a\x1cfeast/core/InfraOb\
    ject.proto\x1a$feast/core/OnDemandFeatureView.proto\x1a#feast/core/Reque\
    stFeatureView.proto\x1a\"feast/core/StreamFeatureView.proto\x1a\x1bfeast\
    /core/DataSource.proto\x1a\x1dfeast/core/SavedDataset.proto\x1a\"feast/c\
    ore/ValidationProfile.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xd6\
    \x07\n\x08Registry\x12.\n\x08entities\x18\x01\x20\x03(\x0b2\x12.feast.co\
    re.EntityR\x08entities\x12?\n\x0efeature_tables\x18\x02\x20\x03(\x0b2\
    \x18.feast.core.FeatureTableR\rfeatureTables\x12<\n\rfeature_views\x18\
    \x06\x20\x03(\x0b2\x17.feast.core.FeatureViewR\x0cfeatureViews\x129\n\
    \x0cdata_sources\x18\x0c\x20\x03(\x0b2\x16.feast.core.DataSourceR\x0bdat\
    aSources\x12V\n\x17on_demand_feature_views\x18\x08\x20\x03(\x0b2\x1f.fea\
    st.core.OnDemandFeatureViewR\x14onDemandFeatureViews\x12R\n\x15request_f\
    eature_views\x18\t\x20\x03(\x0b2\x1e.feast.core.RequestFeatureViewR\x13r\
    equestFeatureViews\x12O\n\x14stream_feature_views\x18\x0e\x20\x03(\x0b2\
    \x1d.feast.core.StreamFeatureViewR\x12streamFeatureViews\x12E\n\x10featu\
    re_services\x18\x07\x20\x03(\x0b2\x1a.feast.core.FeatureServiceR\x0ffeat\
    ureServices\x12?\n\x0esaved_datasets\x18\x0b\x20\x03(\x0b2\x18.feast.cor\
    e.SavedDatasetR\rsavedDatasets\x12T\n\x15validation_references\x18\r\x20\
    \x03(\x0b2\x1f.feast.core.ValidationReferenceR\x14validationReferences\
    \x12'\n\x05infra\x18\n\x20\x01(\x0b2\x11.feast.core.InfraR\x05infra\x12F\
    \n\x10project_metadata\x18\x0f\x20\x03(\x0b2\x1b.feast.core.ProjectMetad\
    ataR\x0fprojectMetadata\x126\n\x17registry_schema_version\x18\x03\x20\
    \x01(\tR\x15registrySchemaVersion\x12\x1d\n\nversion_id\x18\x04\x20\x01(\
    \tR\tversionId\x12=\n\x0clast_updated\x18\x05\x20\x01(\x0b2\x1a.google.p\
    rotobuf.TimestampR\x0blastUpdated\"N\n\x0fProjectMetadata\x12\x18\n\x07p\
    roject\x18\x01\x20\x01(\tR\x07project\x12!\n\x0cproject_uuid\x18\x02\x20\
    \x01(\tR\x0bprojectUuidBR\n\x10feast.proto.coreB\rRegistryProtoZ/github.\
    com/feast-dev/feast/go/protos/feast/coreJ\x86\x11\n\x06\x12\x04\x10\0<\
    \x01\n\xe0\x04\n\x01\x0c\x12\x03\x10\0\x122\xd5\x04\n\x20*\x20Copyright\
    \x202020\x20The\x20Feast\x20Authors\n\x20*\n\x20*\x20Licensed\x20under\
    \x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\
    \n\x20*\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20c\
    ompliance\x20with\x20the\x20License.\n\x20*\x20You\x20may\x20obtain\x20a\
    \x20copy\x20of\x20the\x20License\x20at\n\x20*\n\x20*\x20\x20\x20\x20\x20\
    https://www.apache.org/licenses/LICENSE-2.0\n\x20*\n\x20*\x20Unless\x20r\
    equired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writin\
    g,\x20software\n\x20*\x20distributed\x20under\x20the\x20License\x20is\
    \x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20*\x20WITHOUT\
    \x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20ex\
    press\x20or\x20implied.\n\x20*\x20See\x20the\x20License\x20for\x20the\
    \x20specific\x20language\x20governing\x20permissions\x20and\n\x20*\x20li\
    mitations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x12\0\
    \x13\n\x08\n\x01\x08\x12\x03\x13\0)\n\t\n\x02\x08\x01\x12\x03\x13\0)\n\
    \x08\n\x01\x08\x12\x03\x14\0.\n\t\n\x02\x08\x08\x12\x03\x14\0.\n\x08\n\
    \x01\x08\x12\x03\x15\0F\n\t\n\x02\x08\x0b\x12\x03\x15\0F\n\t\n\x02\x03\0\
    \x12\x03\x17\0!\n\t\n\x02\x03\x01\x12\x03\x18\0)\n\t\n\x02\x03\x02\x12\
    \x03\x19\0'\n\t\n\x02\x03\x03\x12\x03\x1a\0&\n\t\n\x02\x03\x04\x12\x03\
    \x1b\0&\n\t\n\x02\x03\x05\x12\x03\x1c\0.\n\t\n\x02\x03\x06\x12\x03\x1d\0\
    -\n\t\n\x02\x03\x07\x12\x03\x1e\0,\n\t\n\x02\x03\x08\x12\x03\x1f\0%\n\t\
    \n\x02\x03\t\x12\x03\x20\0'\n\t\n\x02\x03\n\x12\x03!\0,\n\t\n\x02\x03\
    \x0b\x12\x03\"\0)\n\x19\n\x02\x04\0\x12\x04%\07\x01\x1a\r\x20Next\x20id:\
    \x2016\n\n\n\n\x03\x04\0\x01\x12\x03%\x08\x10\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03&\x04!\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03&\x04\x0c\n\x0c\n\x05\
    \x04\0\x02\0\x06\x12\x03&\r\x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03&\x14\
    \x1c\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03&\x1f\x20\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03'\x04-\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03'\x04\x0c\n\x0c\
    \n\x05\x04\0\x02\x01\x06\x12\x03'\r\x19\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03'\x1a(\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03'+,\n\x0b\n\x04\x04\
    \0\x02\x02\x12\x03(\x04+\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03(\x04\x0c\
    \n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03(\r\x18\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03(\x19&\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03()*\n\x0b\n\x04\
    \x04\0\x02\x03\x12\x03)\x04*\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03)\x04\
    \x0c\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03)\r\x17\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03)\x18$\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03)')\n\x0b\n\
    \x04\x04\0\x02\x04\x12\x03*\x04=\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03*\
    \x04\x0c\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03*\r\x20\n\x0c\n\x05\x04\0\
    \x02\x04\x01\x12\x03*!8\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03*;<\n\x0b\n\
    \x04\x04\0\x02\x05\x12\x03+\x04:\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03+\
    \x04\x0c\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03+\r\x1f\n\x0c\n\x05\x04\0\
    \x02\x05\x01\x12\x03+\x205\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03+89\n\
    \x0b\n\x04\x04\0\x02\x06\x12\x03,\x049\n\x0c\n\x05\x04\0\x02\x06\x04\x12\
    \x03,\x04\x0c\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03,\r\x1e\n\x0c\n\x05\
    \x04\0\x02\x06\x01\x12\x03,\x1f3\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03,6\
    8\n\x0b\n\x04\x04\0\x02\x07\x12\x03-\x041\n\x0c\n\x05\x04\0\x02\x07\x04\
    \x12\x03-\x04\x0c\n\x0c\n\x05\x04\0\x02\x07\x06\x12\x03-\r\x1b\n\x0c\n\
    \x05\x04\0\x02\x07\x01\x12\x03-\x1c,\n\x0c\n\x05\x04\0\x02\x07\x03\x12\
    \x03-/0\n\x0b\n\x04\x04\0\x02\x08\x12\x03.\x04.\n\x0c\n\x05\x04\0\x02\
    \x08\x04\x12\x03.\x04\x0c\n\x0c\n\x05\x04\0\x02\x08\x06\x12\x03.\r\x19\n\
    \x0c\n\x05\x04\0\x02\x08\x01\x12\x03.\x1a(\n\x0c\n\x05\x04\0\x02\x08\x03\
    \x12\x03.+-\n\x0b\n\x04\x04\0\x02\t\x12\x03/\x04<\n\x0c\n\x05\x04\0\x02\
    \t\x04\x12\x03/\x04\x0c\n\x0c\n\x05\x04\0\x02\t\x06\x12\x03/\r\x20\n\x0c\
    \n\x05\x04\0\x02\t\x01\x12\x03/!6\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03/9;\
    \n\x0b\n\x04\x04\0\x02\n\x12\x030\x04\x15\n\x0c\n\x05\x04\0\x02\n\x06\
    \x12\x030\x04\t\n\x0c\n\x05\x04\0\x02\n\x01\x12\x030\n\x0f\n\x0c\n\x05\
    \x04\0\x02\n\x03\x12\x030\x12\x14\n4\n\x04\x04\0\x02\x0b\x12\x032\x043\
    \x1a'\x20Tracking\x20metadata\x20of\x20Feast\x20by\x20project\n\n\x0c\n\
    \x05\x04\0\x02\x0b\x04\x12\x032\x04\x0c\n\x0c\n\x05\x04\0\x02\x0b\x06\
    \x12\x032\r\x1c\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x032\x1d-\n\x0c\n\x05\
    \x04\0\x02\x0b\x03\x12\x03202\nH\n\x04\x04\0\x02\x0c\x12\x034\x04'\";\
    \x20to\x20support\x20migrations;\x20incremented\x20when\x20schema\x20is\
    \x20changed\n\n\x0c\n\x05\x04\0\x02\x0c\x05\x12\x034\x04\n\n\x0c\n\x05\
    \x04\0\x02\x0c\x01\x12\x034\x0b\"\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\x034\
    %&\ns\n\x04\x04\0\x02\r\x12\x035\x04\x1a\"f\x20version\x20id,\x20random\
    \x20string\x20generated\x20on\x20each\x20update\x20of\x20the\x20data;\
    \x20now\x20used\x20only\x20for\x20debugging\x20purposes\n\n\x0c\n\x05\
    \x04\0\x02\r\x05\x12\x035\x04\n\n\x0c\n\x05\x04\0\x02\r\x01\x12\x035\x0b\
    \x15\n\x0c\n\x05\x04\0\x02\r\x03\x12\x035\x18\x19\n\x0b\n\x04\x04\0\x02\
    \x0e\x12\x036\x04/\n\x0c\n\x05\x04\0\x02\x0e\x06\x12\x036\x04\x1d\n\x0c\
    \n\x05\x04\0\x02\x0e\x01\x12\x036\x1e*\n\x0c\n\x05\x04\0\x02\x0e\x03\x12\
    \x036-.\n\n\n\x02\x04\x01\x12\x049\0<\x01\n\n\n\x03\x04\x01\x01\x12\x039\
    \x08\x17\n\x0b\n\x04\x04\x01\x02\0\x12\x03:\x04\x17\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03:\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03:\x0b\x12\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03:\x15\x16\n\x0b\n\x04\x04\x01\x02\
    \x01\x12\x03;\x04\x1c\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03;\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03;\x0b\x17\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03;\x1a\x1bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(12);
            deps.push(super::Entity::file_descriptor().clone());
            deps.push(super::FeatureService::file_descriptor().clone());
            deps.push(super::FeatureTable::file_descriptor().clone());
            deps.push(super::FeatureView::file_descriptor().clone());
            deps.push(super::InfraObject::file_descriptor().clone());
            deps.push(super::OnDemandFeatureView::file_descriptor().clone());
            deps.push(super::RequestFeatureView::file_descriptor().clone());
            deps.push(super::StreamFeatureView::file_descriptor().clone());
            deps.push(super::DataSource::file_descriptor().clone());
            deps.push(super::SavedDataset::file_descriptor().clone());
            deps.push(super::ValidationProfile::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Registry::generated_message_descriptor_data());
            messages.push(ProjectMetadata::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
