// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `feast/core/FeatureTable.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.FeatureTable)
pub struct FeatureTable {
    // message fields
    ///  User-specified specifications of this feature table.
    // @@protoc_insertion_point(field:feast.core.FeatureTable.spec)
    pub spec: ::protobuf::MessageField<FeatureTableSpec>,
    ///  System-populated metadata for this feature table.
    // @@protoc_insertion_point(field:feast.core.FeatureTable.meta)
    pub meta: ::protobuf::MessageField<FeatureTableMeta>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.FeatureTable.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FeatureTable {
    fn default() -> &'a FeatureTable {
        <FeatureTable as ::protobuf::Message>::default_instance()
    }
}

impl FeatureTable {
    pub fn new() -> FeatureTable {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, FeatureTableSpec>(
            "spec",
            |m: &FeatureTable| { &m.spec },
            |m: &mut FeatureTable| { &mut m.spec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, FeatureTableMeta>(
            "meta",
            |m: &FeatureTable| { &m.meta },
            |m: &mut FeatureTable| { &mut m.meta },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FeatureTable>(
            "FeatureTable",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FeatureTable {
    const NAME: &'static str = "FeatureTable";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spec)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.meta)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.spec.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.meta.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FeatureTable {
        FeatureTable::new()
    }

    fn clear(&mut self) {
        self.spec.clear();
        self.meta.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FeatureTable {
        static instance: FeatureTable = FeatureTable {
            spec: ::protobuf::MessageField::none(),
            meta: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FeatureTable {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FeatureTable").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FeatureTable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeatureTable {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.FeatureTableSpec)
pub struct FeatureTableSpec {
    // message fields
    ///  Name of the feature table. Must be unique. Not updated.
    // @@protoc_insertion_point(field:feast.core.FeatureTableSpec.name)
    pub name: ::std::string::String,
    ///  Name of Feast project that this feature table belongs to.
    // @@protoc_insertion_point(field:feast.core.FeatureTableSpec.project)
    pub project: ::std::string::String,
    ///  List names of entities to associate with the Features defined in this 
    ///  Feature Table. Not updatable.
    // @@protoc_insertion_point(field:feast.core.FeatureTableSpec.entities)
    pub entities: ::std::vec::Vec<::std::string::String>,
    ///  List of features specifications for each feature defined with this feature table.
    // @@protoc_insertion_point(field:feast.core.FeatureTableSpec.features)
    pub features: ::std::vec::Vec<super::Feature::FeatureSpecV2>,
    ///  User defined metadata
    // @@protoc_insertion_point(field:feast.core.FeatureTableSpec.labels)
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    ///  Features in this feature table can only be retrieved from online serving
    ///  younger than max age. Age is measured as the duration of time between 
    ///  the feature's event timestamp and when the feature is retrieved
    ///  Feature values outside max age will be returned as unset values and indicated to end user
    // @@protoc_insertion_point(field:feast.core.FeatureTableSpec.max_age)
    pub max_age: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    ///  Batch/Offline DataSource to source batch/offline feature data.
    ///  Only batch DataSource can be specified 
    ///  (ie source type should start with 'BATCH_')
    // @@protoc_insertion_point(field:feast.core.FeatureTableSpec.batch_source)
    pub batch_source: ::protobuf::MessageField<super::DataSource::DataSource>,
    ///  Stream/Online DataSource to source stream/online feature data.
    ///  Only stream DataSource can be specified 
    ///  (ie source type should start with 'STREAM_')
    // @@protoc_insertion_point(field:feast.core.FeatureTableSpec.stream_source)
    pub stream_source: ::protobuf::MessageField<super::DataSource::DataSource>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.FeatureTableSpec.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FeatureTableSpec {
    fn default() -> &'a FeatureTableSpec {
        <FeatureTableSpec as ::protobuf::Message>::default_instance()
    }
}

impl FeatureTableSpec {
    pub fn new() -> FeatureTableSpec {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &FeatureTableSpec| { &m.name },
            |m: &mut FeatureTableSpec| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "project",
            |m: &FeatureTableSpec| { &m.project },
            |m: &mut FeatureTableSpec| { &mut m.project },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entities",
            |m: &FeatureTableSpec| { &m.entities },
            |m: &mut FeatureTableSpec| { &mut m.entities },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "features",
            |m: &FeatureTableSpec| { &m.features },
            |m: &mut FeatureTableSpec| { &mut m.features },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "labels",
            |m: &FeatureTableSpec| { &m.labels },
            |m: &mut FeatureTableSpec| { &mut m.labels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "max_age",
            |m: &FeatureTableSpec| { &m.max_age },
            |m: &mut FeatureTableSpec| { &mut m.max_age },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DataSource::DataSource>(
            "batch_source",
            |m: &FeatureTableSpec| { &m.batch_source },
            |m: &mut FeatureTableSpec| { &mut m.batch_source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::DataSource::DataSource>(
            "stream_source",
            |m: &FeatureTableSpec| { &m.stream_source },
            |m: &mut FeatureTableSpec| { &mut m.stream_source },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FeatureTableSpec>(
            "FeatureTableSpec",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FeatureTableSpec {
    const NAME: &'static str = "FeatureTableSpec";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                74 => {
                    self.project = is.read_string()?;
                },
                26 => {
                    self.entities.push(is.read_string()?);
                },
                34 => {
                    self.features.push(is.read_message()?);
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.labels.insert(key, value);
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.max_age)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.batch_source)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.stream_source)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.project.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.project);
        }
        for value in &self.entities {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.features {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.max_age.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.batch_source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.stream_source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.project.is_empty() {
            os.write_string(9, &self.project)?;
        }
        for v in &self.entities {
            os.write_string(3, &v)?;
        };
        for v in &self.features {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for (k, v) in &self.labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if let Some(v) = self.max_age.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.batch_source.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.stream_source.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FeatureTableSpec {
        FeatureTableSpec::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.project.clear();
        self.entities.clear();
        self.features.clear();
        self.labels.clear();
        self.max_age.clear();
        self.batch_source.clear();
        self.stream_source.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FeatureTableSpec {
        static instance: ::protobuf::rt::Lazy<FeatureTableSpec> = ::protobuf::rt::Lazy::new();
        instance.get(FeatureTableSpec::new)
    }
}

impl ::protobuf::MessageFull for FeatureTableSpec {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FeatureTableSpec").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FeatureTableSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeatureTableSpec {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.FeatureTableMeta)
pub struct FeatureTableMeta {
    // message fields
    ///  Time where this Feature Table is created
    // @@protoc_insertion_point(field:feast.core.FeatureTableMeta.created_timestamp)
    pub created_timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  Time where this Feature Table is last updated
    // @@protoc_insertion_point(field:feast.core.FeatureTableMeta.last_updated_timestamp)
    pub last_updated_timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    ///  Auto incrementing revision no. of this Feature Table
    // @@protoc_insertion_point(field:feast.core.FeatureTableMeta.revision)
    pub revision: i64,
    ///  Hash entities, features, batch_source and stream_source to inform JobService if
    ///  jobs should be restarted should hash change
    // @@protoc_insertion_point(field:feast.core.FeatureTableMeta.hash)
    pub hash: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.FeatureTableMeta.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FeatureTableMeta {
    fn default() -> &'a FeatureTableMeta {
        <FeatureTableMeta as ::protobuf::Message>::default_instance()
    }
}

impl FeatureTableMeta {
    pub fn new() -> FeatureTableMeta {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "created_timestamp",
            |m: &FeatureTableMeta| { &m.created_timestamp },
            |m: &mut FeatureTableMeta| { &mut m.created_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "last_updated_timestamp",
            |m: &FeatureTableMeta| { &m.last_updated_timestamp },
            |m: &mut FeatureTableMeta| { &mut m.last_updated_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "revision",
            |m: &FeatureTableMeta| { &m.revision },
            |m: &mut FeatureTableMeta| { &mut m.revision },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &FeatureTableMeta| { &m.hash },
            |m: &mut FeatureTableMeta| { &mut m.hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FeatureTableMeta>(
            "FeatureTableMeta",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FeatureTableMeta {
    const NAME: &'static str = "FeatureTableMeta";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.created_timestamp)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_updated_timestamp)?;
                },
                24 => {
                    self.revision = is.read_int64()?;
                },
                34 => {
                    self.hash = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.created_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.last_updated_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.revision != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.revision);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.created_timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.last_updated_timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.revision != 0 {
            os.write_int64(3, self.revision)?;
        }
        if !self.hash.is_empty() {
            os.write_string(4, &self.hash)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FeatureTableMeta {
        FeatureTableMeta::new()
    }

    fn clear(&mut self) {
        self.created_timestamp.clear();
        self.last_updated_timestamp.clear();
        self.revision = 0;
        self.hash.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FeatureTableMeta {
        static instance: FeatureTableMeta = FeatureTableMeta {
            created_timestamp: ::protobuf::MessageField::none(),
            last_updated_timestamp: ::protobuf::MessageField::none(),
            revision: 0,
            hash: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FeatureTableMeta {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FeatureTableMeta").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FeatureTableMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeatureTableMeta {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dfeast/core/FeatureTable.proto\x12\nfeast.core\x1a\x1egoogle/protob\
    uf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bfeast/co\
    re/DataSource.proto\x1a\x18feast/core/Feature.proto\"r\n\x0cFeatureTable\
    \x120\n\x04spec\x18\x01\x20\x01(\x0b2\x1c.feast.core.FeatureTableSpecR\
    \x04spec\x120\n\x04meta\x18\x02\x20\x01(\x0b2\x1c.feast.core.FeatureTabl\
    eMetaR\x04meta\"\xbc\x03\n\x10FeatureTableSpec\x12\x12\n\x04name\x18\x01\
    \x20\x01(\tR\x04name\x12\x18\n\x07project\x18\t\x20\x01(\tR\x07project\
    \x12\x1a\n\x08entities\x18\x03\x20\x03(\tR\x08entities\x125\n\x08feature\
    s\x18\x04\x20\x03(\x0b2\x19.feast.core.FeatureSpecV2R\x08features\x12@\n\
    \x06labels\x18\x05\x20\x03(\x0b2(.feast.core.FeatureTableSpec.LabelsEntr\
    yR\x06labels\x122\n\x07max_age\x18\x06\x20\x01(\x0b2\x19.google.protobuf\
    .DurationR\x06maxAge\x129\n\x0cbatch_source\x18\x07\x20\x01(\x0b2\x16.fe\
    ast.core.DataSourceR\x0bbatchSource\x12;\n\rstream_source\x18\x08\x20\
    \x01(\x0b2\x16.feast.core.DataSourceR\x0cstreamSource\x1a9\n\x0bLabelsEn\
    try\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\
    \x02\x20\x01(\tR\x05value:\x028\x01\"\xdd\x01\n\x10FeatureTableMeta\x12G\
    \n\x11created_timestamp\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.Timest\
    ampR\x10createdTimestamp\x12P\n\x16last_updated_timestamp\x18\x02\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\x14lastUpdatedTimestamp\x12\
    \x1a\n\x08revision\x18\x03\x20\x01(\x03R\x08revision\x12\x12\n\x04hash\
    \x18\x04\x20\x01(\tR\x04hashBV\n\x10feast.proto.coreB\x11FeatureTablePro\
    toZ/github.com/feast-dev/feast/go/protos/feast/coreJ\xe6\x16\n\x06\x12\
    \x04\x11\0U\x01\n\xc6\x04\n\x01\x0c\x12\x03\x11\0\x122\xbb\x04\n\x20Copy\
    right\x202020\x20The\x20Feast\x20Authors\n\n\x20Licensed\x20under\x20the\
    \x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20y\
    ou\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\
    \x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\
    \x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20https://www.apache.org/l\
    icenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\
    \x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\
    \x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20\
    IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20A\
    NY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20Li\
    cense\x20for\x20the\x20specific\x20language\x20governing\x20permissions\
    \x20and\n\x20limitations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\
    \x12\x03\x12\0\x13\n\x08\n\x01\x08\x12\x03\x15\0F\n\t\n\x02\x08\x0b\x12\
    \x03\x15\0F\n\x08\n\x01\x08\x12\x03\x16\02\n\t\n\x02\x08\x08\x12\x03\x16\
    \02\n\x08\n\x01\x08\x12\x03\x17\0)\n\t\n\x02\x08\x01\x12\x03\x17\0)\n\t\
    \n\x02\x03\0\x12\x03\x19\0(\n\t\n\x02\x03\x01\x12\x03\x1a\0)\n\t\n\x02\
    \x03\x02\x12\x03\x1b\0%\n\t\n\x02\x03\x03\x12\x03\x1c\0\"\n\n\n\x02\x04\
    \0\x12\x04\x1e\0$\x01\n\n\n\x03\x04\0\x01\x12\x03\x1e\x08\x14\nC\n\x04\
    \x04\0\x02\0\x12\x03\x20\x04\x1e\x1a6\x20User-specified\x20specification\
    s\x20of\x20this\x20feature\x20table.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\
    \x03\x20\x04\x14\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x20\x15\x19\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x20\x1c\x1d\n@\n\x04\x04\0\x02\x01\x12\x03#\
    \x04\x1e\x1a3\x20System-populated\x20metadata\x20for\x20this\x20feature\
    \x20table.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03#\x04\x14\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03#\x15\x19\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03#\x1c\x1d\n\n\n\x02\x04\x01\x12\x04&\0F\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03&\x08\x18\nF\n\x04\x04\x01\x02\0\x12\x03(\x04\x14\x1a9\x20Name\
    \x20of\x20the\x20feature\x20table.\x20Must\x20be\x20unique.\x20Not\x20up\
    dated.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03(\x04\n\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03(\x0b\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03(\
    \x12\x13\nH\n\x04\x04\x01\x02\x01\x12\x03+\x04\x17\x1a;\x20Name\x20of\
    \x20Feast\x20project\x20that\x20this\x20feature\x20table\x20belongs\x20t\
    o.\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03+\x04\n\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03+\x0b\x12\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03+\
    \x15\x16\nt\n\x04\x04\x01\x02\x02\x12\x03/\x04!\x1ag\x20List\x20names\
    \x20of\x20entities\x20to\x20associate\x20with\x20the\x20Features\x20defi\
    ned\x20in\x20this\x20\n\x20Feature\x20Table.\x20Not\x20updatable.\n\n\
    \x0c\n\x05\x04\x01\x02\x02\x04\x12\x03/\x04\x0c\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x03/\r\x13\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03/\x14\x1c\
    \n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03/\x1f\x20\n`\n\x04\x04\x01\x02\
    \x03\x12\x032\x04(\x1aS\x20List\x20of\x20features\x20specifications\x20f\
    or\x20each\x20feature\x20defined\x20with\x20this\x20feature\x20table.\n\
    \n\x0c\n\x05\x04\x01\x02\x03\x04\x12\x032\x04\x0c\n\x0c\n\x05\x04\x01\
    \x02\x03\x06\x12\x032\r\x1a\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x032\x1b\
    #\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x032&'\n$\n\x04\x04\x01\x02\x04\
    \x12\x035\x04\"\x1a\x17\x20User\x20defined\x20metadata\n\n\x0c\n\x05\x04\
    \x01\x02\x04\x06\x12\x035\x04\x16\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\
    \x035\x17\x1d\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x035\x20!\n\xbc\x02\n\
    \x04\x04\x01\x02\x05\x12\x03;\x04)\x1a\xae\x02\x20Features\x20in\x20this\
    \x20feature\x20table\x20can\x20only\x20be\x20retrieved\x20from\x20online\
    \x20serving\n\x20younger\x20than\x20max\x20age.\x20Age\x20is\x20measured\
    \x20as\x20the\x20duration\x20of\x20time\x20between\x20\n\x20the\x20featu\
    re's\x20event\x20timestamp\x20and\x20when\x20the\x20feature\x20is\x20ret\
    rieved\n\x20Feature\x20values\x20outside\x20max\x20age\x20will\x20be\x20\
    returned\x20as\x20unset\x20values\x20and\x20indicated\x20to\x20end\x20us\
    er\n\n\x0c\n\x05\x04\x01\x02\x05\x06\x12\x03;\x04\x1c\n\x0c\n\x05\x04\
    \x01\x02\x05\x01\x12\x03;\x1d$\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03;'\
    (\n\xa4\x01\n\x04\x04\x01\x02\x06\x12\x03@\x04\x20\x1a\x96\x01\x20Batch/\
    Offline\x20DataSource\x20to\x20source\x20batch/offline\x20feature\x20dat\
    a.\n\x20Only\x20batch\x20DataSource\x20can\x20be\x20specified\x20\n\x20(\
    ie\x20source\x20type\x20should\x20start\x20with\x20'BATCH_')\n\n\x0c\n\
    \x05\x04\x01\x02\x06\x06\x12\x03@\x04\x0e\n\x0c\n\x05\x04\x01\x02\x06\
    \x01\x12\x03@\x0f\x1b\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03@\x1e\x1f\n\
    \xa6\x01\n\x04\x04\x01\x02\x07\x12\x03E\x04!\x1a\x98\x01\x20Stream/Onlin\
    e\x20DataSource\x20to\x20source\x20stream/online\x20feature\x20data.\n\
    \x20Only\x20stream\x20DataSource\x20can\x20be\x20specified\x20\n\x20(ie\
    \x20source\x20type\x20should\x20start\x20with\x20'STREAM_')\n\n\x0c\n\
    \x05\x04\x01\x02\x07\x06\x12\x03E\x04\x0e\n\x0c\n\x05\x04\x01\x02\x07\
    \x01\x12\x03E\x0f\x1c\n\x0c\n\x05\x04\x01\x02\x07\x03\x12\x03E\x1f\x20\n\
    \n\n\x02\x04\x02\x12\x04H\0U\x01\n\n\n\x03\x04\x02\x01\x12\x03H\x08\x18\
    \n7\n\x04\x04\x02\x02\0\x12\x03J\x044\x1a*\x20Time\x20where\x20this\x20F\
    eature\x20Table\x20is\x20created\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\
    J\x04\x1d\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03J\x1e/\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03J23\n<\n\x04\x04\x02\x02\x01\x12\x03M\x049\x1a/\
    \x20Time\x20where\x20this\x20Feature\x20Table\x20is\x20last\x20updated\n\
    \n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03M\x04\x1d\n\x0c\n\x05\x04\x02\
    \x02\x01\x01\x12\x03M\x1e4\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03M78\nC\
    \n\x04\x04\x02\x02\x02\x12\x03P\x04\x17\x1a6\x20Auto\x20incrementing\x20\
    revision\x20no.\x20of\x20this\x20Feature\x20Table\n\n\x0c\n\x05\x04\x02\
    \x02\x02\x05\x12\x03P\x04\t\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03P\n\
    \x12\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03P\x15\x16\n\x8b\x01\n\x04\
    \x04\x02\x02\x03\x12\x03T\x04\x14\x1a~\x20Hash\x20entities,\x20features,\
    \x20batch_source\x20and\x20stream_source\x20to\x20inform\x20JobService\
    \x20if\n\x20jobs\x20should\x20be\x20restarted\x20should\x20hash\x20chang\
    e\n\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03T\x04\n\n\x0c\n\x05\x04\x02\
    \x02\x03\x01\x12\x03T\x0b\x0f\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03T\
    \x12\x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::DataSource::file_descriptor().clone());
            deps.push(super::Feature::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(FeatureTable::generated_message_descriptor_data());
            messages.push(FeatureTableSpec::generated_message_descriptor_data());
            messages.push(FeatureTableMeta::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
