// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `feast/core/Aggregation.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:feast.core.Aggregation)
pub struct Aggregation {
    // message fields
    // @@protoc_insertion_point(field:feast.core.Aggregation.column)
    pub column: ::std::string::String,
    // @@protoc_insertion_point(field:feast.core.Aggregation.function)
    pub function: ::std::string::String,
    // @@protoc_insertion_point(field:feast.core.Aggregation.time_window)
    pub time_window: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // @@protoc_insertion_point(field:feast.core.Aggregation.slide_interval)
    pub slide_interval: ::protobuf::MessageField<::protobuf::well_known_types::duration::Duration>,
    // special fields
    // @@protoc_insertion_point(special_field:feast.core.Aggregation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Aggregation {
    fn default() -> &'a Aggregation {
        <Aggregation as ::protobuf::Message>::default_instance()
    }
}

impl Aggregation {
    pub fn new() -> Aggregation {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "column",
            |m: &Aggregation| { &m.column },
            |m: &mut Aggregation| { &mut m.column },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "function",
            |m: &Aggregation| { &m.function },
            |m: &mut Aggregation| { &mut m.function },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "time_window",
            |m: &Aggregation| { &m.time_window },
            |m: &mut Aggregation| { &mut m.time_window },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::duration::Duration>(
            "slide_interval",
            |m: &Aggregation| { &m.slide_interval },
            |m: &mut Aggregation| { &mut m.slide_interval },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Aggregation>(
            "Aggregation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Aggregation {
    const NAME: &'static str = "Aggregation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.column = is.read_string()?;
                },
                18 => {
                    self.function = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.time_window)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.slide_interval)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.column.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.column);
        }
        if !self.function.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.function);
        }
        if let Some(v) = self.time_window.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.slide_interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.column.is_empty() {
            os.write_string(1, &self.column)?;
        }
        if !self.function.is_empty() {
            os.write_string(2, &self.function)?;
        }
        if let Some(v) = self.time_window.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.slide_interval.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Aggregation {
        Aggregation::new()
    }

    fn clear(&mut self) {
        self.column.clear();
        self.function.clear();
        self.time_window.clear();
        self.slide_interval.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Aggregation {
        static instance: Aggregation = Aggregation {
            column: ::std::string::String::new(),
            function: ::std::string::String::new(),
            time_window: ::protobuf::MessageField::none(),
            slide_interval: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Aggregation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Aggregation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Aggregation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Aggregation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cfeast/core/Aggregation.proto\x12\nfeast.core\x1a\x1egoogle/protobu\
    f/duration.proto\"\xbf\x01\n\x0bAggregation\x12\x16\n\x06column\x18\x01\
    \x20\x01(\tR\x06column\x12\x1a\n\x08function\x18\x02\x20\x01(\tR\x08func\
    tion\x12:\n\x0btime_window\x18\x03\x20\x01(\x0b2\x19.google.protobuf.Dur\
    ationR\ntimeWindow\x12@\n\x0eslide_interval\x18\x04\x20\x01(\x0b2\x19.go\
    ogle.protobuf.DurationR\rslideIntervalBU\n\x10feast.proto.coreB\x10Aggre\
    gationProtoZ/github.com/feast-dev/feast/go/protos/feast/coreJ\xda\x02\n\
    \x06\x12\x04\0\0\x0e\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x01\0\x13\n\x08\n\x01\x08\x12\x03\x03\0F\n\t\n\x02\x08\x0b\x12\
    \x03\x03\0F\n\x08\n\x01\x08\x12\x03\x04\01\n\t\n\x02\x08\x08\x12\x03\x04\
    \01\n\x08\n\x01\x08\x12\x03\x05\0)\n\t\n\x02\x08\x01\x12\x03\x05\0)\n\t\
    \n\x02\x03\0\x12\x03\x07\0(\n\n\n\x02\x04\0\x12\x04\t\0\x0e\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\t\x08\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\n\x04\
    \x16\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\n\x04\n\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\n\x0b\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x14\x15\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x0b\x04\x18\n\x0c\n\x05\x04\0\x02\x01\
    \x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\x0b\x13\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0b\x16\x17\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\x0c\x04-\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x0c\x04\x1c\
    \n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0c\x1d(\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03\x0c+,\n\x0b\n\x04\x04\0\x02\x03\x12\x03\r\x040\n\x0c\n\
    \x05\x04\0\x02\x03\x06\x12\x03\r\x04\x1c\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03\r\x1d+\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\r./b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::duration::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Aggregation::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
